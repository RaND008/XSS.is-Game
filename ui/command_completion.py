"""
–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è XSS Game 0.3.0
–°–æ–≤–º–µ—Å—Ç–∏–º–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è Windows –∏ –¥—Ä—É–≥–∏—Ö –û–°
"""

from typing import List, Optional, Tuple

from ui.colors import XSSColors as Colors

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ readline —Å fallback –¥–ª—è Windows
HAS_READLINE = True
readline = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

try:
    import readline

    print(f"{Colors.SUCCESS}‚úÖ –ú–æ–¥—É–ª—å readline –¥–æ—Å—Ç—É–ø–µ–Ω{Colors.RESET}")
except ImportError:
    HAS_READLINE = False
    readline = None  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º None
    print(f"{Colors.WARNING}‚ö†Ô∏è –ú–æ–¥—É–ª—å readline –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.{Colors.RESET}")

    # –î–ª—è Windows –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å pyreadline
    try:
        import pyreadline as readline

        HAS_READLINE = True
        print(f"{Colors.SUCCESS}‚úÖ –ù–∞–π–¥–µ–Ω pyreadline - –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ{Colors.RESET}")
    except ImportError:
        readline = None  # –î–û–ë–ê–í–õ–ï–ù–û: –æ–ø—Ä–µ–¥–µ–ª—è–µ–º readline –≤ except –±–ª–æ–∫–µ
        print(f"{Colors.INFO}üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyreadline3{Colors.RESET}")


class CommandCompleter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö –û–°"""
    
    def __init__(self):
        self.base_commands = {
            # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
            "status": "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
            "forum": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä—É–º–∞",
            "missions": "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
            "market": "–¢–µ–Ω–µ–≤–æ–π —Ä—ã–Ω–æ–∫",
            "contacts": "–°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
            "crypto": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞",
            "training": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä",
            "train": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä (–∞–ª–∏–∞—Å)",
            "faction": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–∞–∫—Ü–∏–∏",
            "chat": "–ì–ª–æ–±–∞–ª—å–Ω—ã–π —á–∞—Ç",

            # === –î–ï–ô–°–¢–í–ò–Ø –° –ú–ò–°–°–ò–Ø–ú–ò ===
            "take": "–í–∑—è—Ç—å –º–∏—Å—Å–∏—é [ID]",
            "work": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –º–∏—Å—Å–∏—é",
            "abort_mission": "–ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–∏—Å—Å–∏—é",
            "mission_status": "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏",
            "team_status": "–°—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã",
            "recruit": "–ù–∞–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –º–∏—Å—Å–∏–∏",
            "recruit_team": "–ù–∞–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É (–∞–ª–∏–∞—Å)",

            # === –ü–û–ö–£–ü–ö–ò –ò –¢–û–†–ì–û–í–õ–Ø ===
            "buy": "–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç [ID]",
            "sell": "–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
            "info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ [ID]",
            "item_info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ (–∞–ª–∏–∞—Å)",

            # === –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò ===
            "pm": "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ [–∫–æ–Ω—Ç–∞–∫—Ç]",
            "private_message": "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–ª–∏–∞—Å)",
            "message": "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",

            # === –§–†–ê–ö–¶–ò–ò ===
            "join_faction": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ñ—Ä–∞–∫—Ü–∏–∏",
            "change_faction": "–°–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é",
            "faction_status": "–°—Ç–∞—Ç—É—Å –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏",
            "defect": "–ü–æ–∫–∏–Ω—É—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é",

            # === –í–ê–õ–Æ–¢–´ –ò –§–ò–ù–ê–ù–°–´ ===
            "exchange_btc_usd": "–û–±–º–µ–Ω—è—Ç—å BTC –Ω–∞ USD",
            "exchange_usd_btc": "–û–±–º–µ–Ω—è—Ç—å USD –Ω–∞ BTC",
            "portfolio": "–ö—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª—å",
            "invest": "–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
            "convert": "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç",

            # === –°–ï–¢–ï–í–´–ï –ö–û–ú–ê–ù–î–´ ===
            "network": "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–µ—Ç–∏",
            "connect": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–∑–ª—É [–∞–¥—Ä–µ—Å]",
            "disconnect": "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —É–∑–ª–∞",
            "scan": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ç—å",
            "traceroute": "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ [–∞–¥—Ä–µ—Å]",

            # === –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –•–ê–ö–ò–ù–ì–ê ===
            "nmap": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ [—Ü–µ–ª—å] [—Ç–∏–ø]",
            "wireshark": "–ü–µ—Ä–µ—Ö–≤–∞—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ [–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å] [–≤—Ä–µ–º—è]",
            "metasploit": "–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª–æ–π—Ç–∞ [—Ü–µ–ª—å] [—ç–∫—Å–ø–ª–æ–π—Ç]",

            # === VPN –ò –ê–ù–û–ù–ò–ú–ù–û–°–¢–¨ ===
            "vpn": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN",
            "vpn_connect": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN [–Ω–æ–º–µ—Ä]",
            "vpn_disconnect": "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç VPN",

            # === –ë–û–¢–ù–ï–¢–´ –ò DDOS ===
            "botnet": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–Ω–µ—Ç–∞–º–∏",
            "buy_botnet": "–ö—É–ø–∏—Ç—å –±–æ—Ç–Ω–µ—Ç [–Ω–æ–º–µ—Ä]",
            "ddos": "–ó–∞–ø—É—Å—Ç–∏—Ç—å DDoS –∞—Ç–∞–∫—É [—Ü–µ–ª—å]",

            # === –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ò–°–°–ò–ò ===
            "mission_stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏—Å—Å–∏–π",
            "mission_statistics": "–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏—Å—Å–∏–π",
            "notifications": "–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "show_notifications": "–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∞–ª–∏–∞—Å)",
            "clear_notifications": "–û—á–∏—Å—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            "mission_history": "–ò—Å—Ç–æ—Ä–∏—è –º–∏—Å—Å–∏–π",
            "team_details": "–î–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥—ã",
            "moral_profile": "–ú–æ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
            "mission_choices": "–ò—Å—Ç–æ—Ä–∏—è –º–æ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤",
            "show_mission_choices": "–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã",

            # === –ü–û–ò–°–ö –ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
            "search": "–ü–æ–∏—Å–∫ –ø–æ –∏–≥—Ä–µ",
            "tips": "–°–æ–≤–µ—Ç—ã –Ω–æ–≤–∏—á–∫–∞–º",
            "about": "–û –∏–≥—Ä–µ",
            "commands": "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",

            # === –ù–ê–°–¢–†–û–ô–ö–ò ===
            "settings": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã",
            "audio": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–≤—É–∫–∞",
            "music": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É",
            "sound": "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫–∏",
            "theme": "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è",

            # === –°–ò–°–¢–ï–ú–ê ===
            "save": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–≥—Ä—É",
            "load": "–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É",
            "help": "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É",
            "exit": "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã",
            "quit": "–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã",
            "debug": "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏",
            "reset": "–°–±—Ä–æ—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞",

            # === –¢–ï–°–¢–û–í–´–ï –ò –û–¢–õ–ê–î–û–ß–ù–´–ï ===
            "test_event": "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ (–æ—Ç–ª–∞–¥–∫–∞)",
            "simulate_mission": "–°–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–∏—Å—Å–∏—é (–æ—Ç–ª–∞–¥–∫–∞)",

            # === –ê–õ–ò–ê–°–´ –ò –°–û–ö–†–ê–©–ï–ù–ò–Ø ===
            "ls": "–°—Ç–∞—Ç—É—Å (–∞–ª–∏–∞—Å)",
            "dir": "–°—Ç–∞—Ç—É—Å (–∞–ª–∏–∞—Å)",
            "cat": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∞–ª–∏–∞—Å)",
            "cd": "–ö–æ–Ω—Ç–µ–∫—Å—Ç (–∞–ª–∏–∞—Å)",
            "pwd": "–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç",
            "clear": "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
            "cls": "–û—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω",
            "man": "–°–ø—Ä–∞–≤–∫–∞ (–∞–ª–∏–∞—Å)",
            "sudo": "–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "ssh": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–∞–ª–∏–∞—Å)",
            "ping": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å (–∞–ª–∏–∞—Å)",
            "nc": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è (–∞–ª–∏–∞—Å)",
            "wget": "–°–∫–∞—á–∞—Ç—å",
            "curl": "API –∑–∞–ø—Ä–æ—Å"
        }

        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        self.context_commands = {
            "market": {
                "browse": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                "search": "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏",
                "wishlist": "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                "history": "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂",
                "compare": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                "reviews": "–û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö",
                "categories": "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                "special": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                "filter": "–§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã",
                "sort": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ü–µ–Ω–µ/—Ä–µ–π—Ç–∏–Ω–≥—É"
            },
            "crypto": {
                "rates": "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
                "chart": "–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω",
                "convert": "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏",
                "analyze": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä—ã–Ω–∫–∞",
                "alerts": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                "mining": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
                "portfolio": "–ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è",
                "buy": "–ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
                "sell": "–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É",
                "history": "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"
            },
            "forum": {
                "read": "–ß–∏—Ç–∞—Ç—å –ø–æ—Å—Ç –ø–æ ID",
                "reply": "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç",
                "create": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É",
                "subscribe": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã",
                "report": "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ",
                "bookmark": "–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏",
                "search": "–ü–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä—É–º—É",
                "latest": "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã",
                "hot": "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã",
                "private": "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            },
            "missions": {
                "filter": "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∏—Å—Å–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                "difficulty": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                "rewards": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –Ω–∞–≥—Ä–∞–¥—ã",
                "progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–π –º–∏—Å—Å–∏–∏",
                "abort": "–û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –º–∏—Å—Å–∏—é",
                "history": "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                "status": "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏—Å—Å–∏–∏",
                "team": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –º–∏—Å—Å–∏–∏",
                "choices": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –º–æ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤",
                "recruit": "–ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—É",
                "events": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –º–∏—Å—Å–∏–∏",
                "available": "–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏—Å—Å–∏–∏",
                "completed": "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏",
                "faction": "–§—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏"
            },
            "faction": {
                "reputation": "–†–µ–ø—É—Ç–∞—Ü–∏—è –≤–æ –≤—Å–µ—Ö —Ñ—Ä–∞–∫—Ü–∏—è—Ö",
                "missions": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
                "wars": "–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏",
                "defect": "–°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ (—Å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏)",
                "loyalty": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏",
                "status": "–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏",
                "info": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—Ä–∞–∫—Ü–∏–∏",
                "bonuses": "–§—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã",
                "members": "–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ñ—Ä–∞–∫—Ü–∏–∏"
            },
            "network": {
                "map": "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–µ—Ç–∏",
                "status": "–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                "history": "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                "scan": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É–∑–ª—ã",
                "trace": "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞",
                "tools": "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
                "vpn": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN",
                "proxy": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏",
                "logs": "–ñ—É—Ä–Ω–∞–ª —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            },
            "training": {
                "stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
                "recommendations": "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é",
                "help": "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–∏–Ω–∏-–∏–≥—Ä–∞–º",
                "history": "–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
                "skills": "–ê–Ω–∞–ª–∏–∑ –Ω–∞–≤—ã–∫–æ–≤",
                "difficulty": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                "rewards": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–≥—Ä–∞–¥–∞—Ö"
            }
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–∏—Å—Å–∏–π
        self.context_commands["missions"].update({
            "status": "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –º–∏—Å—Å–∏–∏",
            "abort": "–ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–∏—Å—Å–∏—é",
            "team": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π",
            "choices": "–ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤",
            "recruit": "–ù–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã",
            "events": "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –º–∏—Å—Å–∏–∏"
        })
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥
        self.command_history = []
        self.history_index = -1
        
        # –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.current_context = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º readline –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if HAS_READLINE:
            self._setup_readline()
        else:
            self._setup_fallback()
    
    def _setup_readline(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è readline –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
            readline.set_completer(self.complete)
            readline.parse_and_bind("tab: complete")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥
            readline.parse_and_bind("\\e[A: previous-history")  # –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
            readline.parse_and_bind("\\e[B: next-history")     # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
            readline.set_completer_delims(" \t\n`!@#$%^&*()=+[{]}\\|;:'\",<>?")
            
            print(f"{Colors.SUCCESS}‚úÖ –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ (TAB){Colors.RESET}")
            print(f"{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ ‚Üë‚Üì –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥{Colors.RESET}")
            
        except Exception as e:
            print(f"{Colors.WARNING}‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {e}{Colors.RESET}")
            self._setup_fallback()
    
    def _setup_fallback(self) -> None:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback —Ä–µ–∂–∏–º–∞ –±–µ–∑ readline"""
        print(f"{Colors.INFO}üìù –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥{Colors.RESET}")
        print(f"{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'commands' –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥{Colors.RESET}")
    
    def complete(self, text: str, state: int) -> Optional[str]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ readline –¥–æ—Å—Ç—É–ø–µ–Ω)"""
        if not HAS_READLINE:
            return None
            
        if state == 0:
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            try:
                line = readline.get_line_buffer()
                self.matches = self._get_matches(text, line)
            except:
                self.matches = []
        
        try:
            return self.matches[state]
        except IndexError:
            return None



    def _get_matches(self, text: str, line: str) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        # –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ —á–∞—Å—Ç–∏
        parts = line.split()
        
        if not parts or (len(parts) == 1 and not line.endswith(' ')):
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
            return self._complete_command(text)
        else:
            # –î–æ–ø–æ–ª–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            command = parts[0]
            return self._complete_arguments(command, text, parts[1:])

    def _complete_network_addresses(self, text: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç —Å–µ—Ç–µ–≤—ã–µ –∞–¥—Ä–µ—Å–∞"""
        sample_addresses = [
            "localhost", "127.0.0.1", "192.168.1.1", "10.0.0.1",
            "target.com", "bank.example.com", "secure.gov",
            "darkweb.onion", "anonymous.onion", "market.onion"
        ]
        return [addr for addr in sample_addresses if addr.startswith(text)]

    def _complete_command(self, text: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
        matches = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for cmd in self.base_commands.keys():
            if cmd.startswith(text.lower()):
                matches.append(cmd)
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if self.current_context and self.current_context in self.context_commands:
            for cmd in self.context_commands[self.current_context].keys():
                if cmd.startswith(text.lower()):
                    matches.append(cmd)
        
        return sorted(matches)

    def _complete_arguments(self, command: str, text: str, args: List[str]) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º"""
        matches = []

        # === –ú–ò–°–°–ò–ò ===
        if command in ["take", "mission_info", "abort"]:
            matches = self._complete_mission_ids(text)

        # === –ü–†–ï–î–ú–ï–¢–´ –ò –ü–û–ö–£–ü–ö–ò ===
        elif command in ["buy", "info", "item_info", "sell_item"]:
            matches = self._complete_item_ids(text)

        # === –ö–û–ù–¢–ê–ö–¢–´ –ò –°–û–û–ë–©–ï–ù–ò–Ø ===
        elif command in ["pm", "message", "private_message", "contact"]:
            matches = self._complete_contact_names(text)

        # === –§–†–ê–ö–¶–ò–ò ===
        elif command in ["join_faction", "change_faction", "defect_to"]:
            matches = self._complete_faction_names(text)

        # === –°–ï–¢–ï–í–´–ï –ö–û–ú–ê–ù–î–´ ===
        elif command in ["connect", "ssh", "traceroute", "ping"]:
            matches = self._complete_network_addresses(text)

        elif command in ["nmap"]:
            if len(args) == 0:
                matches = self._complete_network_addresses(text)
            elif len(args) == 1:
                matches = ["basic", "full", "stealth", "vuln"]

        elif command in ["wireshark"]:
            if len(args) == 0:
                matches = ["eth0", "wlan0", "lo", "any"]
            elif len(args) == 1:
                matches = ["10", "30", "60", "120"]

        elif command in ["metasploit"]:
            if len(args) == 0:
                matches = self._complete_network_addresses(text)
            elif len(args) == 1:
                matches = ["buffer_overflow", "sql_injection", "weak_password", "rce", "privilege_escalation"]

        # === VPN –ö–û–ú–ê–ù–î–´ ===
        elif command in ["vpn_connect"]:
            matches = ["1", "2", "3", "4", "5"]  # –ù–æ–º–µ—Ä–∞ VPN –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤

        elif command in ["buy_botnet"]:
            matches = ["1", "2", "3", "4"]  # –ù–æ–º–µ—Ä–∞ –±–æ—Ç–Ω–µ—Ç–æ–≤

        elif command in ["ddos"]:
            if len(args) == 0:
                matches = self._complete_network_addresses(text)
            elif len(args) == 1:
                matches = ["1", "2", "3", "4"]  # –ù–æ–º–µ—Ä–∞ –±–æ—Ç–Ω–µ—Ç–æ–≤

        # === –§–û–†–£–ú ===
        elif command in ["forum"]:
            if len(args) == 0:
                matches = ["public", "private", "read", "create", "search"]
            elif len(args) == 1 and args[0] in ["public", "private"]:
                matches = self._complete_post_ids(text, args[0])

        # === –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ===
        elif command in ["crypto", "convert"]:
            matches = ["buy", "sell", "convert", "portfolio", "rates", "analyze"]

        elif command in ["exchange_btc_usd", "exchange_usd_btc"]:
            if len(args) == 0:
                matches = ["10", "50", "100", "500", "1000", "all"]

        # === –†–´–ù–û–ö ===
        elif command in ["market"]:
            matches = ["browse", "search", "category", "wishlist", "compare", "special"]

        # === –ü–û–ò–°–ö ===
        elif command in ["search"]:
            matches = ["missions", "items", "contacts", "posts", "help", "commands"]

        # === –ù–ê–°–¢–†–û–ô–ö–ò ===
        elif command in ["theme"]:
            matches = self._complete_themes(text)

        elif command in ["settings"]:
            matches = ["audio", "display", "gameplay", "interface", "reset"]

        elif command in ["audio"]:
            matches = ["on", "off", "music", "sounds", "volume"]

        # === –¢–†–ï–ù–ò–†–û–í–ö–ò ===
        elif command in ["training", "train"]:
            matches = ["stats", "recommendations", "help"]

        # === –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ò–°–°–ò–ò ===
        elif command in ["abort_mission"]:
            matches = ["confirm", "cancel"]

        elif command in ["recruit", "recruit_team"]:
            if len(args) == 0:
                matches = ["hacker", "social_engineer", "lookout", "specialist", "all"]

        elif command in ["mission_status"]:
            matches = ["full", "brief", "team", "events", "timer"]

        elif command in ["faction"]:
            matches = ["missions", "status", "info", "reputation", "wars"]

        # === –ü–û–ú–û–©–¨ ===
        elif command in ["help", "man"]:
            # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è help <–∫–æ–º–∞–Ω–¥–∞>
            all_commands = list(self.base_commands.keys())
            matches = [cmd for cmd in all_commands if cmd.startswith(text.lower())]

        return [match for match in matches if match.startswith(text.lower())]
    
    def _complete_mission_ids(self, text: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç ID –º–∏—Å—Å–∏–π"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ –º–∏—Å—Å–∏–π
        sample_missions = [
            "port_scan", "info_gather", "web_vuln", "phishing_simple",
            "database_breach", "crypto_theft", "gov_hack", "zero_day"
        ]
        return [mid for mid in sample_missions if mid.startswith(text)]
    
    def _complete_item_ids(self, text: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç ID –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ –º–∞–≥–∞–∑–∏–Ω–∞
        sample_items = [
            "basic_port_scanner", "proxy_network", "phishing_kit",
            "pro_vuln_scanner", "gpu_cracker", "keylogger",
            "elite_proxy", "zero_day_info", "ai_cracker"
        ]
        return [iid for iid in sample_items if iid.startswith(text)]
    
    def _complete_contact_names(self, text: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç –∏–º–µ–Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        sample_contacts = ["shadow", "nexus", "ghost", "admin", "broker"]
        return [contact for contact in sample_contacts if contact.startswith(text)]
    
    def _complete_faction_names(self, text: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏–π"""
        factions = ["whitehats", "blackhats", "grayhats"]
        return [faction for faction in factions if faction.startswith(text)]
    
    def _complete_post_ids(self, text: str, section: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç ID –ø–æ—Å—Ç–æ–≤ —Ñ–æ—Ä—É–º–∞"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–∏—Å—Ç–µ–º–µ —Ñ–æ—Ä—É–º–∞
        if section == "public":
            return [str(i) for i in range(1, 11) if str(i).startswith(text)]
        else:  # private
            return [str(i) for i in range(1, 6) if str(i).startswith(text)]
    
    def _complete_themes(self, text: str) -> List[str]:
        """–î–æ–ø–æ–ª–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"""
        themes = ["classic_green", "matrix_green", "neon_cyber", "ice_blue", "custom"]
        return [theme for theme in themes if theme.startswith(text)]
    
    def add_to_history(self, command: str) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if command and (not self.command_history or command != self.command_history[-1]):
            self.command_history.append(command)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.command_history) > 100:
                self.command_history = self.command_history[-100:]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ readline history –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if HAS_READLINE:
                try:
                    readline.add_history(command)
                except:
                    pass
    
    def set_context(self, context: str) -> None:
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        self.current_context = context
        
        if context and context in self.context_commands:
            context_cmds = self.context_commands[context]
            print(f"\n{Colors.INFO}üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤ {context}:{Colors.RESET}")
            for cmd, desc in list(context_cmds.items())[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   {Colors.WARNING}{cmd}{Colors.RESET} - {desc}")
            if len(context_cmds) > 5:
                print(f"   {Colors.INFO}... –∏ –µ—â–µ {len(context_cmds) - 5} –∫–æ–º–∞–Ω–¥{Colors.RESET}")
                if HAS_READLINE:
                    print(f"   {Colors.INFO}(–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ TAB –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è){Colors.RESET}")
    
    def clear_context(self) -> None:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        self.current_context = None
    
    def get_command_help(self, command: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if command in self.base_commands:
            return self.base_commands[command]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for context_cmds in self.context_commands.values():
            if command in context_cmds:
                return context_cmds[command]
        
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

    def show_all_commands(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–ª–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏"""
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –°–ü–†–ê–í–û–ß–ù–ò–ö –ö–û–ú–ê–ù–î ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            "–û—Å–Ω–æ–≤–Ω—ã–µ": ["status", "forum", "missions", "market", "contacts", "crypto", "training"],
            "–î–µ–π—Å—Ç–≤–∏—è": ["take", "work", "buy", "sell", "pm", "info", "search"],
            "–§—Ä–∞–∫—Ü–∏–∏": ["faction", "join_faction", "change_faction", "faction_status"],
            "–í–∞–ª—é—Ç—ã": ["exchange_btc_usd", "exchange_usd_btc", "portfolio", "invest"],
            "–°–∏—Å—Ç–µ–º–∞": ["save", "load", "settings", "audio", "music", "sound", "theme"],
            "–°–ø—Ä–∞–≤–∫–∞": ["help", "commands", "tips", "about"],
            "–í—ã—Ö–æ–¥": ["exit", "quit"]
        }

        for category, commands in categories.items():
            print(f"\n{Colors.WARNING}üìÅ {category}:{Colors.RESET}")
            for cmd in commands:
                if cmd in self.base_commands:
                    desc = self.base_commands[cmd]
                    print(f"   {Colors.SUCCESS}{cmd:<20}{Colors.RESET} {desc}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - –ü–û–õ–ù–û–°–¢–¨–Æ
        print(f"\n{Colors.INFO}üéØ –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ö–û–ú–ê–ù–î–´ (–¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö):{Colors.RESET}")

        # –î–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_details = {
            "market": {
                "title": "–¢–µ–Ω–µ–≤–æ–π —Ä—ã–Ω–æ–∫",
                "commands": {
                    "browse": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                    "search": "–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏",
                    "wishlist": "–°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–µ–º—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
                    "history": "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂",
                    "compare": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                    "reviews": "–û—Ç–∑—ã–≤—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π –æ —Ç–æ–≤–∞—Ä–∞—Ö"
                }
            },
            "crypto": {
                "title": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞",
                "commands": {
                    "rates": "–¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
                    "chart": "–ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω",
                    "convert": "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –º–µ–∂–¥—É –≤–∞–ª—é—Ç–∞–º–∏",
                    "analyze": "–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä—ã–Ω–∫–∞",
                    "alerts": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                    "mining": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–π–Ω–∏–Ω–≥–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
                }
            },
            "forum": {
                "title": "–•–∞–∫–µ—Ä—Å–∫–∏–π —Ñ–æ—Ä—É–º",
                "commands": {
                    "read": "–ß–∏—Ç–∞—Ç—å –ø–æ—Å—Ç –ø–æ ID",
                    "reply": "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ—Å—Ç",
                    "create": "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É",
                    "subscribe": "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–º—ã",
                    "report": "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ",
                    "bookmark": "–î–æ–±–∞–≤–∏—Ç—å –≤ –ª–∏—á–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏"
                }
            },
            "missions": {
                "title": "–°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π",
                "commands": {
                    "filter": "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∏—Å—Å–∏–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
                    "difficulty": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é —Å–ª–æ–∂–Ω–æ—Å—Ç–∏",
                    "rewards": "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É –Ω–∞–≥—Ä–∞–¥—ã",
                    "progress": "–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–π –º–∏—Å—Å–∏–∏",
                    "abort": "–û—Ç–º–µ–Ω–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –º–∏—Å—Å–∏—é",
                    "history": "–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                    "status": "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏—Å—Å–∏–∏",
                    "team": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –¥–ª—è –º–∏—Å—Å–∏–∏",
                    "choices": "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –º–æ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤",
                    "recruit": "–ù–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–º–∞–Ω–¥—É",
                    "events": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –º–∏—Å—Å–∏–∏"
                }
            },
            "faction": {
                "title": "–§—Ä–∞–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
                "commands": {
                    "reputation": "–†–µ–ø—É—Ç–∞—Ü–∏—è –≤–æ –≤—Å–µ—Ö —Ñ—Ä–∞–∫—Ü–∏—è—Ö",
                    "missions": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è",
                    "wars": "–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –º–µ–∂–¥—É —Ñ—Ä–∞–∫—Ü–∏—è–º–∏",
                    "defect": "–°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ (—Å –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º–∏)",
                    "loyalty": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"
                }
            }
        }

        for context, details in context_details.items():
            title = details["title"]
            commands = details["commands"]

            print(f"\n   {Colors.WARNING}üîπ –í —Ä–∞–∑–¥–µ–ª–µ '{context}' ({title}):{Colors.RESET}")

            for cmd, desc in commands.items():
                print(f"      {Colors.INFO}{cmd:<15}{Colors.RESET} {desc}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\n{Colors.SUCCESS}üåü –ü–†–û–î–í–ò–ù–£–¢–´–ï –ö–û–ú–ê–ù–î–´:{Colors.RESET}")
        advanced_commands = {
            "mission_stats": "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏—Å—Å–∏–π",
            "notifications": "–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
            "mission_history": "–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –º–∏—Å—Å–∏–π",
            "team_details": "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥–µ",
            "moral_profile": "–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
            "abort_mission": "–ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –º–∏—Å—Å–∏—é —Å —à—Ç—Ä–∞—Ñ–∞–º–∏",
            "recruit_team": "–ù–∞–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π –º–∏—Å—Å–∏–∏"
        }

        for cmd, desc in advanced_commands.items():
            print(f"   {Colors.SUCCESS}{cmd:<20}{Colors.RESET} {desc}")

        # –°–µ—Ç–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        print(f"\n{Colors.WARNING}üåê –°–ï–¢–ï–í–´–ï –ö–û–ú–ê–ù–î–´:{Colors.RESET}")
        network_commands = {
            "network": "–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç—É —Å–µ—Ç–∏ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            "connect": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É —É–∑–ª—É [–∞–¥—Ä–µ—Å]",
            "disconnect": "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —É–∑–ª–∞",
            "scan": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
            "traceroute": "–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ —Ü–µ–ª–∏ [–∞–¥—Ä–µ—Å]",
            "nmap": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ [—Ü–µ–ª—å] [—Ç–∏–ø]",
            "wireshark": "–ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ [–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å] [–≤—Ä–µ–º—è]",
            "metasploit": "–ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–ª–æ–π—Ç–∞ [—Ü–µ–ª—å] [—ç–∫—Å–ø–ª–æ–π—Ç]",
            "vpn": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏",
            "vpn_connect": "–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ VPN [–Ω–æ–º–µ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞]",
            "vpn_disconnect": "–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ VPN",
            "botnet": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–Ω–µ—Ç–∞–º–∏ –¥–ª—è DDoS",
            "buy_botnet": "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–æ—Ç–Ω–µ—Ç [–Ω–æ–º–µ—Ä]",
            "ddos": "–ó–∞–ø—É—Å—Ç–∏—Ç—å DDoS –∞—Ç–∞–∫—É [—Ü–µ–ª—å] [–±–æ—Ç–Ω–µ—Ç]"
        }

        for cmd, desc in network_commands.items():
            print(f"   {Colors.WARNING}{cmd:<20}{Colors.RESET} {desc}")

        # –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        print(f"\n{Colors.INFO}üí° –°–û–í–ï–¢–´ –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:{Colors.RESET}")
        print(f"   ‚Ä¢ –ú–Ω–æ–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏–º–µ—é—Ç —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 's' –≤–º–µ—Å—Ç–æ 'status')")
        print(f"   ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö")
        print(f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–∫–æ–º–∞–Ω–¥–∞ help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ")
        print(f"   ‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É—é—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        print(f"   ‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –º–µ—Ä–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞")

        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

        if HAS_READLINE:
            print(f"{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TAB –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤{Colors.RESET}")
            print(f"{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚Üë‚Üì –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥{Colors.RESET}")
        else:
            print(f"{Colors.INFO}üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install pyreadline3{Colors.RESET}")

        print(f"{Colors.INFO}üí° –í–≤–µ–¥–∏—Ç–µ 'help [–∫–æ–º–∞–Ω–¥–∞]' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ{Colors.RESET}")
    
    def smart_suggestions(self, failed_command: str) -> List[str]:
        """–£–º–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"""
        suggestions = []
        
        # –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∫–æ–º–∞–Ω–¥ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
        def levenshtein_distance(s1: str, s2: str) -> int:
            if len(s1) < len(s2):
                return levenshtein_distance(s2, s1)
            
            if len(s2) == 0:
                return len(s1)
            
            previous_row = range(len(s2) + 1)
            for i, c1 in enumerate(s1):
                current_row = [i + 1]
                for j, c2 in enumerate(s2):
                    insertions = previous_row[j + 1] + 1
                    deletions = current_row[j] + 1
                    substitutions = previous_row[j] + (c1 != c2)
                    current_row.append(min(insertions, deletions, substitutions))
                previous_row = current_row
            
            return previous_row[-1]
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã
        all_commands = list(self.base_commands.keys())
        for context_cmds in self.context_commands.values():
            all_commands.extend(context_cmds.keys())
        
        for cmd in all_commands:
            distance = levenshtein_distance(failed_command.lower(), cmd.lower())
            if distance <= 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –æ—Ç–ª–∏—á–∏—è
                suggestions.append((cmd, distance))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        suggestions.sort(key=lambda x: x[1])
        return [cmd for cmd, _ in suggestions[:5]]

    def show_command_help(self, command: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ"""

        # –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        detailed_help = {
            "status": {
                "desc": "–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Ö–∞–∫–µ—Ä–µ",
                "usage": "status",
                "details": [
                    "‚Ä¢ –ù–∏–∫–Ω–µ–π–º –∏ —É—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
                    "‚Ä¢ –¢–µ–∫—É—â–∏–µ –Ω–∞–≤—ã–∫–∏ (cracking, stealth, scanning)",
                    "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (BTC, USD)",
                    "‚Ä¢ –ê–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å",
                    "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å Heat (–ø–æ–¥–æ–∑—Ä–µ–Ω–∏–π –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–æ–≤)",
                    "‚Ä¢ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
                ]
            },
            "missions": {
                "desc": "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —Ö–∞–∫–µ—Ä–æ–≤",
                "usage": "missions",
                "details": [
                    "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Å—Å–∏–π",
                    "‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞–≥—Ä–∞–¥–µ",
                    "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –Ω–∞–≤—ã–∫–∞–º",
                    "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
                    "‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–π –º–∏—Å—Å–∏–∏"
                ]
            },
            "market": {
                "desc": "–¢–µ–Ω–µ–≤–æ–π —Ä—ã–Ω–æ–∫ —Ö–∞–∫–µ—Ä—Å–∫–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤",
                "usage": "market",
                "details": [
                    "‚Ä¢ –ü–æ–∫—É–ø–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ü–û",
                    "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å–∫–∞–Ω–µ—Ä—ã, –∫—Ä–µ–∫–µ—Ä—ã, –ø—Ä–æ–∫—Å–∏)",
                    "‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ç–æ–≤–∞—Ä–æ–≤",
                    "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫",
                    "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"
                ]
            },
            "crypto": {
                "desc": "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è –æ—Ç–º—ã–≤–∞–Ω–∏—è –¥–µ–Ω–µ–≥",
                "usage": "crypto",
                "details": [
                    "‚Ä¢ –û–±–º–µ–Ω BTC ‚Üî USD –∏ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã",
                    "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—É—Ä—Å–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏",
                    "‚Ä¢ –ì—Ä–∞—Ñ–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω",
                    "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —Ä—ã–Ω–∫–∞",
                    "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
                ]
            },
            "training": {
                "desc": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π —Ü–µ–Ω—Ç—Ä –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤",
                "usage": "training",
                "details": [
                    "‚Ä¢ –ú–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏ –Ω–∞–≤—ã–∫–æ–≤",
                    "‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã –≤ –≤–∏–¥–µ BTC –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",
                    "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
                    "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
                    "‚Ä¢ –†–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
                ]
            },
            "forum": {
                "desc": "–ü–æ–¥–ø–æ–ª—å–Ω—ã–π —Ñ–æ—Ä—É–º —Ö–∞–∫–µ—Ä—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
                "usage": "forum",
                "details": [
                    "‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ —Ö–∞–∫–µ—Ä–∞–º–∏",
                    "‚Ä¢ –ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤",
                    "‚Ä¢ –û–±–º–µ–Ω –æ–ø—ã—Ç–æ–º –∏ —Å–æ–≤–µ—Ç–∞–º–∏",
                    "‚Ä¢ –ß–∞—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                    "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∏–∑ –º–∏—Ä–∞ –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
                ]
            },
            "network": {
                "desc": "–°–µ—Ç–µ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∫–∞—Ä—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π",
                "usage": "network",
                "details": [
                    "‚Ä¢ –ö–∞—Ä—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–∑–ª–æ–≤ —Å–µ—Ç–∏",
                    "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏",
                    "‚Ä¢ –°—Ç–∞—Ç—É—Å VPN –∏ –ø—Ä–æ–∫—Å–∏",
                    "‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏",
                    "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"
                ]
            },
            "take": {
                "desc": "–í–∑—è—Ç—å –º–∏—Å—Å–∏—é –ø–æ ID",
                "usage": "take <mission_id>",
                "details": [
                    "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ ID –º–∏—Å—Å–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞",
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–≤—ã–∫–∞–º",
                    "‚Ä¢ –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ",
                    "‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–∏—Å—Å–∏–∏ —Ç—Ä–µ–±—É—é—Ç –∫–æ–º–∞–Ω–¥—É"
                ],
                "examples": [
                    "take web_vuln_scan",
                    "take database_breach",
                    "take social_engineering"
                ]
            },
            "buy": {
                "desc": "–ö—É–ø–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç —Å —Ä—ã–Ω–∫–∞",
                "usage": "buy <item_id>",
                "details": [
                    "‚Ä¢ –£–∫–∞–∂–∏—Ç–µ ID –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",
                    "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥—Å—Ç–≤",
                    "‚Ä¢ –ü—Ä–µ–¥–º–µ—Ç—ã —É–ª—É—á—à–∞—é—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
                    "‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–æ–≤"
                ],
                "examples": [
                    "buy basic_port_scanner",
                    "buy proxy_network",
                    "buy elite_cracking_suite"
                ]
            },
            "nmap": {
                "desc": "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∏ —Å–ª—É–∂–±",
                "usage": "nmap <target> [scan_type]",
                "details": [
                    "‚Ä¢ target: IP –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω",
                    "‚Ä¢ scan_type: basic, full, stealth, vuln",
                    "‚Ä¢ –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞—é—Ç —Ä–∞–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                    "‚Ä¢ –ú–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å Heat Level"
                ],
                "examples": [
                    "nmap 192.168.1.1",
                    "nmap target.com stealth",
                    "nmap 10.0.0.5 vuln"
                ]
            },
            "vpn": {
                "desc": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ VPN –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏",
                "usage": "vpn [action]",
                "details": [
                    "‚Ä¢ –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ VPN",
                    "‚Ä¢ vpn_connect <id> - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
                    "‚Ä¢ vpn_disconnect - –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è",
                    "‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"
                ],
                "examples": [
                    "vpn",
                    "vpn_connect 1",
                    "vpn_disconnect"
                ]
            }
        }

        if command in detailed_help:
            info = detailed_help[command]

            print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –°–ü–†–ê–í–ö–ê: {command.upper()} ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
            print(f"\n{Colors.INFO}üìã –û–ü–ò–°–ê–ù–ò–ï:{Colors.RESET}")
            print(f"   {info['desc']}")

            print(f"\n{Colors.WARNING}üíª –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:{Colors.RESET}")
            print(f"   {Colors.SUCCESS}{info['usage']}{Colors.RESET}")

            if 'details' in info:
                print(f"\n{Colors.INFO}üìù –ü–û–î–†–û–ë–ù–û–°–¢–ò:{Colors.RESET}")
                for detail in info['details']:
                    print(f"   {detail}")

            if 'examples' in info:
                print(f"\n{Colors.SUCCESS}üí° –ü–†–ò–ú–ï–†–´:{Colors.RESET}")
                for example in info['examples']:
                    print(f"   {Colors.WARNING}{example}{Colors.RESET}")

            print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

        else:
            print(f"{Colors.ERROR}‚ùå –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ '{command}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.RESET}")
            print(f"{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'commands' –¥–ª—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥{Colors.RESET}")


    def _get_command_description(self, command: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if hasattr(self, 'base_commands') and command in self.base_commands:
            return self.base_commands[command]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if hasattr(self, 'context_commands'):
            for context_cmds in self.context_commands.values():
                if command in context_cmds:
                    return context_cmds[command]

        return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

    # ============================================================================
    # –§–ê–ô–õ: command_completion.py
    # –ö–õ–ê–°–°: CommandCompleter
    # –ú–ï–°–¢–û: –ü–æ—Å–ª–µ –º–µ—Ç–æ–¥–∞ show_command_suggestions() (–ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–æ–∫–∞ 300-350)
    # ============================================================================

    class CommandCompleter:

        def show_command_suggestions(self, failed_command: str) -> None:
            """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
            suggestions = self.smart_suggestions(failed_command)

            if suggestions:
                print(f"{Colors.WARNING}‚ùì –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:{Colors.RESET}")
                for i, suggestion in enumerate(suggestions, 1):
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
                    if hasattr(self, 'get_command_help'):
                        try:
                            desc = self.get_command_help(suggestion)
                        except:
                            desc = "–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä—ã"
                    else:
                        desc = "–ö–æ–º–∞–Ω–¥–∞ –∏–≥—Ä—ã"

                    print(f"   {i}. {Colors.SUCCESS}{suggestion}{Colors.RESET} - {desc}")
            else:
                print(f"{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'help' –∏–ª–∏ 'commands' –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥{Colors.RESET}")

        def smart_suggestions(self, failed_command: str) -> List[str]:
            """–£–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –ø–æ–ª–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é"""

            # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏–≥—Ä—ã (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
            all_game_commands = [
                # === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ===
                "status", "forum", "missions", "market", "contacts", "crypto",
                "training", "train", "faction", "chat",

                # === –î–ï–ô–°–¢–í–ò–Ø –° –ú–ò–°–°–ò–Ø–ú–ò ===
                "take", "work", "abort_mission", "mission_status", "team_status",
                "recruit", "recruit_team",

                # === –ü–û–ö–£–ü–ö–ò –ò –¢–û–†–ì–û–í–õ–Ø ===
                "buy", "sell", "info", "item_info",

                # === –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò ===
                "pm", "private_message", "message",

                # === –§–†–ê–ö–¶–ò–ò ===
                "join_faction", "change_faction", "faction_status", "defect",

                # === –í–ê–õ–Æ–¢–´ ===
                "exchange_btc_usd", "exchange_usd_btc", "portfolio", "invest", "convert",

                # === –°–ï–¢–ï–í–´–ï –ö–û–ú–ê–ù–î–´ ===
                "network", "connect", "disconnect", "scan", "traceroute",

                # === –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –•–ê–ö–ò–ù–ì–ê ===
                "nmap", "wireshark", "metasploit",

                # === VPN –ò –ê–ù–û–ù–ò–ú–ù–û–°–¢–¨ ===
                "vpn", "vpn_connect", "vpn_disconnect",

                # === –ë–û–¢–ù–ï–¢–´ ===
                "botnet", "buy_botnet", "ddos",

                # === –ü–†–û–î–í–ò–ù–£–¢–´–ï –ú–ò–°–°–ò–ò ===
                "mission_stats", "mission_statistics", "notifications",
                "show_notifications", "clear_notifications", "mission_history",
                "team_details", "moral_profile", "mission_choices",

                # === –ü–û–ò–°–ö –ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===
                "search", "tips", "about", "commands",

                # === –ù–ê–°–¢–†–û–ô–ö–ò ===
                "settings", "audio", "music", "sound", "theme",

                # === –°–ò–°–¢–ï–ú–ê ===
                "save", "load", "help", "exit", "quit", "debug", "reset",

                # === –ê–õ–ò–ê–°–´ ===
                "ls", "dir", "cat", "cd", "pwd", "clear", "cls", "man",
                "sudo", "ssh", "ping", "nc", "wget", "curl"
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            try:
                if hasattr(self, 'base_commands') and isinstance(self.base_commands, dict):
                    all_game_commands.extend(self.base_commands.keys())

                if hasattr(self, 'context_commands') and isinstance(self.context_commands, dict):
                    for context_dict in self.context_commands.values():
                        if isinstance(context_dict, dict):
                            all_game_commands.extend(context_dict.keys())
            except Exception:
                # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º
                pass

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            unique_commands = sorted(list(set(all_game_commands)))

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            failed_lower = failed_command.lower().strip()

            if not failed_lower:
                return []

            suggestions_with_priority = []

            # ========================================================================
            # –£–†–û–í–ï–ù–¨ 1: –¢–æ—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            # ========================================================================
            for cmd in unique_commands:
                if cmd.lower().startswith(failed_lower):
                    suggestions_with_priority.append((cmd, 0, len(cmd)))  # (–∫–æ–º–∞–Ω–¥–∞, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –¥–ª–∏–Ω–∞)

            # ========================================================================
            # –£–†–û–í–ï–ù–¨ 2: –°–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            # ========================================================================
            for cmd in unique_commands:
                if failed_lower in cmd.lower() and not any(s[0] == cmd for s in suggestions_with_priority):
                    # –ü–æ–∑–∏—Ü–∏—è –≤—Ö–æ–∂–¥–µ–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    position = cmd.lower().find(failed_lower)
                    suggestions_with_priority.append((cmd, 1 + position * 0.1, len(cmd)))

            # ========================================================================
            # –£–†–û–í–ï–ù–¨ 3: –ü–æ—Ö–æ–∂–∏–µ –∫–æ–º–∞–Ω–¥—ã (–∞–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è)
            # ========================================================================
            if len(suggestions_with_priority) < 3:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞–ª–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
                for cmd in unique_commands:
                    if not any(s[0] == cmd for s in suggestions_with_priority):
                        distance = self._calculate_similarity_score(failed_lower, cmd.lower())
                        if distance <= 3:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                            suggestions_with_priority.append((cmd, 2 + distance, len(cmd)))

            # ========================================================================
            # –£–†–û–í–ï–ù–¨ 4: –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
            # ========================================================================
            special_patterns = {
                'mi': ['missions', 'mission_status', 'mission_stats'],
                'st': ['status', 'stats'],
                'ma': ['market', 'man'],
                'cr': ['crypto', 'cracking'],
                'tr': ['training', 'train', 'traceroute'],
                'fo': ['forum'],
                'he': ['help'],
                'ex': ['exit', 'exchange_btc_usd', 'exchange_usd_btc'],
                'sa': ['save', 'scan'],
                'lo': ['load'],
                'ne': ['network', 'nmap'],
                'co': ['connect', 'commands', 'contacts'],
                'vp': ['vpn', 'vpn_connect'],
                'fa': ['faction', 'faction_status'],
                'bu': ['buy', 'buy_botnet'],
                'ta': ['take'],
                'wo': ['work'],
                'dd': ['ddos'],
                'ab': ['about', 'abort_mission']
            }

            for pattern, commands in special_patterns.items():
                if failed_lower.startswith(pattern):
                    for cmd in commands:
                        if cmd in unique_commands and not any(s[0] == cmd for s in suggestions_with_priority):
                            suggestions_with_priority.append((cmd, 0.5, len(cmd)))  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤

            # ========================================================================
            # –°–û–†–¢–ò–†–û–í–ö–ê –ò –í–û–ó–í–†–ê–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê
            # ========================================================================
            if not suggestions_with_priority:
                return []

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ), –∑–∞—Ç–µ–º –ø–æ –¥–ª–∏–Ω–µ (–∫–æ—Ä–æ—á–µ = –ª—É—á—à–µ)
            suggestions_with_priority.sort(key=lambda x: (x[1], x[2]))

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–µ—Ä–≤—ã–µ 5)
            seen = set()
            final_suggestions = []

            for cmd, _, _ in suggestions_with_priority:
                if cmd not in seen and len(final_suggestions) < 5:
                    seen.add(cmd)
                    final_suggestions.append(cmd)

            return final_suggestions

        def _calculate_similarity_score(self, s1: str, s2: str) -> float:
            """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
            if not s1 or not s2:
                return float('inf')

            # –ü—Ä–æ—Å—Ç–∞—è –º–µ—Ç—Ä–∏–∫–∞: —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–ª–∏–Ω–µ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            len_diff = abs(len(s1) - len(s2))

            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            common_chars = 0
            s1_chars = list(s1)
            s2_chars = list(s2)

            for char in s1_chars:
                if char in s2_chars:
                    common_chars += 1
                    s2_chars.remove(char)  # –£–±–∏—Ä–∞–µ–º —á—Ç–æ–±—ã –Ω–µ —Å—á–∏—Ç–∞—Ç—å –¥–≤–∞–∂–¥—ã

            # –ß–µ–º –±–æ–ª—å—à–µ –æ–±—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤, —Ç–µ–º –º–µ–Ω—å—à–µ "—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ"
            max_len = max(len(s1), len(s2))
            similarity = common_chars / max_len if max_len > 0 else 0

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ—Ö–æ–∂–µ—Å—Ç—å + —à—Ç—Ä–∞—Ñ –∑–∞ —Ä–∞–∑–Ω–∏—Ü—É –≤ –¥–ª–∏–Ω–µ
            return (1 - similarity) * 3 + len_diff * 0.5

        def _levenshtein_distance(self, s1: str, s2: str) -> int:
            """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏"""
            if len(s1) < len(s2):
                return self._levenshtein_distance(s2, s1)

            if len(s2) == 0:
                return len(s1)

            previous_row = range(len(s2) + 1)
            for i, c1 in enumerate(s1):
                current_row = [i + 1]
                for j, c2 in enumerate(s2):
                    insertions = previous_row[j + 1] + 1
                    deletions = current_row[j] + 1
                    substitutions = previous_row[j] + (c1 != c2)
                    current_row.append(min(insertions, deletions, substitutions))
                previous_row = current_row

            return previous_row[-1]
    
    def get_enhanced_input(self, prompt: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤–≤–æ–¥ —Å –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∏ –∏—Å—Ç–æ—Ä–∏–µ–π"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π input - readline –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            user_input = input(prompt).strip()
            
            if user_input:
                self.add_to_history(user_input)
            
            return user_input
            
        except (EOFError, KeyboardInterrupt):
            return "exit"
        except Exception as e:
            print(f"{Colors.ERROR}–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}{Colors.RESET}")
            return ""
    
    def show_context_help(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—É"""
        if not self.current_context:
            print(f"{Colors.INFO}–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é{Colors.RESET}")
            return
        
        if self.current_context not in self.context_commands:
            return
        
        commands = self.context_commands[self.current_context]
        context_names = {
            "market": "–¢–µ–Ω–µ–≤–æ–π —Ä—ã–Ω–æ–∫",
            "crypto": "–ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞", 
            "forum": "–§–æ—Ä—É–º",
            "missions": "–°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π",
            "faction": "–§—Ä–∞–∫—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é"
        }
        
        context_name = context_names.get(self.current_context, self.current_context)
        
        print(f"\n{Colors.INFO}üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_name}{Colors.RESET}")
        print(f"{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:{Colors.RESET}")
        
        for cmd, desc in commands.items():
            print(f"   {Colors.WARNING}{cmd:<15}{Colors.RESET} {desc}")
        
        if HAS_READLINE:
            print(f"\n{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ TAB –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è{Colors.RESET}")


class SmartPrompt:
    """–£–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    
    def __init__(self, completer: CommandCompleter):
        self.completer = completer
        self.prompt_styles = {
            "default": "{}@xss.is:~$ ",
            "faction": "{}@xss.is[{}]:~$ ",
            "context": "{}@xss.is/{}:~$ ",
            "danger": "{}@xss.is[!]:~$ "
        }
        self.current_style = "default"
    
    def get_dynamic_prompt(self, username: str, faction: str = None, 
                          context: str = None, heat_level: int = 0) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫—É—é –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
        # –í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if heat_level > 80:
            style = "danger"
            prompt = self.prompt_styles[style].format(username)
            return f"{Colors.DANGER}{prompt}{Colors.RESET}"
        
        elif context:
            style = "context" 
            prompt = self.prompt_styles[style].format(username, context)
            return f"{Colors.INFO}{prompt}{Colors.RESET}"
        
        elif faction:
            style = "faction"
            prompt = self.prompt_styles[style].format(username, faction[:3].upper())
            
            # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏
            faction_colors = {
                "whitehats": Colors.SUCCESS,
                "blackhats": Colors.DANGER,
                "grayhats": Colors.WARNING
            }
            color = faction_colors.get(faction, Colors.INFO)
            return f"{color}{prompt}{Colors.RESET}"
        
        else:
            prompt = self.prompt_styles["default"].format(username)
            return f"{Colors.PROMPT}{prompt}{Colors.RESET}"
    
    def process_input(self, user_input: str, game_context: dict) -> Tuple[str, List[str]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã"""
        if not user_input.strip():
            return "", []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if user_input.startswith("!"):
            # –ö–æ–º–∞–Ω–¥—ã –∏—Å—Ç–æ—Ä–∏–∏
            if user_input == "!!":
                # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
                if self.completer.command_history:
                    last_cmd = self.completer.command_history[-1]
                    print(f"{Colors.INFO}–ü–æ–≤—Ç–æ—Ä: {last_cmd}{Colors.RESET}")
                    return self.process_input(last_cmd, game_context)
            
            elif user_input.startswith("!"):
                try:
                    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
                    index = int(user_input[1:]) - 1
                    if 0 <= index < len(self.completer.command_history):
                        cmd = self.completer.command_history[index]
                        print(f"{Colors.INFO}–ò–∑ –∏—Å—Ç–æ—Ä–∏–∏: {cmd}{Colors.RESET}")
                        return self.process_input(cmd, game_context)
                except ValueError:
                    pass
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–ª–∏–∞—Å—ã –∫–æ–º–∞–Ω–¥
        aliases = {
            "ls": "status",
            "dir": "status", 
            "cat": "info",
            "cd": "context",
            "pwd": "context",
            "clear": "cls",
            "cls": "clear_screen",
            "man": "help",
            "sudo": "admin_mode",
            "ssh": "connect",
            "ping": "scan",
            "nmap": "scan",
            "nc": "connect",
            "wget": "download",
            "curl": "api_call"
        }
        
        parts = user_input.split()
        command = parts[0].lower()
        
        # –ó–∞–º–µ–Ω—è–µ–º –∞–ª–∏–∞—Å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        if command in aliases:
            command = aliases[command]
            parts[0] = command
        
        args = parts[1:] if len(parts) > 1 else []
        
        return command, args
    
    def show_command_preview(self, command: str, args: List[str]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º"""
        description = self.completer.get_command_help(command)
        
        if description != "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞":
            print(f"{Colors.INFO}üí≠ {description}{Colors.RESET}")

    def handle_unknown_command_simple(self, command: str) -> None:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        print(f"{Colors.ERROR}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: '{command}'{Colors.RESET}")

        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏
        common_commands = [
            "status", "missions", "market", "crypto", "training", "forum",
            "take", "buy", "work", "help", "commands", "save", "exit"
        ]

        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞—á–∞–ª—É
        suggestions = [cmd for cmd in common_commands if cmd.startswith(command.lower())]

        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—â–µ–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
        if not suggestions:
            suggestions = [cmd for cmd in common_commands if command.lower() in cmd]

        if suggestions:
            print(f"{Colors.WARNING}‚ùì –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:{Colors.RESET}")
            for i, suggestion in enumerate(suggestions[:3], 1):
                print(f"   {i}. {Colors.SUCCESS}{suggestion}{Colors.RESET}")

        print(f"{Colors.INFO}üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {Colors.SUCCESS}commands{Colors.RESET}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
command_completer = CommandCompleter()
smart_prompt = SmartPrompt(command_completer)
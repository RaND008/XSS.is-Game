"""
–°–∏—Å—Ç–µ–º–∞ –º–∏—Å—Å–∏–π –¥–ª—è XSS Game
"""

import random
import time
from typing import Dict, List, Optional, Tuple

from ui.colors import XSSColors as Colors
from ui.effects import typing_effect, show_ascii_art, progress_bar, pulse_text, animate_text, boxed_text
from core.game_state import game_state
from systems.audio import audio_system
from gameplay.minigames import minigame_hub
from config.game_data import MISSIONS


class MissionSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∏—Å—Å–∏—è–º–∏"""

    def __init__(self):
        self.missions = MISSIONS
        self.active_teams = {}  # –î–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –º–∏—Å—Å–∏–π
        self.mission_timers = {}  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        self.mission_events = {}  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –º–∏—Å—Å–∏–π

    def get_available_missions(self) -> Dict[str, dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Å—Å–∏–π"""
        available = {}
        player_stage = game_state.get_stat("story_stage", 0)
        player_faction = game_state.get_stat("faction")

        for mission_id, mission_data in self.missions.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—é–∂–µ—Ç–Ω—ã–π —ç—Ç–∞–ø
            if mission_data.get("story_stage", 0) > player_stage:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∫—Ü–∏—é
            req_faction = mission_data.get("req_faction")
            if req_faction and req_faction != player_faction:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ —É–∂–µ –º–∏—Å—Å–∏—è
            if game_state.is_mission_completed(mission_id):
                continue

            available[mission_id] = mission_data

        return available

    def check_requirements(self, mission_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∏—Å—Å–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        req_rep = mission_data.get("req_rep", 0)
        if game_state.get_stat("reputation", 0) < req_rep:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏
        req_skills = mission_data.get("req_skills", {})
        for skill, level in req_skills.items():
            if game_state.get_skill(skill) < level:
                return False

        return True

    def show_missions(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏—Å—Å–∏–∏"""
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –î–û–°–ö–ê –ó–ê–î–ê–ù–ò–ô ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏—Å—Å–∏–∏
        active_mission = game_state.get_stat("active_mission")
        if active_mission:
            self._show_active_mission(active_mission)
            return

        available_missions = self.get_available_missions()

        if not available_missions:
            print(f"\n{Colors.WARNING}üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∏—Å—Å–∏–π –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç{Colors.RESET}")
            print(f"\n{Colors.INFO}–ü–æ–≤—ã—Å—å—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏–ª–∏ –ø—Ä–æ–∫–∞—á–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π{Colors.RESET}")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∏—Å—Å–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        easy_missions = []
        medium_missions = []
        hard_missions = []
        elite_missions = []

        for m_id, m_data in available_missions.items():
            risk = m_data.get('risk', 0)
            if risk < 20:
                easy_missions.append((m_id, m_data))
            elif risk < 40:
                medium_missions.append((m_id, m_data))
            elif risk < 70:
                hard_missions.append((m_id, m_data))
            else:
                elite_missions.append((m_id, m_data))

        # –í—ã–≤–æ–¥–∏–º –º–∏—Å—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        if easy_missions:
            print(f"\n{Colors.SUCCESS}üü¢ –õ–ï–ì–ö–ò–ï –ó–ê–î–ê–ù–ò–Ø (–†–∏—Å–∫ < 20%){Colors.RESET}")
            for m_id, m_data in easy_missions:
                self._print_mission(m_id, m_data)

        if medium_missions:
            print(f"\n{Colors.WARNING}üü° –°–†–ï–î–ù–ò–ï –ó–ê–î–ê–ù–ò–Ø (–†–∏—Å–∫ 20-40%){Colors.RESET}")
            for m_id, m_data in medium_missions:
                self._print_mission(m_id, m_data)

        if hard_missions:
            print(f"\n{Colors.ERROR}üü† –°–õ–û–ñ–ù–´–ï –ó–ê–î–ê–ù–ò–Ø (–†–∏—Å–∫ 40-70%){Colors.RESET}")
            for m_id, m_data in hard_missions:
                self._print_mission(m_id, m_data)

        if elite_missions:
            print(f"\n{Colors.DANGER}üî¥ –≠–õ–ò–¢–ù–´–ï –ó–ê–î–ê–ù–ò–Ø (–†–∏—Å–∫ > 70%){Colors.RESET}")
            for m_id, m_data in elite_missions:
                self._print_mission(m_id, m_data)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–∏—Å—Å–∏—è—Ö
        for mission_id, mission_data in available_missions.items():
            mission_type = mission_data.get("type", "normal")

            if mission_type == "multi_stage":
                stages_count = len(mission_data.get("stages", []))
                print(f"   üîó –ú–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω–∞—è –º–∏—Å—Å–∏—è ({stages_count} —ç—Ç–∞–ø–æ–≤)")

            elif mission_type == "team_mission":
                team_size = mission_data.get("team_size", 1)
                print(f"   üë• –ö–æ–º–∞–Ω–¥–Ω–∞—è –º–∏—Å—Å–∏—è (–∫–æ–º–∞–Ω–¥–∞ –∏–∑ {team_size})")

            elif mission_type == "time_critical":
                time_limit = mission_data.get("time_limit", 24)
                print(f"   ‚è∞ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ({time_limit}—á)")

            elif mission_type == "moral_choice":
                print(f"   ü§î –°–æ–¥–µ—Ä–∂–∏—Ç –º–æ—Ä–∞–ª—å–Ω—ã–µ –¥–∏–ª–µ–º–º—ã")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
            if mission_id in self.mission_timers:
                start_time, time_limit = self.mission_timers[mission_id]
                elapsed = (time.time() - start_time) / 3600
                remaining = time_limit - elapsed
                print(f"   ‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {remaining:.1f}—á")

        print(f"\n{Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'take [ID –º–∏—Å—Å–∏–∏]' –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–¥–∞–Ω–∏—è{Colors.RESET}")
        print(f"{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    def _show_active_mission(self, mission_id: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –º–∏—Å—Å–∏—é"""
        if mission_id not in self.missions:
            print(f"{Colors.ERROR}–û—à–∏–±–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.RESET}")
            return

        mission = self.missions[mission_id]
        progress = game_state.get_stat("mission_progress", 0)
        duration = mission.get("duration", 1)

        print(f"\n{Colors.WARNING}‚ö° –ê–ö–¢–ò–í–ù–ê–Ø –ú–ò–°–°–ò–Ø ‚ö°{Colors.RESET}")
        print(f"\n   {Colors.WARNING}{mission['name']}{Colors.RESET}")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        bar = progress_bar(progress, duration, length=30)
        print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {bar} {progress}/{duration}")

        print(f"\n   {Colors.INFO}üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'work' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è{Colors.RESET}")
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    def _print_mission(self, mission_id: str, mission_data: dict) -> None:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∏—Å—Å–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        can_take = self.check_requirements(mission_data)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç–∞
        if can_take:
            status_icon = "‚úÖ"
            id_color = Colors.WARNING
        else:
            status_icon = "üîí"
            id_color = Colors.ERROR

        # –†–∏—Å–∫ —Å —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
        risk = mission_data.get('risk', 0)
        if risk < 30:
            risk_color = Colors.SUCCESS
        elif risk < 60:
            risk_color = Colors.WARNING
        else:
            risk_color = Colors.DANGER

        print(f"\n   {status_icon} ID: {id_color}{mission_id}{Colors.RESET}")
        print(f"   üìã {mission_data['name']}")
        print(f"   {Colors.INFO}{mission_data.get('desc', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}{Colors.RESET}")

        # –ù–∞–≥—Ä–∞–¥—ã
        btc_reward = mission_data.get('reward_btc', 0)
        rep_reward = mission_data.get('reward_rep', 0)
        print(f"   üí∞ –ù–∞–≥—Ä–∞–¥–∞: {Colors.MONEY}{btc_reward} BTC{Colors.RESET} + {Colors.REP}{rep_reward} REP{Colors.RESET}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"   ‚ö° –†–∏—Å–∫: {risk_color}{risk}%{Colors.RESET}")
        print(f"   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {Colors.INFO}{mission_data.get('duration', 0)} —Ö–æ–¥–æ–≤{Colors.RESET}")

        # Heat gain –µ—Å–ª–∏ –µ—Å—Ç—å
        heat_gain = mission_data.get('heat_gain', 0)
        if heat_gain > 0:
            heat_color = Colors.WARNING if heat_gain < 20 else Colors.DANGER
            print(f"   üî• Heat gain: {heat_color}+{heat_gain}%{Colors.RESET}")

        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
        if not can_take:
            print(f"   {Colors.ERROR}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:{Colors.RESET}")
            req_rep = mission_data.get('req_rep', 0)
            if req_rep > 0:
                current_rep = game_state.get_stat('reputation', 0)
                print(f"      ‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è: {Colors.ERROR}{req_rep}{Colors.RESET} (—É –≤–∞—Å: {current_rep})")

            req_skills = mission_data.get('req_skills', {})
            for skill, level in req_skills.items():
                skill_name = skill.replace('_', ' ').title()
                current_level = game_state.get_skill(skill)
                print(f"      ‚Ä¢ {skill_name}: {Colors.ERROR}{level}{Colors.RESET} (—É –≤–∞—Å: {current_level})")

        # –§—Ä–∞–∫—Ü–∏–æ–Ω–Ω–∞—è –º–∏—Å—Å–∏—è
        req_faction = mission_data.get('req_faction')
        if req_faction:
            print(f"   üèõÔ∏è –§—Ä–∞–∫—Ü–∏—è: {Colors.INFO}{req_faction}{Colors.RESET}")

    def take_mission(self, mission_id: str) -> bool:
        """–í–∑—è—Ç—å –º–∏—Å—Å–∏—é"""
        if game_state.get_stat("active_mission"):
            print(f"{Colors.ERROR}[–û–®–ò–ë–ö–ê] –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è{Colors.RESET}")
            return False

        if mission_id not in self.missions:
            print(f"{Colors.ERROR}[–û–®–ò–ë–ö–ê] –ú–∏—Å—Å–∏—è '{mission_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞{Colors.RESET}")
            return False

        available_missions = self.get_available_missions()
        if mission_id not in available_missions:
            print(f"{Colors.ERROR}[–û–®–ò–ë–ö–ê] –ú–∏—Å—Å–∏—è '{mission_id}' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞{Colors.RESET}")
            return False

        mission_data = self.missions[mission_id]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if not self.check_requirements(mission_data):
            print(f"{Colors.ERROR}[–û–®–ò–ë–ö–ê] –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –º–∏—Å—Å–∏–∏{Colors.RESET}")
            return False

        mission_type = mission_data.get("type", "normal")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –º–∏—Å—Å–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        if "time_limit" in mission_data:
            self.mission_timers[mission_id] = (time.time(), mission_data["time_limit"])
            print(
                f"{Colors.WARNING}‚è∞ –ú–∏—Å—Å–∏—è –∏–º–µ–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {mission_data['time_limit']} —á–∞—Å–æ–≤{Colors.RESET}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if mission_type in ["multi_stage", "team_mission", "moral_choice"]:
            game_state.set_stat("current_mission_stage", 0)

        # –ü—Ä–∏–Ω–∏–º–∞–µ–º –º–∏—Å—Å–∏—é
        print(f"\n{Colors.WARNING}[–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞...{Colors.RESET}")
        time.sleep(1)
        typing_effect(f"{Colors.INFO}[–ó–ê–ö–ê–ó–ß–ò–ö] {mission_data['desc']}", 0.03)
        time.sleep(0.5)

        game_state.set_stat("active_mission", mission_id)
        game_state.set_stat("mission_progress", 0)

        audio_system.play_sound("mission_start")
        show_ascii_art("hack")
        print(f"{Colors.SUCCESS}[–£–°–ü–ï–•] –ú–∏—Å—Å–∏—è '{mission_data['name']}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞{Colors.RESET}")
        print(f"{Colors.INFO}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'work' –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è{Colors.RESET}")

        return True

    def work_mission(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏ —Å –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏—Å—Å–∏–∏
        active_mission = game_state.get_stat("active_mission")
        if not active_mission:
            print(f"{Colors.ERROR}[–û–®–ò–ë–ö–ê] –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–∏—Å—Å–∏–∏{Colors.RESET}")
            return False

        if active_mission not in self.missions:
            print(f"{Colors.ERROR}[–û–®–ò–ë–ö–ê] –ê–∫—Ç–∏–≤–Ω–∞—è –º–∏—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö{Colors.RESET}")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if not self.check_mission_time_limit(active_mission):
            return False

        mission_data = self.missions[active_mission]
        mission_type = mission_data.get("type", "normal")

        if mission_type == "multi_stage":
            return self._work_multi_stage_mission(active_mission, mission_data)
        elif mission_type == "team_mission":
            return self._work_team_mission(active_mission, mission_data)
        elif mission_type == "time_critical":
            return self._work_time_critical_mission(active_mission, mission_data)
        elif mission_type == "moral_choice":
            return self._work_moral_choice_mission(active_mission, mission_data)

        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∏—Å—Å–∏–π
        progress = game_state.get_stat("mission_progress", 0)
        duration = mission_data.get("duration", 1)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ —É–∂–µ –º–∏—Å—Å–∏—è
        if progress >= duration:
            print(f"{Colors.WARNING}[!] –ú–∏—Å—Å–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.{Colors.RESET}")
            return False

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞ –º–∏—Å—Å–∏–∏
        base_cost = 5  # –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ BTC
        risk = mission_data.get("risk", 0)

        if risk >= 80:
            mission_cost = base_cost * 4  # 20 BTC –¥–ª—è –æ—á–µ–Ω—å –æ–ø–∞—Å–Ω—ã—Ö
        elif risk >= 60:
            mission_cost = base_cost * 3  # 15 BTC –¥–ª—è –æ–ø–∞—Å–Ω—ã—Ö
        elif risk >= 40:
            mission_cost = base_cost * 2  # 10 BTC –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
        else:
            mission_cost = base_cost  # 5 BTC –¥–ª—è –ª–µ–≥–∫–∏—Ö

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ —Ä–∞–±–æ—Ç—É
        if not game_state.can_afford(mission_cost, "btc_balance"):
            print(f"{Colors.ERROR}[–û–®–ò–ë–ö–ê] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –º–∏—Å—Å–∏–µ–π{Colors.RESET}")
            print(
                f"{Colors.INFO}–¢—Ä–µ–±—É–µ—Ç—Å—è: {mission_cost} BTC | –£ –≤–∞—Å: {game_state.get_stat('btc_balance', 0):.2f} BTC{Colors.RESET}")
            print(f"{Colors.WARNING}üí° –°–æ–≤–µ—Ç: –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –º–∏—Å—Å–∏–∏ –∏–ª–∏ –ø—Ä–æ–¥–∞–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É{Colors.RESET}")
            return False

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã
        game_state.spend_currency(mission_cost, "btc_balance")
        print(f"{Colors.MONEY}[-] –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {mission_cost} BTC –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ —Ä–µ—Å—É—Ä—Å—ã{Colors.RESET}")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
        work_messages = self._get_work_messages(mission_data)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã
        print(f"\n{Colors.INFO}[–†–ê–ë–û–¢–ê] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {mission_data['name']}{Colors.RESET}")
        print(f"{Colors.INFO}–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress + 1}/{duration}{Colors.RESET}")
        typing_effect(f"{Colors.WARNING}[–ü–†–û–¶–ï–°–°] {random.choice(work_messages)}{Colors.RESET}", 0.02)
        time.sleep(1)

        # –ú–∏–Ω–∏-–∏–≥—Ä–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö (—Å–µ—Ä–µ–¥–∏–Ω–∞ –∏ –∫–æ–Ω–µ—Ü –º–∏—Å—Å–∏–∏)
        minigame_success = True
        if progress == duration // 2 or progress == duration - 1:
            print(f"\n{Colors.DANGER}‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢ –ú–ò–°–°–ò–ò!{Colors.RESET}")
            minigame_success = self._run_mission_minigame(mission_data)

        # –†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ –ø—Ä–æ–≤–∞–ª–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∏–Ω–∏-–∏–≥—Ä—ã
        fail_chance = self._calculate_fail_chance(mission_data, minigame_success)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ—Å—Ç—å
        print(f"\n{Colors.INFO}–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...{Colors.RESET}")
        time.sleep(1)

        # –ë—Ä–æ—Å–æ–∫ –Ω–∞ —É—Å–ø–µ—Ö/–ø—Ä–æ–≤–∞–ª
        roll = random.randint(1, 100)

        if roll <= fail_chance:
            # –ü—Ä–æ–≤–∞–ª –º–∏—Å—Å–∏–∏
            print(f"{Colors.ERROR}[!] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!{Colors.RESET}")
            return self._handle_mission_failure(mission_data)
        else:
            # –£—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
            print(f"{Colors.SUCCESS}[‚úì] –≠—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!{Colors.RESET}")
            return self._handle_mission_progress(mission_data)

    def _get_work_messages(self, mission_data: dict) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ –º–∏—Å—Å–∏–µ–π"""
        mission_type = self._determine_mission_type(mission_data)

        work_messages = {
            "scanning": [
                "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ —Ü–µ–ª–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...",
                "–ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏–∏...",
                "–ü–æ–∏—Å–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...",
                "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π –ü–û..."
            ],
            "cracking": [
                "–ü–æ–¥–±–æ—Ä –ø–∞—Ä–æ–ª–µ–π –∫ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º...",
                "–≠–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π...",
                "–û–±—Ö–æ–¥ —Å–∏—Å—Ç–µ–º –∑–∞—â–∏—Ç—ã...",
                "–í–Ω–µ–¥—Ä–µ–Ω–∏–µ –±—ç–∫–¥–æ—Ä–∞..."
            ],
            "stealth": [
                "–ú–∞—Å–∫–∏—Ä–æ–≤–∫–∞ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...",
                "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤...",
                "–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∂–Ω—ã—Ö —Å–ª–µ–¥–æ–≤...",
                "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ..."
            ],
            "social_eng": [
                "–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—à–∏–Ω–≥–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞...",
                "–ò–∑—É—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏...",
                "–°–æ–∑–¥–∞–Ω–∏–µ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–π –ª–µ–≥–µ–Ω–¥—ã...",
                "–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–º–∞–Ω–∫–∏..."
            ]
        }

        return work_messages.get(mission_type, work_messages["scanning"])

    def _determine_mission_type(self, mission_data: dict) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –º–∏—Å—Å–∏–∏ –ø–æ —Ç—Ä–µ–±—É–µ–º—ã–º –Ω–∞–≤—ã–∫–∞–º"""
        req_skills = mission_data.get("req_skills", {})
        if not req_skills:
            return "scanning"

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–≤—ã–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ–º
        return max(req_skills.keys(), key=lambda k: req_skills[k])

    def _run_mission_minigame(self, mission_data: dict) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏-–∏–≥—Ä—É –≤–æ –≤—Ä–µ–º—è –º–∏—Å—Å–∏–∏"""
        print(f"\n{Colors.DANGER}‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û!{Colors.RESET}")
        time.sleep(1)

        mission_type = self._determine_mission_type(mission_data)
        mission_name = mission_data.get("name", "").lower()

        # –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∏–Ω–∏-–∏–≥—Ä—É
        if "database" in mission_name or "crypto" in mission_name:
            game_id, game = minigame_hub.games["password_crack"], minigame_hub.games["password_crack"]
        elif "phishing" in mission_name or "social" in mission_name:
            game_id, game = minigame_hub.games["memory_sequence"], minigame_hub.games["memory_sequence"]
        elif "network" in mission_name or "—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ" in mission_name:
            game_id, game = minigame_hub.games["network_trace"], minigame_hub.games["network_trace"]
        elif "web" in mission_name or "sql" in mission_name:
            game_id, game = minigame_hub.games["sql_injection"], minigame_hub.games["sql_injection"]
        else:
            # –°–ª—É—á–∞–π–Ω–∞—è –º–∏–Ω–∏-–∏–≥—Ä–∞
            game_id, game = minigame_hub.get_random_minigame()

        return game.play()

    def _calculate_fail_chance(self, mission_data: dict, minigame_success: bool) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞ –º–∏—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        # –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–∏—Å—Å–∏–∏
        base_fail_chance = mission_data.get("risk", 50)

        # –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞:

        # 1. –ù–∞–≤—ã–∫–∏ –∏–≥—Ä–æ–∫–∞ (—Å–Ω–∏–∂–∞—é—Ç —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞)
        skill_reduction = 0
        req_skills = mission_data.get("req_skills", {})

        for skill, required_level in req_skills.items():
            player_skill = game_state.get_skill(skill)
            # –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if player_skill > required_level:
                skill_reduction += (player_skill - required_level) * 3
            # –®—Ç—Ä–∞—Ñ –∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞–≤—ã–∫–∞ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            elif player_skill < required_level:
                skill_reduction -= (required_level - player_skill) * 5

        # –û–±—â–∏–π –±–æ–Ω—É—Å –æ—Ç –≤—Å–µ—Ö –Ω–∞–≤—ã–∫–æ–≤
        total_skills = sum(game_state.get_skill(s) for s in ["scanning", "cracking", "stealth", "social_eng"])
        skill_reduction += total_skills  # 1% –∑–∞ –∫–∞–∂–¥—ã–π —É—Ä–æ–≤–µ–Ω—å –Ω–∞–≤—ã–∫–∞

        # 2. –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ (—Å–Ω–∏–∂–∞–µ—Ç —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞)
        equipment_bonus = 0
        inventory = game_state.get_stat("inventory", [])

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–∏—Å—Å–∏–π
        mission_type = self._determine_mission_type(mission_data)

        helpful_items = {
            "scanning": ["basic_port_scanner", "advanced_scanner", "pro_vuln_scanner"],
            "cracking": ["password_list", "ai_password_cracker", "quantum_decryptor"],
            "stealth": ["simple_proxy", "proxy_network", "elite_proxy"],
            "social_eng": ["fake_id_generator", "phishing_kit", "fake_documents"]
        }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        for item in inventory:
            for skill_type, items_list in helpful_items.items():
                if item in items_list:
                    equipment_bonus += 5  # 5% –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–ª–µ–∑–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç

        # 3. –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–Ω–∏-–∏–≥—Ä—ã (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω)
        minigame_penalty = 0
        if not minigame_success:
            minigame_penalty = 30  # +30% –∫ —à–∞–Ω—Å—É –ø—Ä–æ–≤–∞–ª–∞ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ –º–∏–Ω–∏-–∏–≥—Ä—ã
        else:
            minigame_penalty = -10  # -10% –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –º–∏–Ω–∏-–∏–≥—Ä—ã

        # 4. Heat Level (—É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞)
        heat_level = game_state.get_stat("heat_level", 0)
        heat_penalty = 0

        if heat_level > 80:
            heat_penalty = 25  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–æ–∑—ã—Å–∫–∞
        elif heat_level > 60:
            heat_penalty = 15
        elif heat_level > 40:
            heat_penalty = 10
        elif heat_level > 20:
            heat_penalty = 5

        # 5. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        warnings = game_state.get_stat("warnings", 0)
        warning_penalty = warnings * 10  # +10% –∑–∞ –∫–∞–∂–¥–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

        # 6. –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–∏–≥—Ä–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Å–ª–æ–∂–Ω–µ–µ)
        completed_missions = len(game_state.get_stat("completed_missions", []))
        progression_penalty = 0

        if completed_missions > 30:
            progression_penalty = 20
        elif completed_missions > 20:
            progression_penalty = 15
        elif completed_missions > 10:
            progression_penalty = 10
        elif completed_missions > 5:
            progression_penalty = 5

        # 7. –§—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã–µ –±–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã
        faction_modifier = 0
        player_faction = game_state.get_stat("faction")

        if player_faction:
            # WhiteHats –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å –Ω–∞ –ª–µ–≥–∞–ª—å–Ω—ã—Ö –º–∏—Å—Å–∏—è—Ö
            if player_faction == "whitehats" and mission_data.get("heat_gain", 0) < 10:
                faction_modifier = -10
            # BlackHats –ª—É—á—à–µ –≤ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—ã—Ö –º–∏—Å—Å–∏—è—Ö
            elif player_faction == "blackhats" and mission_data.get("heat_gain", 0) > 20:
                faction_modifier = -10
            # GrayHats —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã
            elif player_faction == "grayhats":
                faction_modifier = -5

        # 8. VPN –±–æ–Ω—É—Å —á–µ—Ä–µ–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        vpn_bonus = 0
        vpn_items = ["vpn_subscription", "elite_proxy", "proxy_network"]
        for item in inventory:
            if item in vpn_items:
                vpn_bonus -= 10  # -10% –∑–∞ –∫–∞–∂–¥—ã–π VPN/–ø—Ä–æ–∫—Å–∏ –ø—Ä–µ–¥–º–µ—Ç
                break  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω

        # 9. –í—Ä–µ–º—è —Å—É—Ç–æ–∫ (—Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä –¥–ª—è —Ä–µ–∞–ª–∏–∑–º–∞)
        time_modifier = random.randint(-5, 5)

        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç
        final_fail_chance = (
                base_fail_chance
                - skill_reduction
                - equipment_bonus
                + minigame_penalty
                + heat_penalty
                + warning_penalty
                + progression_penalty
                + faction_modifier
                + vpn_bonus
                + time_modifier
        )

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 5% –¥–æ 95%
        final_fail_chance = max(5, min(95, final_fail_chance))

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–∏—Å—Å–∏–π
        if base_fail_chance >= 70:
            print(f"\n{Colors.INFO}üìä –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤:{Colors.RESET}")
            print(f"   –ë–∞–∑–æ–≤—ã–π —Ä–∏—Å–∫: {base_fail_chance}%")
            print(f"   –ë–æ–Ω—É—Å –Ω–∞–≤—ã–∫–æ–≤: -{skill_reduction}%")
            print(f"   –ë–æ–Ω—É—Å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è: -{equipment_bonus}%")
            if minigame_penalty != 0:
                print(f"   –ú–∏–Ω–∏-–∏–≥—Ä–∞: {minigame_penalty:+}%")
            if heat_penalty > 0:
                print(f"   Heat Level: +{heat_penalty}%")
            print(f"   {Colors.WARNING}–ò—Ç–æ–≥–æ–≤—ã–π —Ä–∏—Å–∫: {final_fail_chance}%{Colors.RESET}")

        return final_fail_chance

    def _handle_mission_failure(self, mission_data: dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–∞–ª –º–∏—Å—Å–∏–∏"""
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–≤–∞–ª
        heat_gain = mission_data.get("heat_gain", 10)
        heat_gain = int(heat_gain * 1.5)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 50%

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        current_heat = game_state.get_stat("heat_level", 0)
        if current_heat > 50:
            heat_gain = int(heat_gain * 1.2)  # –ï—â–µ +20% –µ—Å–ª–∏ —É–∂–µ –≤—ã—Å–æ–∫–∏–π heat

        audio_system.play_sound("fail")
        audio_system.play_sound("alert")

        show_ascii_art("warning")
        print(f"{Colors.ERROR}[–ü–†–û–í–ê–õ] –ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞! –í–∞—Å –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏!{Colors.RESET}")

        # –ù–∞–∫–∞–∑–∞–Ω–∏—è
        warnings = game_state.modify_stat("warnings", 1)
        new_heat = game_state.modify_stat("heat_level", heat_gain)

        rep_penalty = random.randint(5, 15)
        game_state.modify_stat("reputation", -rep_penalty)

        print(f"{Colors.WARNING}[-] –†–µ–ø—É—Ç–∞—Ü–∏—è -{rep_penalty}{Colors.RESET}")
        print(f"{Colors.DANGER}[!] Heat Level: {new_heat}%{Colors.RESET}")
        print(f"{Colors.ERROR}[!] –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warnings}/3{Colors.RESET}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏—Å—Å–∏—é
        game_state.set_stat("active_mission", None)
        game_state.set_stat("mission_progress", 0)

        return False

    def _handle_mission_progress(self, mission_data: dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–∏"""
        progress = game_state.modify_stat("mission_progress", 1)
        duration = mission_data.get("duration", 1)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        bar = progress_bar(progress, duration, length=30)
        print(f"{Colors.SUCCESS}[–ü–†–û–ì–†–ï–°–°] {bar} {progress}/{duration}{Colors.RESET}")

        if progress >= duration:
            return self._complete_mission(mission_data)

        return True

    def _complete_mission(self, mission_data: dict) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–∏—Å—Å–∏—é"""
        mission_id = game_state.get_stat("active_mission")

        audio_system.play_sound("mission_complete")
        audio_system.play_sound("coin")

        show_ascii_art("hack")
        print(f"\n{Colors.SUCCESS}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Colors.RESET}")
        print(f"{Colors.SUCCESS}‚ïë {mission_data['name']:^54} ‚ïë{Colors.RESET}")
        print(f"{Colors.SUCCESS}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.RESET}")

        # –ù–∞–≥—Ä–∞–¥—ã
        btc_reward = mission_data.get("reward_btc", 0)
        rep_reward = mission_data.get("reward_rep", 0)

        game_state.earn_currency(btc_reward, "btc_balance")
        game_state.modify_stat("reputation", rep_reward)

        print(f"{Colors.MONEY}[+] {btc_reward} BTC{Colors.RESET}")
        print(f"{Colors.REP}[+] {rep_reward} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏{Colors.RESET}")

        # –ù–∞–≤—ã–∫–∏
        reward_skills = mission_data.get("reward_skills", {})
        if reward_skills:
            audio_system.play_sound("skill_up")
            for skill, points in reward_skills.items():
                if skill == "all":
                    for s in ["scanning", "cracking", "stealth", "social_eng"]:
                        current = game_state.get_skill(s)
                        if current >= 8:
                            points = max(1, points // 2)  # –ü–æ–ª–æ–≤–∏–Ω–∞ –æ—á–∫–æ–≤ –Ω–∞ 8+
                        elif current >= 6:
                            points = max(1, int(points * 0.75))  # -25% –Ω–∞ 6+
                        game_state.modify_skill(s, points)
                    print(f"{Colors.SKILL}[+] –í—Å–µ –Ω–∞–≤—ã–∫–∏ +{points}{Colors.RESET}")
                elif skill in ["scanning", "cracking", "stealth", "social_eng"]:
                    old_level = game_state.get_skill(skill)
                    new_level = game_state.modify_skill(skill, points)
                    print(f"{Colors.SKILL}[+] {skill} +{points} ({old_level} ‚Üí {new_level}){Colors.RESET}")

        # Heat level
        heat_gain = mission_data.get("heat_gain", 0)
        if heat_gain > 0:
            new_heat = game_state.modify_stat("heat_level", heat_gain)
            heat_color = Colors.WARNING if new_heat < 50 else Colors.DANGER
            print(f"{heat_color}[!] Heat Level: {new_heat}%{Colors.RESET}")

        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        game_state.complete_mission(mission_id)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –º–∏—Å—Å–∏—é
        game_state.set_stat("active_mission", None)
        game_state.set_stat("mission_progress", 0)

        return True

    def get_mission_info(self, mission_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏—Å—Å–∏–∏"""
        return self.missions.get(mission_id)

    def is_mission_available(self, mission_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–∏—Å—Å–∏–∏"""
        available_missions = self.get_available_missions()
        return mission_id in available_missions

    def check_mission_time_limit(self, mission_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–∏—Å—Å–∏–∏"""
        if mission_id not in self.mission_timers:
            return True

        start_time, time_limit = self.mission_timers[mission_id]
        elapsed = (time.time() - start_time) / 3600  # –≤ —á–∞—Å–∞—Ö

        if elapsed > time_limit:
            self._handle_mission_timeout(mission_id)
            return False

        return True

    def _handle_mission_timeout(self, mission_id: str) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –º–∏—Å—Å–∏–∏"""
        mission_data = self.missions.get(mission_id, {})

        print(f"\n{Colors.ERROR}‚è∞ –í–†–ï–ú–Ø –ò–°–¢–ï–ö–õ–û!{Colors.RESET}")
        print(f"–ú–∏—Å—Å–∏—è '{mission_data.get('name', mission_id)}' –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")

        # –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ—Å—Ä–æ—á–∫—É
        rep_penalty = random.randint(10, 25)
        heat_gain = random.randint(15, 30)

        game_state.modify_stat("reputation", -rep_penalty)
        game_state.modify_stat("heat_level", heat_gain)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–∏—Å—Å–∏—é
        game_state.set_stat("active_mission", None)
        game_state.set_stat("mission_progress", 0)

        if mission_id in self.mission_timers:
            del self.mission_timers[mission_id]

    def _work_multi_stage_mission(self, mission_id: str, mission_data: dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã—Ö –º–∏—Å—Å–∏–π"""
        current_stage = game_state.get_stat("current_mission_stage", 0)
        stages = mission_data.get("stages", [])

        if current_stage >= len(stages):
            return self._complete_multi_stage_mission(mission_id, mission_data)

        stage_data = stages[current_stage]

        print(f"\n{Colors.WARNING}üìã –≠–¢–ê–ü {current_stage + 1}/{len(stages)}: {stage_data['name']}{Colors.RESET}")
        print(f"{Colors.INFO}{stage_data['desc']}{Colors.RESET}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞
        if not self._check_stage_requirements(stage_data):
            return False

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
        self._check_random_events(mission_id, f"stage_{current_stage}")

        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø
        success = self._execute_mission_stage(stage_data)

        if success:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã —ç—Ç–∞–ø–∞
            self._apply_stage_rewards(stage_data)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
            game_state.set_stat("current_mission_stage", current_stage + 1)

            print(f"{Colors.SUCCESS}‚úÖ –≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!{Colors.RESET}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ—Ä–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã
            if "moral_choice" in stage_data:
                self._handle_moral_choice(stage_data["moral_choice"])

            return True
        else:
            return self._handle_mission_failure(mission_data)

    def _work_team_mission(self, mission_id: str, mission_data: dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –º–∏—Å—Å–∏–π"""
        if mission_id not in self.active_teams:
            return self._recruit_team(mission_id, mission_data)

        team = self.active_teams[mission_id]
        current_stage = game_state.get_stat("current_mission_stage", 0)
        stages = mission_data.get("stages", [])

        if current_stage >= len(stages):
            return self._complete_team_mission(mission_id, mission_data)

        stage_data = stages[current_stage]

        print(f"\n{Colors.WARNING}üë• –ö–û–ú–ê–ù–î–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø - –≠–¢–ê–ü {current_stage + 1}{Colors.RESET}")
        print(f"{Colors.INFO}{stage_data['desc']}{Colors.RESET}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        self._show_team_status(team)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        success = self._execute_team_action(stage_data, team)

        if success:
            game_state.set_stat("current_mission_stage", current_stage + 1)
            return True
        else:
            return self._handle_team_mission_failure(mission_data, team)

    def _work_time_critical_mission(self, mission_id: str, mission_data: dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏—Å—Å–∏–π —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
        start_time, time_limit = self.mission_timers.get(mission_id, (time.time(), 24))
        elapsed = (time.time() - start_time) / 3600
        remaining = time_limit - elapsed

        print(f"\n{Colors.DANGER}‚è±Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–†–ï–ú–Ø: {remaining:.1f} —á–∞—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å{Colors.RESET}")

        if remaining <= 1:
            print(f"{Colors.ERROR}üö® –ü–û–°–õ–ï–î–ù–ò–ô –ß–ê–°! –û–ø–µ—Ä–∞—Ü–∏—è –ø–æ–¥ —É–≥—Ä–æ–∑–æ–π!{Colors.RESET}")

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏
        time_pressure_multiplier = mission_data.get("time_pressure_multiplier", 1.0)
        if remaining < time_limit * 0.3:  # –ú–µ–Ω—å—à–µ 30% –≤—Ä–µ–º–µ–Ω–∏
            time_pressure_multiplier *= 1.5

        return self._work_multi_stage_mission(mission_id, mission_data)

    def _work_moral_choice_mission(self, mission_id: str, mission_data: dict) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏—Å—Å–∏–π —Å –º–æ—Ä–∞–ª—å–Ω—ã–º–∏ –≤—ã–±–æ—Ä–∞–º–∏"""
        current_stage = game_state.get_stat("current_mission_stage", 0)
        stages = mission_data.get("stages", [])

        stage_data = stages[current_stage]

        if "moral_choice" in stage_data:
            print(f"\n{Colors.STORY}ü§î –ú–û–†–ê–õ–¨–ù–ê–Ø –î–ò–õ–ï–ú–ú–ê{Colors.RESET}")
            return self._handle_moral_choice(stage_data["moral_choice"])
        else:
            return self._work_multi_stage_mission(mission_id, mission_data)

    def _handle_moral_choice(self, choice_data: dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–æ—Ä–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä"""
        print(f"\n{Colors.STORY}{choice_data['question']}{Colors.RESET}")

        choices = choice_data["choices"]
        choice_list = list(choices.items())

        print(f"\n{Colors.INFO}–í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã:{Colors.RESET}")
        for i, (choice_id, choice_info) in enumerate(choice_list, 1):
            print(f"   {i}. {choice_info['desc']}")

        while True:
            try:
                user_choice = int(input(f"\n{Colors.PROMPT}–í–∞—à –≤—ã–±–æ—Ä (1-{len(choices)}): {Colors.RESET}"))
                if 1 <= user_choice <= len(choices):
                    break
            except ValueError:
                pass
            print(f"{Colors.ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.RESET}")

        choice_id, choice_result = choice_list[user_choice - 1]

        print(f"\n{Colors.WARNING}–í—ã –≤—ã–±—Ä–∞–ª–∏: {choice_result['desc']}{Colors.RESET}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –≤—ã–±–æ—Ä–∞
        self._apply_moral_choice_consequences(choice_result)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
        choices_made = game_state.get_stat("moral_choices_made", {})
        choices_made[f"mission_{game_state.get_stat('active_mission')}"] = choice_id
        game_state.set_stat("moral_choices_made", choices_made)

        return not choice_result.get("mission_failure", False)

    def _apply_moral_choice_consequences(self, choice_result: dict) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        if "rep_change" in choice_result:
            rep_change = choice_result["rep_change"]
            game_state.modify_stat("reputation", rep_change)
            if rep_change > 0:
                print(f"{Colors.SUCCESS}[+] –†–µ–ø—É—Ç–∞—Ü–∏—è +{rep_change}{Colors.RESET}")
            elif rep_change < 0:
                print(f"{Colors.ERROR}[-] –†–µ–ø—É—Ç–∞—Ü–∏—è {rep_change}{Colors.RESET}")

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—Ä–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
        if "faction_impact" in choice_result:
            for faction, impact in choice_result["faction_impact"].items():
                print(f"{Colors.INFO}[–§—Ä–∞–∫—Ü–∏—è {faction}]: {'+' if impact > 0 else ''}{impact}{Colors.RESET}")

        # –ë–æ–Ω—É—Å—ã/—à—Ç—Ä–∞—Ñ—ã –∫ –≤–∞–ª—é—Ç–µ
        if "btc_bonus" in choice_result:
            bonus = choice_result["btc_bonus"]
            game_state.earn_currency(bonus, "btc_balance")
            print(f"{Colors.MONEY}[+] {bonus} BTC{Colors.RESET}")

        if "btc_penalty" in choice_result:
            penalty = choice_result["btc_penalty"]
            game_state.spend_currency(penalty, "btc_balance")
            print(f"{Colors.ERROR}[-] {penalty} BTC{Colors.RESET}")

        # Heat level –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if "heat_gain" in choice_result:
            heat = choice_result["heat_gain"]
            game_state.modify_stat("heat_level", heat)
            print(f"{Colors.DANGER}[!] Heat Level +{heat}%{Colors.RESET}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã/–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
        if "special_reward" in choice_result:
            reward = choice_result["special_reward"]
            game_state.add_to_inventory(reward)
            print(f"{Colors.SUCCESS}[+] –û—Å–æ–±–∞—è –Ω–∞–≥—Ä–∞–¥–∞: {reward}{Colors.RESET}")

    def _check_random_events(self, mission_id: str, trigger: str) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        mission_data = self.missions[mission_id]
        events = mission_data.get("random_events", [])

        for event_data in events:
            if event_data["trigger"] == trigger and random.random() < event_data["chance"]:
                self._trigger_mission_event(mission_id, event_data)

    def _trigger_mission_event(self, mission_id: str, event_data: dict) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –º–∏—Å—Å–∏–∏"""
        print(f"\n{Colors.WARNING}‚ö° –ù–ï–û–ñ–ò–î–ê–ù–ù–û–ï –°–û–ë–´–¢–ò–ï!{Colors.RESET}")
        print(f"{Colors.ERROR}{event_data['desc']}{Colors.RESET}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã —Å–æ–±—ã—Ç–∏—è
        effects = event_data.get("effects", {})

        if "heat_gain" in effects:
            game_state.modify_stat("heat_level", effects["heat_gain"])
            print(f"{Colors.DANGER}[!] Heat Level +{effects['heat_gain']}%{Colors.RESET}")

        if "time_pressure" in effects:
            # –°–æ–∫—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –º–∏—Å—Å–∏–∏
            if mission_id in self.mission_timers:
                start_time, time_limit = self.mission_timers[mission_id]
                new_limit = time_limit * 0.7  # –°–æ–∫—Ä–∞—â–∞–µ–º –Ω–∞ 30%
                self.mission_timers[mission_id] = (start_time, new_limit)
                print(f"{Colors.ERROR}[!] –í—Ä–µ–º—è –º–∏—Å—Å–∏–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–æ!{Colors.RESET}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        if mission_id not in self.mission_events:
            self.mission_events[mission_id] = []
        self.mission_events[mission_id].append(event_data["event"])

    def _recruit_team(self, mission_id: str, mission_data: dict) -> bool:
        """–ù–∞–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∏—Å—Å–∏–∏"""
        team_size = mission_data.get("team_size", 3)
        required_roles = mission_data.get("team_roles", ["hacker", "social_engineer", "lookout"])

        print(f"\n{Colors.WARNING}üë• –ù–ê–ë–û–† –ö–û–ú–ê–ù–î–´{Colors.RESET}")
        print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {team_size}")
        print(f"–†–æ–ª–∏: {', '.join(required_roles)}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = self._generate_team_candidates(required_roles)

        print(f"\n{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã:{Colors.RESET}")
        for i, candidate in enumerate(candidates, 1):
            skill_color = Colors.SUCCESS if candidate['skill_level'] >= 7 else Colors.WARNING if candidate[
                                                                                                     'skill_level'] >= 4 else Colors.ERROR
            print(f"\n   {i}. {candidate['name']} ({candidate['role']})")
            print(f"      –ù–∞–≤—ã–∫: {skill_color}{candidate['skill_level']}/10{Colors.RESET}")
            print(f"      –õ–æ—è–ª—å–Ω–æ—Å—Ç—å: {candidate['loyalty']}%")
            print(f"      –°—Ç–æ–∏–º–æ—Å—Ç—å: {candidate['cost']} BTC/—ç—Ç–∞–ø")
            print(f"      –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {candidate['traits']}")

        # –ü–æ–∑–≤–æ–ª—è–µ–º –∏–≥—Ä–æ–∫—É –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
        team_members = []
        while len(team_members) < team_size:
            try:
                choice = int(input(
                    f"\n{Colors.PROMPT}–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {len(team_members) + 1}/{team_size} (1-{len(candidates)}): {Colors.RESET}"))
                if 1 <= choice <= len(candidates):
                    selected = candidates[choice - 1]
                    if selected not in team_members:
                        team_members.append(selected)
                        print(f"{Colors.SUCCESS}‚úÖ {selected['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É{Colors.RESET}")
                    else:
                        print(f"{Colors.ERROR}–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ{Colors.RESET}")
                else:
                    print(f"{Colors.ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.RESET}")
            except ValueError:
                print(f"{Colors.ERROR}–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ{Colors.RESET}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã
        total_cost = sum(member['cost'] for member in team_members)

        print(f"\n{Colors.INFO}üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–º–∞–Ω–¥—ã: {total_cost} BTC –∑–∞ —ç—Ç–∞–ø{Colors.RESET}")

        if not game_state.can_afford(total_cost, "btc_balance"):
            print(f"{Colors.ERROR}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –Ω–∞–π–º–∞ –∫–æ–º–∞–Ω–¥—ã{Colors.RESET}")
            return False

        confirm = input(f"{Colors.PROMPT}–ù–∞–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—É? (y/n): {Colors.RESET}").lower()

        if confirm == 'y':
            game_state.spend_currency(total_cost, "btc_balance")

            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            team = {
                "members": team_members,
                "synergy": self._calculate_team_synergy(team_members),
                "total_cost": total_cost
            }

            self.active_teams[mission_id] = team

            print(f"\n{Colors.SUCCESS}‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Å–æ–±—Ä–∞–Ω–∞!{Colors.RESET}")
            print(f"–°–∏–Ω–µ—Ä–≥–∏—è –∫–æ–º–∞–Ω–¥—ã: {team['synergy']}%")
            return True

        return False

    def _generate_team_candidates(self, required_roles: list) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã"""
        candidates = []

        # –ò–º–µ–Ω–∞ –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        names_pool = [
            "Phoenix", "Cipher", "Ghost", "Viper", "Raven", "Blade", "Storm", "Shadow",
            "Zero", "Matrix", "Nova", "Flux", "Echo", "Void", "Nexus", "Quantum"
        ]

        traits_pool = {
            "hacker": ["–≠–∫—Å–ø–µ—Ä—Ç –ø–æ 0-day", "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–µ–π–Ω—Ñ—Ä–µ–π–º–∞–º", "–ú–∞—Å—Ç–µ—Ä —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏"],
            "social_engineer": ["–ú–∞–Ω–∏–ø—É–ª—è—Ç–æ—Ä", "–ú–∞—Å—Ç–µ—Ä –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏", "–ü—Å–∏—Ö–æ–ª–æ–≥"],
            "lookout": ["–•–æ—Ä–æ—à–∞—è —Ä–µ–∞–∫—Ü–∏—è", "–ó–Ω–∞–Ω–∏–µ —É–ª–∏—Ü", "–°–≤—è–∑–∏ –≤ –ø–æ–ª–∏—Ü–∏–∏"]
        }

        for role in required_roles:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 2-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ –∫–∞–∂–¥—É—é —Ä–æ–ª—å
            for _ in range(random.randint(2, 3)):
                name = random.choice(names_pool)
                skill_level = random.randint(3, 9)
                loyalty = random.randint(40, 90)

                # –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–≤—ã–∫–∞
                base_cost = 50
                cost = base_cost + (skill_level - 3) * 20 + random.randint(-10, 20)

                candidate = {
                    "name": name,
                    "role": role,
                    "skill_level": skill_level,
                    "loyalty": loyalty,
                    "cost": cost,
                    "traits": random.choice(traits_pool.get(role, ["–£–Ω–∏–≤–µ—Ä—Å–∞–ª"]))
                }

                candidates.append(candidate)
                names_pool.remove(name)  # –£–±–∏—Ä–∞–µ–º —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å

        return candidates

    def _calculate_team_synergy(self, team_members: list) -> int:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–Ω–µ—Ä–≥–∏—é –∫–æ–º–∞–Ω–¥—ã"""
        base_synergy = 50

        # –ë–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–∏–µ –Ω–∞–≤—ã–∫–∏
        avg_skill = sum(member['skill_level'] for member in team_members) / len(team_members)
        skill_bonus = int((avg_skill - 5) * 5)

        # –ë–æ–Ω—É—Å –∑–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
        avg_loyalty = sum(member['loyalty'] for member in team_members) / len(team_members)
        loyalty_bonus = int((avg_loyalty - 50) / 2)

        # –®—Ç—Ä–∞—Ñ –∑–∞ –¥–∏—Å–±–∞–ª–∞–Ω—Å –Ω–∞–≤—ã–∫–æ–≤
        skill_levels = [member['skill_level'] for member in team_members]
        skill_variance = max(skill_levels) - min(skill_levels)
        balance_penalty = skill_variance * 2

        synergy = base_synergy + skill_bonus + loyalty_bonus - balance_penalty
        return max(20, min(100, synergy))

    def _show_team_status(self, team: dict) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–º–∞–Ω–¥—ã"""
        print(f"\n{Colors.SUCCESS}üë• –ö–û–ú–ê–ù–î–ê:{Colors.RESET}")

        for member in team["members"]:
            status_icon = "üòä" if member['loyalty'] >= 70 else "üòê" if member['loyalty'] >= 40 else "üò†"
            print(f"   {status_icon} {member['name']} ({member['role']}) - –ù–∞–≤—ã–∫: {member['skill_level']}/10")

        synergy_color = Colors.SUCCESS if team['synergy'] >= 80 else Colors.WARNING if team[
                                                                                           'synergy'] >= 60 else Colors.ERROR
        print(f"   ü§ù –°–∏–Ω–µ—Ä–≥–∏—è: {synergy_color}{team['synergy']}%{Colors.RESET}")

    def _execute_team_action(self, stage_data: dict, team: dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        action_type = stage_data.get("team_action", "default")

        print(f"\n{Colors.INFO}üéØ –ö–æ–º–∞–Ω–¥–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action_type}{Colors.RESET}")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥—ã
        base_success = 0.5

        # –ë–æ–Ω—É—Å –æ—Ç —Å–∏–Ω–µ—Ä–≥–∏–∏ –∫–æ–º–∞–Ω–¥—ã
        synergy_bonus = team['synergy'] / 200  # 0-0.5 –±–æ–Ω—É—Å

        # –ë–æ–Ω—É—Å –æ—Ç –Ω–∞–≤—ã–∫–æ–≤
        avg_skill = sum(member['skill_level'] for member in team['members']) / len(team['members'])
        skill_bonus = (avg_skill - 5) / 10  # -0.5 –¥–æ +0.4 –±–æ–Ω—É—Å

        # –®—Ç—Ä–∞—Ñ –æ—Ç –Ω–∏–∑–∫–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
        avg_loyalty = sum(member['loyalty'] for member in team['members']) / len(team['members'])
        loyalty_modifier = (avg_loyalty - 50) / 100  # -0.5 –¥–æ +0.4

        success_chance = base_success + synergy_bonus + skill_bonus + loyalty_modifier
        success_chance = max(0.1, min(0.95, success_chance))

        print(f"{Colors.INFO}–®–∞–Ω—Å —É—Å–ø–µ—Ö–∞: {int(success_chance * 100)}%{Colors.RESET}")

        # –ú–∏–Ω–∏-–∏–≥—Ä–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        if action_type == "execute":
            success = self._team_coordination_minigame(team)
        else:
            success = random.random() < success_chance

        if success:
            print(f"{Colors.SUCCESS}‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ –∑–∞–¥–∞—á—É –æ—Ç–ª–∏—á–Ω–æ!{Colors.RESET}")
            # –ü–æ–≤—ã—à–∞–µ–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
            for member in team['members']:
                member['loyalty'] = min(100, member['loyalty'] + random.randint(5, 15))
        else:
            print(f"{Colors.ERROR}‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å —Å –∑–∞–¥–∞—á–µ–π{Colors.RESET}")
            # –°–Ω–∏–∂–∞–µ–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—å
            for member in team['members']:
                member['loyalty'] = max(0, member['loyalty'] - random.randint(10, 25))

        # –û–ø–ª–∞—á–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        stage_cost = team['total_cost']
        if game_state.can_afford(stage_cost, "btc_balance"):
            game_state.spend_currency(stage_cost, "btc_balance")
            print(f"{Colors.MONEY}[-] –û–ø–ª–∞—á–µ–Ω–æ –∫–æ–º–∞–Ω–¥–µ: {stage_cost} BTC{Colors.RESET}")
        else:
            print(f"{Colors.ERROR}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–æ–º–∞–Ω–¥—ã!{Colors.RESET}")
            success = False  # –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å–∞–±–æ—Ç–∏—Ä—É–µ—Ç –º–∏—Å—Å–∏—é

        return success

    def _team_coordination_minigame(self, team: dict) -> bool:
        """–ú–∏–Ω–∏-–∏–≥—Ä–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
        print(f"\n{Colors.WARNING}‚ö° –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ú–ï–ù–¢: –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è!{Colors.RESET}")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π
        actions = ["HACKER", "SOCIAL", "LOOKOUT"]
        sequence = [random.choice(actions) for _ in range(5)]

        print(f"–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–æ–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ:")
        print(f"H - Hacker, S - Social Engineer, L - Lookout")
        print(f"\n–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {' -> '.join(sequence)}")

        user_input = input(f"{Colors.PROMPT}–í–∞—à –≤–≤–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: HSLHL): {Colors.RESET}").upper()

        expected = "".join([action[0] for action in sequence])

        if user_input == expected:
            print(f"{Colors.SUCCESS}‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è!{Colors.RESET}")
            return True
        else:
            print(f"{Colors.ERROR}‚ùå –ü–ª–æ—Ö–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è! –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}{Colors.RESET}")
            return False

    def _analyze_moral_profile(self, choices: list) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞"""
        if not choices:
            return "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π"

        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—ã–±–æ—Ä–æ–≤
        profiles = {
            "–ü—Ä–∞–≤–µ–¥–Ω–∏–∫": ["protect", "anonymous_leak", "minimize_damage", "leave_charity"],
            "–ü—Ä–∞–≥–º–∞—Ç–∏–∫": ["sell_to_media", "use_and_abandon", "proceed"],
            "–ú–∞–∫–∏–∞–≤–µ–ª–ª–∏—Å—Ç": ["blackmail_officials", "steal_all", "abandon"],
            "–ê–ª—å—Ç—Ä—É–∏—Å—Ç": ["donate_anonymous", "protect", "abort"]
        }

        scores = {}
        for profile, keywords in profiles.items():
            score = sum(1 for choice in choices if any(keyword in choice for keyword in keywords))
            scores[profile] = score

        if not any(scores.values()):
            return "–ù–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–π"

        return max(scores, key=scores.get)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã-–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤
    def _check_stage_requirements(self, stage_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ –º–∏—Å—Å–∏–∏"""
        req_skills = stage_data.get("req_skills", {})
        for skill, level in req_skills.items():
            if game_state.get_skill(skill) < level:
                print(f"{Colors.ERROR}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–≤—ã–∫–∞ {skill}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {level}{Colors.RESET}")
                return False

        req_items = stage_data.get("req_items", [])
        inventory = game_state.get_stat("inventory", [])
        for item in req_items:
            if item not in inventory:
                print(f"{Colors.ERROR}–¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–º–µ—Ç: {item}{Colors.RESET}")
                return False

        return True

    def _execute_mission_stage(self, stage_data: dict) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–∞–ø –º–∏—Å—Å–∏–∏"""
        stage_type = stage_data.get("type", "normal")

        if stage_type == "minigame":
            minigame_type = stage_data.get("minigame", "random")
            if minigame_type == "random":
                _, game = minigame_hub.get_random_minigame()
            else:
                game = minigame_hub.games.get(minigame_type)

            if game:
                return game.play()

        # –û–±—ã—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
        difficulty = stage_data.get("difficulty", 50)

        # –†–∞—Å—á–µ—Ç —à–∞–Ω—Å–∞ —É—Å–ø–µ—Ö–∞
        player_skills = sum(game_state.get_skill(s) for s in ["scanning", "cracking", "stealth", "social_eng"])
        success_chance = max(10, min(90, 100 - difficulty + player_skills))

        return random.randint(1, 100) <= success_chance

    def _apply_stage_rewards(self, stage_data: dict) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ —ç—Ç–∞–ø"""
        rewards = stage_data.get("rewards", {})

        if "btc" in rewards:
            game_state.earn_currency(rewards["btc"], "btc_balance")
            print(f"{Colors.MONEY}[+] {rewards['btc']} BTC{Colors.RESET}")

        if "rep" in rewards:
            game_state.modify_stat("reputation", rewards["rep"])
            print(f"{Colors.REP}[+] {rewards['rep']} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏{Colors.RESET}")

        if "items" in rewards:
            for item in rewards["items"]:
                game_state.add_to_inventory(item)
                print(f"{Colors.SUCCESS}[+] –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item}{Colors.RESET}")

    def _complete_multi_stage_mission(self, mission_id: str, mission_data: dict) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—É—é –º–∏—Å—Å–∏—é"""
        print(f"\n{Colors.SUCCESS}üéâ –í–°–ï –≠–¢–ê–ü–´ –ú–ò–°–°–ò–ò –ó–ê–í–ï–†–®–ï–ù–´!{Colors.RESET}")
        return self._complete_mission(mission_data)

    def _complete_team_mission(self, mission_id: str, mission_data: dict) -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—É—é –º–∏—Å—Å–∏—é"""
        team = self.active_teams.get(mission_id)
        if team:
            print(f"\n{Colors.SUCCESS}üë• –ö–û–ú–ê–ù–î–ù–ê–Ø –ú–ò–°–°–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!{Colors.RESET}")

            # –ë–æ–Ω—É—Å –∑–∞ —Ö–æ—Ä–æ—à—É—é —Å–∏–Ω–µ—Ä–≥–∏—é –∫–æ–º–∞–Ω–¥—ã
            if team['synergy'] >= 80:
                bonus_btc = mission_data.get("reward_btc", 0) * 0.2
                game_state.earn_currency(bonus_btc, "btc_balance")
                print(f"{Colors.MONEY}[–ë–û–ù–£–°] +{bonus_btc} BTC –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é –∫–æ–º–∞–Ω–¥–Ω—É—é —Ä–∞–±–æ—Ç—É!{Colors.RESET}")

            # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
            del self.active_teams[mission_id]

        return self._complete_mission(mission_data)

    def _handle_team_mission_failure(self, mission_data: dict, team: dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥–Ω–æ–π –º–∏—Å—Å–∏–∏"""
        print(f"{Colors.ERROR}üë• –ö–û–ú–ê–ù–î–ù–ê–Ø –ú–ò–°–°–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê!{Colors.RESET}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—ã
        betrayal_chance = 100 - team['synergy']
        if random.randint(1, 100) <= betrayal_chance:
            print(f"{Colors.DANGER}üíî –û–¥–∏–Ω –∏–∑ —á–ª–µ–Ω–æ–≤ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–µ–¥–∞–ª –≤–∞—Å!{Colors.RESET}")
            additional_heat = random.randint(20, 40)
            game_state.modify_stat("heat_level", additional_heat)

        return self._handle_mission_failure(mission_data)


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã)
def show_mission_timer(time_remaining: float, time_limit: float) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä –º–∏—Å—Å–∏–∏ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    percentage = (time_remaining / time_limit) * 100 if time_limit > 0 else 0

    if percentage > 50:
        color = Colors.SUCCESS
        icon = "‚è∞"
    elif percentage > 20:
        color = Colors.WARNING
        icon = "‚ö†Ô∏è"
    else:
        color = Colors.ERROR
        icon = "üö®"

    bar_length = 20
    filled = int((percentage / 100) * bar_length)
    bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)

    print(f"\n{color}{icon} –í–†–ï–ú–Ø: [{bar}] {time_remaining:.1f}—á / {time_limit}—á{Colors.RESET}")

    if percentage <= 10:
        pulse_text(f"–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–†–ï–ú–Ø!", Colors.ERROR, 2)

def show_team_coordination_visual(team_members: list, action: str) -> None:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""
    print(f"\n{Colors.INFO}üë• –ö–û–ú–ê–ù–î–ù–ê–Ø –ö–û–û–†–î–ò–ù–ê–¶–ò–Ø{Colors.RESET}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    roles_icons = {
        "hacker": "üíª",
        "social_engineer": "üé≠",
        "lookout": "üëÅÔ∏è",
        "specialist": "‚ö°"
    }

    for member in team_members:
        icon = roles_icons.get(member['role'], "üë§")
        loyalty_color = Colors.SUCCESS if member['loyalty'] >= 70 else Colors.WARNING if member[
                                                                                                   'loyalty'] >= 40 else Colors.ERROR

        print(f"   {icon} {member['name']} ({loyalty_color}{member['loyalty']}%{Colors.RESET})")

    # –ê–Ω–∏–º–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
    if action == "execute":
        animate_text(">>> –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò–ò <<<", 3, 0.8)
    elif action == "planning":
        typing_effect("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –∞—Ç–∞–∫–∏...", 0.05)
    elif action == "recruit":
        typing_effect("–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...", 0.04)

def show_moral_choice_visual(choice_data: dict) -> None:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    print(f"\n{Colors.STORY}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ú–û–†–ê–õ–¨–ù–ê–Ø –î–ò–õ–ï–ú–ú–ê ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    # –û–±—Ä–∞–º–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫—É
    boxed_text(choice_data['question'], color=Colors.STORY)

    print(f"\n{Colors.INFO}ü§î –í–∞—à–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:{Colors.RESET}")

    choices = choice_data["choices"]
    choice_icons = {
        "protect": "üõ°Ô∏è",
        "abandon": "üíî",
        "profit": "üí∞",
        "justice": "‚öñÔ∏è",
        "mercy": "üïäÔ∏è",
        "revenge": "‚öîÔ∏è"
    }

    for i, (choice_id, choice_info) in enumerate(choices.items(), 1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        icon = "‚Ä¢"
        for keyword, choice_icon in choice_icons.items():
            if keyword in choice_id or keyword in choice_info.get('desc', '').lower():
                icon = choice_icon
                break

        print(f"\n   {i}. {icon} {choice_info['desc']}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
        if 'rep_change' in choice_info:
            rep_change = choice_info['rep_change']
            if rep_change > 0:
                print(f"      {Colors.SUCCESS}[+{rep_change} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏]{Colors.RESET}")
            elif rep_change < 0:
                print(f"      {Colors.ERROR}[{rep_change} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏]{Colors.RESET}")

def show_mission_event_visual(event_data: dict) -> None:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –º–∏—Å—Å–∏–∏"""
    event_icons = {
        "government_trace": "üö®",
        "competitor_interference": "‚öîÔ∏è",
        "insider_help": "ü§ù",
        "security_upgrade": "üîí",
        "time_pressure": "‚è∞",
        "equipment_failure": "üí•"
    }

    event_type = event_data.get("event", "unknown")
    icon = event_icons.get(event_type, "‚ö°")

    print(f"\n{Colors.DANGER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ù–ï–û–ñ–ò–î–ê–ù–ù–û–ï –°–û–ë–´–¢–ò–ï ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    # –ú–∏–≥–∞—é—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    pulse_text(f"{icon} {event_data['desc']}", Colors.WARNING, 3)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
    effects = event_data.get("effects", {})
    if effects:
        print(f"\n{Colors.INFO}üìä –í–ª–∏—è–Ω–∏–µ –Ω–∞ –º–∏—Å—Å–∏—é:{Colors.RESET}")

        for effect, value in effects.items():
            if effect == "heat_gain":
                print(f"   üî• Heat Level: +{value}%")
            elif effect == "risk_increase":
                print(f"   ‚ö†Ô∏è –†–∏—Å–∫ –ø—Ä–æ–≤–∞–ª–∞: +{value}%")
            elif effect == "time_pressure":
                print(f"   ‚è∞ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ")
            elif effect == "difficulty_increase":
                print(f"   üìà –°–ª–æ–∂–Ω–æ—Å—Ç—å: +{value}")

def show_stage_completion_visual(stage_name: str, stage_number: int, total_stages: int) -> None:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞"""
    print(f"\n{Colors.SUCCESS}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –≠–¢–ê–ü –ó–ê–í–ï–†–®–ï–ù ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —ç—Ç–∞–ø–æ–≤
    stage_bar = ""
    for i in range(total_stages):
        if i < stage_number:
            stage_bar += f"{Colors.SUCCESS}‚ñà{Colors.RESET}"
        elif i == stage_number:
            stage_bar += f"{Colors.WARNING}‚ñà{Colors.RESET}"
        else:
            stage_bar += f"{Colors.DARK_GRAY}‚ñë{Colors.RESET}"

    print(f"\n   ‚úÖ {stage_name}")
    print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: [{stage_bar}] {stage_number + 1}/{total_stages}")

    if stage_number + 1 < total_stages:
        print(f"\n{Colors.INFO}üéØ –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É...{Colors.RESET}")
    else:
        print(f"\n{Colors.SUCCESS}üéâ –í–°–ï –≠–¢–ê–ü–´ –ó–ê–í–ï–†–®–ï–ù–´!{Colors.RESET}")

def show_team_recruitment_visual(candidates: list) -> None:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã"""
    print(f"\n{Colors.WARNING}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ù–ê–ë–û–† –ö–û–ú–ê–ù–î–´ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    for i, candidate in enumerate(candidates, 1):
        # –¶–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–≤—ã–∫–∞
        skill_level = candidate['skill_level']
        if skill_level >= 8:
            skill_color = Colors.SUCCESS
            skill_desc = "–≠–õ–ò–¢–ù–´–ô"
        elif skill_level >= 6:
            skill_color = Colors.WARNING
            skill_desc = "–û–ü–´–¢–ù–´–ô"
        elif skill_level >= 4:
            skill_color = Colors.INFO
            skill_desc = "–°–†–ï–î–ù–ò–ô"
        else:
            skill_color = Colors.ERROR
            skill_desc = "–ù–û–í–ò–ß–û–ö"

        # –†–æ–ª—å —Å –∏–∫–æ–Ω–∫–æ–π
        role_icons = {
            "hacker": "üíª",
            "social_engineer": "üé≠",
            "lookout": "üëÅÔ∏è",
            "specialist": "‚ö°"
        }
        role_icon = role_icons.get(candidate['role'], "üë§")

        print(f"\n   {i}. {role_icon} {Colors.BRIGHT_GREEN}{candidate['name']}{Colors.RESET}")
        print(f"      –†–æ–ª—å: {candidate['role']}")
        print(f"      –ù–∞–≤—ã–∫: {skill_color}{skill_level}/10 ({skill_desc}){Colors.RESET}")
        print(f"      –õ–æ—è–ª—å–Ω–æ—Å—Ç—å: {candidate['loyalty']}%")
        print(f"      –°—Ç–æ–∏–º–æ—Å—Ç—å: {Colors.MONEY}{candidate['cost']} BTC/—ç—Ç–∞–ø{Colors.RESET}")
        print(f"      –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {Colors.INFO}{candidate['traits']}{Colors.RESET}")

def show_mission_failure_sequence(reason: str) -> None:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∞ –º–∏—Å—Å–∏–∏"""
    print(f"\n{Colors.ERROR}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ú–ò–°–°–ò–Ø –ü–†–û–í–ê–õ–ï–ù–ê ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    # ASCII –∞—Ä—Ç –ø—Ä–æ–≤–∞–ª–∞
    failure_art = f"""
    {Colors.ERROR}
        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
        ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
    {Colors.RESET}"""

    print(failure_art)

    failure_messages = {
        "detected": "–í–ê–° –û–ë–ù–ê–†–£–ñ–ò–õ–ò!",
        "timeout": "–í–†–ï–ú–Ø –ò–°–¢–ï–ö–õ–û!",
        "team_betrayal": "–ö–û–ú–ê–ù–î–ê –ü–†–ï–î–ê–õ–ê!",
        "security_breach": "–ó–ê–©–ò–¢–ê –°–†–ê–ë–û–¢–ê–õ–ê!",
        "insufficient_skills": "–ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ù–ê–í–´–ö–û–í!"
    }

    message = failure_messages.get(reason, "–ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –û–®–ò–ë–ö–ê!")

    # –ú–∏–≥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    for _ in range(3):
        print(f"\r{Colors.ERROR}üí• {message} üí•{Colors.RESET}", end='', flush=True)
        time.sleep(0.5)
        print(f"\r{' ' * (len(message) + 6)}", end='', flush=True)
        time.sleep(0.5)

    print(f"\r{Colors.ERROR}üí• {message} üí•{Colors.RESET}")

def show_mission_success_sequence(mission_name: str, rewards: dict) -> None:
    """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏"""
    print(f"\n{Colors.SUCCESS}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    # ASCII –∞—Ä—Ç —É—Å–ø–µ—Ö–∞
    success_art = f"""
    {Colors.SUCCESS}
            ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
            ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë
    {Colors.RESET}"""

    print(success_art)

    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    animate_text(f"üéâ {mission_name.upper()} - –ó–ê–í–ï–†–®–ï–ù–û! üéâ", 2, 1.0)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    print(f"\n{Colors.MONEY}üí∞ –ü–û–õ–£–ß–ï–ù–ù–´–ï –ù–ê–ì–†–ê–î–´:{Colors.RESET}")

    for reward_type, value in rewards.items():
        time.sleep(0.5)
        if reward_type == "btc":
            print(f"   üíé {Colors.MONEY}+{value} BTC{Colors.RESET}")
        elif reward_type == "reputation":
            print(f"   üìà {Colors.REP}+{value} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏{Colors.RESET}")
        elif reward_type == "items":
            for item in value if isinstance(value, list) else [value]:
                print(f"   üì¶ {Colors.INFO}–ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item}{Colors.RESET}")
        elif reward_type == "contacts":
            for contact in value if isinstance(value, list) else [value]:
                print(f"   üì± {Colors.WARNING}–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact}{Colors.RESET}")

def show_countdown_timer(seconds: int, message: str = "–ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑") -> None:
    """–û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    for i in range(seconds, 0, -1):
        # –¶–≤–µ—Ç –º–µ–Ω—è–µ—Ç—Å—è –ø–æ –º–µ—Ä–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –Ω—É–ª—é
        if i > 5:
            color = Colors.INFO
        elif i > 2:
            color = Colors.WARNING
        else:
            color = Colors.ERROR

        print(f"\r{color}{message}: {i}s{Colors.RESET}", end='', flush=True)

        # –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–µ–∫—É–Ω–¥
        if i <= 3:
            print("\a", end='')  # –°–∏—Å—Ç–µ–º–Ω—ã–π –∑–≤—É–∫

        time.sleep(1)

    print(f"\r{Colors.SUCCESS}üöÄ –°–¢–ê–†–¢!{' ' * 30}{Colors.RESET}")

def show_hacking_progress(target: str, progress_steps: list) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∑–ª–æ–º–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏"""
    print(f"\n{Colors.INFO}üéØ –¶–µ–ª—å: {target}{Colors.RESET}")
    print(f"{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ü–†–û–¶–ï–°–° –í–ó–õ–û–ú–ê ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    for i, step in enumerate(progress_steps):
        step_icons = {
            "scan": "üîç",
            "exploit": "üí•",
            "payload": "üì°",
            "access": "üîì",
            "extract": "üì§",
            "cover": "üå´Ô∏è"
        }

        step_type = step.get("type", "unknown")
        icon = step_icons.get(step_type, "‚ö°")
        description = step.get("description", "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...")
        duration = step.get("duration", 2)

        print(f"\n{Colors.WARNING}[{i + 1}/{len(progress_steps)}] {icon} {description}{Colors.RESET}")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –¥–ª—è —ç—Ç–∞–ø–∞
        for j in range(duration * 2):
            progress = (j + 1) / (duration * 2)
            bar_length = 30
            filled = int(progress * bar_length)
            bar = "‚ñà" * filled + "‚ñë" * (bar_length - filled)

            percentage = int(progress * 100)
            print(f"\r         [{Colors.SUCCESS}{bar}{Colors.RESET}] {percentage}%", end='', flush=True)
            time.sleep(0.5)

        print(f" {Colors.SUCCESS}‚úì{Colors.RESET}")

    print(f"\n{Colors.SUCCESS}üéâ –í–ó–õ–û–ú –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!{Colors.RESET}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –º–∏—Å—Å–∏–π
mission_system = MissionSystem()
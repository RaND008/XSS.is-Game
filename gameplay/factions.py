"""
–°–∏—Å—Ç–µ–º–∞ —Ñ—Ä–∞–∫—Ü–∏–π –¥–ª—è XSS Game 0.3.0
"""

import random
import time
from typing import Dict, List, Optional, Tuple

from ui.colors import XSSColors as Colors
from ui.effects import typing_effect, show_ascii_art, boxed_text
from core.game_state import game_state
from systems.audio import audio_system
from config.game_data import FACTIONS


class FactionSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∞–∫—Ü–∏—è–º–∏"""
    
    def __init__(self):
        self.factions = FACTIONS
        self.faction_reputation = {
            "whitehats": 0,
            "blackhats": 0,
            "grayhats": 0
        }
        self.faction_conflicts = {
            ("whitehats", "blackhats"): "hostile",
            ("whitehats", "grayhats"): "neutral", 
            ("blackhats", "grayhats"): "neutral"
        }
    
    def show_faction_selection(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∫—Ü–∏–∏"""
        if game_state.get_stat("faction"):
            print(f"{Colors.WARNING}–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏: {game_state.get_stat('faction')}{Colors.RESET}")
            self.show_faction_info()
            return
        
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í–´–ë–û–† –§–†–ê–ö–¶–ò–ò ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        typing_effect(f"{Colors.STORY}–ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –≤ –º–∏—Ä–µ —Ö–∞–∫–∏–Ω–≥–∞...{Colors.RESET}")
        typing_effect(f"{Colors.INFO}–ö–∞–∂–¥–∞—è —Ñ—Ä–∞–∫—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –º–∏—Å—Å–∏–∏.{Colors.RESET}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏–∏
        faction_list = list(self.factions.items())
        for i, (faction_id, faction_data) in enumerate(faction_list, 1):
            self._display_faction_preview(i, faction_id, faction_data)
        
        print(f"\n{Colors.WARNING}‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤–µ—Å—å –≤–∞—à –ø—É—Ç—å –≤ –∏–≥—Ä–µ!{Colors.RESET}")
        print(f"{Colors.INFO}–í—ã —Å–º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é –ø–æ–∑–∂–µ, –Ω–æ —ç—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.{Colors.RESET}")
        
        while True:
            choice = audio_system.get_input_with_sound(
                f"\n{Colors.PROMPT}–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é (1-3) –∏–ª–∏ 'info [–Ω–æ–º–µ—Ä]' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π: {Colors.RESET}"
            ).strip().lower()
            
            if choice.startswith('info '):
                try:
                    faction_num = int(choice.split()[1])
                    if 1 <= faction_num <= 3:
                        faction_id = list(self.factions.keys())[faction_num - 1]
                        self._show_detailed_faction_info(faction_id)
                    else:
                        print(f"{Colors.ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏{Colors.RESET}")
                except (ValueError, IndexError):
                    print(f"{Colors.ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã{Colors.RESET}")
            
            elif choice in ['1', '2', '3']:
                faction_id = list(self.factions.keys())[int(choice) - 1]
                if self._confirm_faction_choice(faction_id):
                    self._join_faction(faction_id)
                    break
            
            elif choice == 'skip':
                print(f"{Colors.INFO}–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é –ø–æ–∑–∂–µ –∫–æ–º–∞–Ω–¥–æ–π 'faction'{Colors.RESET}")
                break
            
            else:
                print(f"{Colors.ERROR}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2, 3 –∏–ª–∏ 'info [–Ω–æ–º–µ—Ä]'{Colors.RESET}")
    
    def _display_faction_preview(self, number: int, faction_id: str, faction_data: dict) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–∞–∫—Ü–∏–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç
        faction_icons = {
            "whitehats": "üõ°Ô∏è",
            "blackhats": "‚ò†Ô∏è", 
            "grayhats": "üé≠"
        }
        
        faction_colors = {
            "whitehats": Colors.SUCCESS,
            "blackhats": Colors.DANGER,
            "grayhats": Colors.WARNING
        }
        
        icon = faction_icons.get(faction_id, "‚ùì")
        color = faction_colors.get(faction_id, Colors.INFO)
        
        print(f"\n{color}‚ïê‚ïê‚ïê {number}. {icon} {faction_data['name']} ‚ïê‚ïê‚ïê{Colors.RESET}")
        print(f"{Colors.INFO}{faction_data['desc']}{Colors.RESET}")
        
        # –ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        bonuses = faction_data.get('bonuses', {})
        if bonuses:
            print(f"{Colors.SKILL}–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:{Colors.RESET}")
            for bonus, value in bonuses.items():
                if bonus == "reputation_multiplier":
                    print(f"  ‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è x{value}")
                elif bonus == "heat_reduction":
                    print(f"  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ Heat Level –Ω–∞ {value}%")
                elif bonus == "btc_multiplier":
                    print(f"  ‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã BTC x{value}")
                elif bonus == "skill_boost":
                    print(f"  ‚Ä¢ –í—Å–µ –Ω–∞–≤—ã–∫–∏ +{value}")
                elif bonus == "special_market":
                    print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É —Ä—ã–Ω–∫—É")
    
    def _show_detailed_faction_info(self, faction_id: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–∞–∫—Ü–∏–∏"""
        faction_data = self.factions[faction_id]
        
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        # –ë–æ–ª—å—à–æ–π ASCII –∞—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏
        if faction_id == "whitehats":
            show_ascii_art("shield")
        elif faction_id == "blackhats":
            show_ascii_art("skull")
        else:
            show_ascii_art("hack")
        
        boxed_text(
            f"{faction_data['name']}\n\n{faction_data['desc']}\n\n"
            f"–§–∏–ª–æ—Å–æ—Ñ–∏—è: {faction_data.get('philosophy', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            color=Colors.INFO
        )
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∏—Å—Å–∏–∏
        unique_missions = faction_data.get('exclusive_missions', [])
        if unique_missions:
            print(f"\n{Colors.WARNING}üéØ –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –ú–ò–°–°–ò–ò:{Colors.RESET}")
            for mission in unique_missions[:3]:
                print(f"  ‚Ä¢ {mission}")
            if len(unique_missions) > 3:
                print(f"  ‚Ä¢ ...–∏ –µ—â–µ {len(unique_missions) - 3} –º–∏—Å—Å–∏–π")
        
        # –û—Å–æ–±—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        special_features = faction_data.get('special_features', [])
        if special_features:
            print(f"\n{Colors.SKILL}‚ú® –û–°–û–ë–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:{Colors.RESET}")
            for feature in special_features:
                print(f"  ‚Ä¢ {feature}")
        
        # –í—Ä–∞–≥–∏ –∏ —Å–æ—é–∑–Ω–∏–∫–∏
        enemies = faction_data.get('enemies', [])
        allies = faction_data.get('allies', [])
        
        if enemies:
            print(f"\n{Colors.ERROR}‚öîÔ∏è –í–†–ê–ì–ò: {', '.join(enemies)}{Colors.RESET}")
        if allies:
            print(f"{Colors.SUCCESS}ü§ù –°–û–Æ–ó–ù–ò–ö–ò: {', '.join(allies)}{Colors.RESET}")
        
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
    
    def _confirm_faction_choice(self, faction_id: str) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ñ—Ä–∞–∫—Ü–∏–∏"""
        faction_data = self.factions[faction_id]
        
        print(f"\n{Colors.WARNING}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó{Colors.RESET}")
        print(f"{Colors.WARNING}‚ïë           –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï              ‚ïë{Colors.RESET}")
        print(f"{Colors.WARNING}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{Colors.RESET}")
        
        print(f"\n–í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é: {Colors.SUCCESS}{faction_data['name']}{Colors.RESET}")
        print(f"{Colors.INFO}–≠—Ç–æ —Ä–µ—à–µ–Ω–∏–µ –ø–æ–≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å—é –≤–∞—à—É –∏–≥—Ä—É.{Colors.RESET}")
        
        confirm = audio_system.get_input_with_sound(
            f"\n{Colors.PROMPT}–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä? (yes/no): {Colors.RESET}"
        ).lower()
        
        return confirm in ['yes', 'y', '–¥–∞', '–¥']
    
    def _join_faction(self, faction_id: str) -> None:
        """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ñ—Ä–∞–∫—Ü–∏–∏"""
        faction_data = self.factions[faction_id]
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        print(f"\n{Colors.INFO}–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É —Ñ—Ä–∞–∫—Ü–∏–∏...{Colors.RESET}")
        time.sleep(1)
        
        audio_system.play_sound("faction_join")
        
        # –î—Ä–∞–º–∞—Ç–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_messages = {
            "whitehats": [
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä—è–¥—ã –∑–∞—â–∏—Ç–Ω–∏–∫–æ–≤ –∫–∏–±–µ—Ä–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞!",
                "–í–∞—à–∞ –º–∏—Å—Å–∏—è - –∑–∞—â–∏—â–∞—Ç—å –Ω–µ–≤–∏–Ω–Ω—ã—Ö –æ—Ç –∫–∏–±–µ—Ä—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç–æ–≤.",
                "–ü–æ–º–Ω–∏—Ç–µ: —Å –≤–µ–ª–∏–∫–æ–π —Å–∏–ª–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤–µ–ª–∏–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å."
            ],
            "blackhats": [
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–º–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...",
                "–ó–¥–µ—Å—å –ø—Ä–∞–≤—è—Ç —Ç–æ–ª—å–∫–æ —Å–∏–ª–∞ –∏ —Ö–∏—Ç—Ä–æ—Å—Ç—å.",
                "–î–æ–≤–µ—Ä—è–π —Ç–æ–ª—å–∫–æ —Å–µ–±–µ. –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –ª–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã."
            ],
            "grayhats": [
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü.",
                "–í–∞—à –ø—É—Ç—å –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω —á—É–∂–æ–π –º–æ—Ä–∞–ª—å—é.",
                "–°–≤–æ–±–æ–¥–∞ –≤—ã–±–æ—Ä–∞ - –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Å–∏–ª–∞."
            ]
        }
        
        messages = welcome_messages.get(faction_id, ["–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"])
        for message in messages:
            typing_effect(f"{Colors.STORY}[–§–†–ê–ö–¶–ò–Ø] {message}{Colors.RESET}", 0.03)
            time.sleep(1)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ—Ä–∞–∫—Ü–∏—é
        game_state.set_stat("faction", faction_id)
        self.faction_reputation[faction_id] = 25  # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è
        
        # –°—Ç–∞—Ä—Ç–æ–≤—ã–µ –±–æ–Ω—É—Å—ã
        self._apply_faction_bonuses(faction_id)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
        self._give_faction_starter_pack(faction_id)
        
        show_ascii_art("level_up")
        print(f"\n{Colors.SUCCESS}‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ñ—Ä–∞–∫—Ü–∏–∏ {faction_data['name']}!{Colors.RESET}")
        print(f"{Colors.INFO}–ù–æ–≤—ã–µ –º–∏—Å—Å–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é.{Colors.RESET}")
    
    def _apply_faction_bonuses(self, faction_id: str) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–æ–Ω—É—Å—ã —Ñ—Ä–∞–∫—Ü–∏–∏"""
        faction_data = self.factions[faction_id]
        bonuses = faction_data.get('bonuses', {})
        
        print(f"\n{Colors.SKILL}üéÅ –ü–û–õ–£–ß–ï–ù–´ –ë–û–ù–£–°–´ –§–†–ê–ö–¶–ò–ò:{Colors.RESET}")
        
        for bonus, value in bonuses.items():
            if bonus == "skill_boost":
                for skill in ["scanning", "cracking", "stealth", "social_eng"]:
                    game_state.modify_skill(skill, value)
                print(f"  ‚Ä¢ –í—Å–µ –Ω–∞–≤—ã–∫–∏ +{value}")
            
            elif bonus == "heat_reduction":
                current_heat = game_state.get_stat("heat_level", 0)
                new_heat = max(0, current_heat - value)
                game_state.set_stat("heat_level", new_heat)
                print(f"  ‚Ä¢ Heat Level -{value}% (—Ç–µ–∫—É—â–∏–π: {new_heat}%)")
            
            elif bonus == "reputation_bonus":
                game_state.modify_stat("reputation", value)
                print(f"  ‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è +{value}")
    
    def _give_faction_starter_pack(self, faction_id: str) -> None:
        """–í—ã–¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏"""
        starter_packs = {
            "whitehats": {
                "items": ["ethical_hacker_toolkit", "bug_bounty_access"],
                "btc": 100,
                "contacts": ["corp_security_chief"]
            },
            "blackhats": {
                "items": ["dark_web_access", "anonymous_proxy"],
                "btc": 200,
                "contacts": ["underground_broker"]
            },
            "grayhats": {
                "items": ["flexible_toolkit", "neutral_contacts"],
                "btc": 150,
                "contacts": ["information_broker"]
            }
        }
        
        pack = starter_packs.get(faction_id, {})
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        items = pack.get('items', [])
        for item in items:
            game_state.add_to_inventory(item)
            print(f"  üì¶ –ü–æ–ª—É—á–µ–Ω –ø—Ä–µ–¥–º–µ—Ç: {item}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º BTC
        btc_bonus = pack.get('btc', 0)
        if btc_bonus > 0:
            game_state.earn_currency(btc_bonus, 'btc_balance')
            print(f"  üí∞ –ü–æ–ª—É—á–µ–Ω–æ {btc_bonus} BTC")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        contacts = pack.get('contacts', [])
        for contact in contacts:
            game_state.add_contact(contact)
            print(f"  üì± –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact}")
    
    def show_faction_info(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏"""
        current_faction = game_state.get_stat("faction")
        
        if not current_faction:
            print(f"{Colors.WARNING}–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏{Colors.RESET}")
            print(f"{Colors.INFO}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'join_faction' –¥–ª—è –≤—ã–±–æ—Ä–∞{Colors.RESET}")
            return
        
        faction_data = self.factions[current_faction]
        faction_rep = self.faction_reputation.get(current_faction, 0)
        
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –í–ê–®–ê –§–†–ê–ö–¶–ò–Ø ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"\nüèõÔ∏è {Colors.SUCCESS}{faction_data['name']}{Colors.RESET}")
        print(f"{Colors.INFO}{faction_data['desc']}{Colors.RESET}")
        
        # –†–µ–ø—É—Ç–∞—Ü–∏—è –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏
        rep_color = Colors.SUCCESS if faction_rep >= 75 else Colors.WARNING if faction_rep >= 25 else Colors.ERROR
        print(f"\nüìä –†–µ–ø—É—Ç–∞—Ü–∏—è –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏: {rep_color}{faction_rep}/100{Colors.RESET}")
        
        # –°—Ç–∞—Ç—É—Å –≤ –¥—Ä—É–≥–∏—Ö —Ñ—Ä–∞–∫—Ü–∏—è—Ö
        print(f"\n{Colors.INFO}–û—Ç–Ω–æ—à–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Ñ—Ä–∞–∫—Ü–∏—è–º–∏:{Colors.RESET}")
        for other_faction, other_data in self.factions.items():
            if other_faction != current_faction:
                other_rep = self.faction_reputation.get(other_faction, 0)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è
                conflict_key = tuple(sorted([current_faction, other_faction]))
                relationship = self.faction_conflicts.get(conflict_key, "neutral")
                
                if relationship == "hostile":
                    rel_color = Colors.ERROR
                    rel_icon = "‚öîÔ∏è"
                elif relationship == "allied":
                    rel_color = Colors.SUCCESS
                    rel_icon = "ü§ù"
                else:
                    rel_color = Colors.WARNING
                    rel_icon = "ü§∑"
                
                print(f"  {rel_icon} {other_data['name']}: {rel_color}{relationship.title()}{Colors.RESET} (Rep: {other_rep})")
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ–Ω—É—Å—ã
        bonuses = faction_data.get('bonuses', {})
        if bonuses:
            print(f"\n{Colors.SKILL}üéÅ –ê–∫—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã:{Colors.RESET}")
            for bonus, value in bonuses.items():
                if bonus == "reputation_multiplier":
                    print(f"  ‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è x{value} –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏—Å—Å–∏–π")
                elif bonus == "heat_reduction":
                    print(f"  ‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ Heat Level –Ω–∞ {value}% –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–∞—Ö")
                elif bonus == "btc_multiplier":
                    print(f"  ‚Ä¢ –ù–∞–≥—Ä–∞–¥—ã BTC x{value}")
                elif bonus == "skill_boost":
                    print(f"  ‚Ä¢ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –±–æ–Ω—É—Å –∫–æ –≤—Å–µ–º –Ω–∞–≤—ã–∫–∞–º: +{value}")
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏
        exclusive_missions = faction_data.get('exclusive_missions', [])
        if exclusive_missions:
            print(f"\n{Colors.WARNING}üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–∏—Å—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã:{Colors.RESET}")
            available_count = len([m for m in exclusive_missions if not game_state.is_mission_completed(m)])
            print(f"  ‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}/{len(exclusive_missions)} –º–∏—Å—Å–∏–π")
        
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")

    def show_faction_missions(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∏—Å—Å–∏–∏ —Ç–µ–∫—É—â–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏"""
        current_faction = game_state.get_stat("faction")

        if not current_faction:
            print(f"{Colors.WARNING}–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏{Colors.RESET}")
            return

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º mission_system (–¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞)
        from gameplay.missions import mission_system

        faction_data = self.factions[current_faction]
        exclusive_missions = faction_data.get('exclusive_missions', [])

        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ú–ò–°–°–ò–ò –§–†–ê–ö–¶–ò–ò ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        print(f"\n{Colors.SUCCESS}üèõÔ∏è {faction_data['name']}{Colors.RESET}")

        if not exclusive_missions:
            print(f"\n{Colors.WARNING}–£ –≤–∞—à–µ–π —Ñ—Ä–∞–∫—Ü–∏–∏ –Ω–µ—Ç —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π{Colors.RESET}")
            return

        available_count = 0
        completed_count = 0

        print(f"\n{Colors.INFO}üìã –≠–ö–°–ö–õ–Æ–ó–ò–í–ù–´–ï –ú–ò–°–°–ò–ò:{Colors.RESET}")

        for mission_id in exclusive_missions:
            if mission_id in mission_system.missions:
                mission_data = mission_system.missions[mission_id]
                is_completed = game_state.is_mission_completed(mission_id)

                if is_completed:
                    completed_count += 1
                    status_icon = "‚úÖ"
                    status_color = Colors.SUCCESS
                else:
                    available_count += 1
                    status_icon = "üìã"
                    status_color = Colors.WARNING

                print(f"\n   {status_icon} {status_color}{mission_id}{Colors.RESET}")
                print(f"      {mission_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∏—Å—Å–∏—è')}")
                print(f"      –ù–∞–≥—Ä–∞–¥–∞: {mission_data.get('reward_btc', 0)} BTC")

                if not is_completed:
                    req_rep = mission_data.get('req_rep', 0)
                    current_rep = game_state.get_stat('reputation', 0)
                    if current_rep >= req_rep:
                        print(f"      {Colors.SUCCESS}‚úì –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è{Colors.RESET}")
                    else:
                        print(f"      {Colors.ERROR}‚úó –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: {req_rep}{Colors.RESET}")

        print(f"\n{Colors.INFO}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.RESET}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ: {available_count}")
        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_count}")
        print(f"   –í—Å–µ–≥–æ: {len(exclusive_missions)}")

        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
    
    def change_faction(self, new_faction_id: str) -> bool:
        """–°–º–µ–Ω–∞ —Ñ—Ä–∞–∫—Ü–∏–∏ (—Å —à—Ç—Ä–∞—Ñ–∞–º–∏)"""
        current_faction = game_state.get_stat("faction")
        
        if not current_faction:
            print(f"{Colors.ERROR}–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏{Colors.RESET}")
            return False
        
        if current_faction == new_faction_id:
            print(f"{Colors.WARNING}–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏{Colors.RESET}")
            return False
        
        if new_faction_id not in self.factions:
            print(f"{Colors.ERROR}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—Ä–∞–∫—Ü–∏—è: {new_faction_id}{Colors.RESET}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã
        if not self._check_faction_change_requirements(current_faction, new_faction_id):
            return False
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è—Ö
        if not self._confirm_faction_change(current_faction, new_faction_id):
            return False
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ—ã
        self._apply_faction_change_penalties(current_faction)
        
        # –ú–µ–Ω—è–µ–º —Ñ—Ä–∞–∫—Ü–∏—é
        game_state.set_stat("faction", new_faction_id)
        self.faction_reputation[new_faction_id] = max(10, self.faction_reputation.get(new_faction_id, 0))
        
        print(f"\n{Colors.SUCCESS}‚úÖ –í—ã –ø–µ—Ä–µ—à–ª–∏ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é {self.factions[new_faction_id]['name']}{Colors.RESET}")
        audio_system.play_sound("faction_change")
        
        return True
    
    def _check_faction_change_requirements(self, current_faction: str, new_faction_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏"""
        # –ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
        player_rep = game_state.get_stat("reputation", 0)
        required_rep = 50  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –¥–ª—è —Å–º–µ–Ω—ã
        
        if player_rep < required_rep:
            print(f"{Colors.ERROR}–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –¥–ª—è —Å–º–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏ (–Ω—É–∂–Ω–æ: {required_rep}){Colors.RESET}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–∞–∂–¥–µ–±–Ω–æ—Å—Ç—å —Ñ—Ä–∞–∫—Ü–∏–π
        conflict_key = tuple(sorted([current_faction, new_faction_id]))
        relationship = self.faction_conflicts.get(conflict_key, "neutral")
        
        if relationship == "hostile":
            faction_rep = self.faction_reputation.get(new_faction_id, 0)
            if faction_rep < 25:
                print(f"{Colors.ERROR}–í—Ä–∞–∂–¥–µ–±–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–∏! –ù—É–∂–Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—è 25+ –≤ —Ü–µ–ª–µ–≤–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏{Colors.RESET}")
                return False
        
        return True
    
    def _confirm_faction_change(self, current_faction: str, new_faction_id: str) -> bool:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–∏"""
        current_name = self.factions[current_faction]['name']
        new_name = self.factions[new_faction_id]['name']
        
        print(f"\n{Colors.DANGER}‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –û –°–ú–ï–ù–ï –§–†–ê–ö–¶–ò–ò ‚ö†Ô∏è{Colors.RESET}")
        print(f"{Colors.WARNING}–í—ã –ø–æ–∫–∏–¥–∞–µ—Ç–µ: {current_name}{Colors.RESET}")
        print(f"{Colors.WARNING}–í—ã –≤—Å—Ç—É–ø–∞–µ—Ç–µ –≤: {new_name}{Colors.RESET}")
        
        print(f"\n{Colors.ERROR}–®–¢–†–ê–§–´:{Colors.RESET}")
        print(f"  ‚Ä¢ –ü–æ—Ç–µ—Ä—è 50% —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤ —Å—Ç–∞—Ä–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏")
        print(f"  ‚Ä¢ –ü–æ—Ç–µ—Ä—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –º–∏—Å—Å–∏—è–º")
        print(f"  ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–∞—è –≤—Ä–∞–∂–¥–µ–±–Ω–æ—Å—Ç—å —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –±—ã–≤—à–∏—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤")
        print(f"  ‚Ä¢ –®—Ç—Ä–∞—Ñ -25 –∫ –æ–±—â–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏")
        
        confirm = audio_system.get_input_with_sound(
            f"\n{Colors.PROMPT}–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É —Ñ—Ä–∞–∫—Ü–∏–∏? (yes/no): {Colors.RESET}"
        ).lower()
        
        return confirm in ['yes', 'y']
    
    def _apply_faction_change_penalties(self, old_faction: str) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —à—Ç—Ä–∞—Ñ—ã –∑–∞ —Å–º–µ–Ω—É —Ñ—Ä–∞–∫—Ü–∏–∏"""
        # –°–Ω–∏–∂–∞–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é –≤ —Å—Ç–∞—Ä–æ–π —Ñ—Ä–∞–∫—Ü–∏–∏
        old_rep = self.faction_reputation.get(old_faction, 0)
        self.faction_reputation[old_faction] = max(0, old_rep // 2)
        
        # –û–±—â–∏–π —à—Ç—Ä–∞—Ñ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏
        game_state.modify_stat("reputation", -25)
        
        # –ü–æ–≤—ã—à–∞–µ–º heat level
        game_state.modify_stat("heat_level", 15)
        
        print(f"\n{Colors.ERROR}[-] –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ{Colors.RESET}")
    
    def modify_faction_reputation(self, faction_id: str, amount: int) -> None:
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏"""
        if faction_id in self.faction_reputation:
            old_rep = self.faction_reputation[faction_id]
            self.faction_reputation[faction_id] = max(0, min(100, old_rep + amount))
            
            if amount > 0:
                print(f"{Colors.SUCCESS}[+] –†–µ–ø—É—Ç–∞—Ü–∏—è –≤ {faction_id}: +{amount}{Colors.RESET}")
            else:
                print(f"{Colors.ERROR}[-] –†–µ–ø—É—Ç–∞—Ü–∏—è –≤ {faction_id}: {amount}{Colors.RESET}")
    
    def get_faction_missions(self, faction_id: str = None) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∏—Å—Å–∏–π —Ñ—Ä–∞–∫—Ü–∏–∏"""
        if not faction_id:
            faction_id = game_state.get_stat("faction")
        
        if not faction_id or faction_id not in self.factions:
            return []
        
        return self.factions[faction_id].get('exclusive_missions', [])
    
    def is_mission_faction_exclusive(self, mission_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–∏—Å—Å–∏—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–π –¥–ª—è —Ñ—Ä–∞–∫—Ü–∏–∏"""
        for faction_data in self.factions.values():
            if mission_id in faction_data.get('exclusive_missions', []):
                return True
        return False
    
    def get_faction_bonuses(self, faction_id: str = None) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å—ã —Ñ—Ä–∞–∫—Ü–∏–∏"""
        if not faction_id:
            faction_id = game_state.get_stat("faction")
        
        if not faction_id or faction_id not in self.factions:
            return {}
        
        return self.factions[faction_id].get('bonuses', {})
    
    def check_faction_conflicts(self, action_type: str, target: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã —Ñ—Ä–∞–∫—Ü–∏–π –ø—Ä–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö"""
        current_faction = game_state.get_stat("faction")
        if not current_faction:
            return True
        
        # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤:
        # - WhiteHats –Ω–µ –º–æ–≥—É—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å –≥–æ—Å—É—á—Ä–µ–∂–¥–µ–Ω–∏—è
        # - BlackHats –ø–æ–ª—É—á–∞—é—Ç —à—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–æ–º–æ—â—å –ø—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—è–º
        # - GrayHats –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å –≤—Å–µ, –Ω–æ —Å –º–µ–Ω—å—à–∏–º–∏ –±–æ–Ω—É—Å–∞–º–∏
        
        faction_restrictions = {
            "whitehats": {
                "forbidden_targets": ["government", "hospital", "school"],
                "forbidden_actions": ["ransomware", "ddos_attack"]
            },
            "blackhats": {
                "forbidden_targets": ["law_enforcement"],
                "forbidden_actions": ["bug_bounty", "white_hat_consulting"]
            }
        }
        
        restrictions = faction_restrictions.get(current_faction, {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ü–µ–ª–∏
        forbidden_targets = restrictions.get("forbidden_targets", [])
        if target and any(ft in target.lower() for ft in forbidden_targets):
            print(f"{Colors.ERROR}‚ùå –í–∞—à–∞ —Ñ—Ä–∞–∫—Ü–∏—è –∑–∞–ø—Ä–µ—â–∞–µ—Ç –∞—Ç–∞–∫–∏ –Ω–∞ {target}{Colors.RESET}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        forbidden_actions = restrictions.get("forbidden_actions", [])
        if action_type in forbidden_actions:
            print(f"{Colors.ERROR}‚ùå –í–∞—à–∞ —Ñ—Ä–∞–∫—Ü–∏—è –Ω–µ –æ–¥–æ–±—Ä—è–µ—Ç {action_type}{Colors.RESET}")
            return False
        
        return True
    
    def faction_war_event(self) -> None:
        """–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤–æ–π–Ω—ã —Ñ—Ä–∞–∫—Ü–∏–π"""
        current_faction = game_state.get_stat("faction")
        if not current_faction:
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–∞–∂–¥–µ–±–Ω—É—é —Ñ—Ä–∞–∫—Ü–∏—é
        enemy_factions = []
        for faction_id in self.factions.keys():
            if faction_id != current_faction:
                conflict_key = tuple(sorted([current_faction, faction_id]))
                if self.faction_conflicts.get(conflict_key) == "hostile":
                    enemy_factions.append(faction_id)
        
        if not enemy_factions:
            return
        
        enemy_faction = random.choice(enemy_factions)
        enemy_name = self.factions[enemy_faction]['name']
        
        print(f"\n{Colors.DANGER}üö® –§–†–ê–ö–¶–ò–û–ù–ù–´–ô –ö–û–ù–§–õ–ò–ö–¢! üö®{Colors.RESET}")
        typing_effect(f"{Colors.WARNING}–§—Ä–∞–∫—Ü–∏—è {enemy_name} –∞—Ç–∞–∫—É–µ—Ç –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã!{Colors.RESET}")
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤–æ–π–Ω—ã
        war_effects = [
            {"type": "reputation_loss", "value": -10, "desc": "–ü–æ—Ç–µ—Ä—è —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏–∑-–∑–∞ –∞—Ç–∞–∫"},
            {"type": "heat_gain", "value": 20, "desc": "–ü–æ–≤—ã—à–µ–Ω–∏–µ Heat Level"},
            {"type": "btc_loss", "value": 100, "desc": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Ç–µ—Ä–∏"},
            {"type": "mission_block", "desc": "–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –º–∏—Å—Å–∏–π"}
        ]
        
        effect = random.choice(war_effects)
        
        if effect["type"] == "reputation_loss":
            game_state.modify_stat("reputation", effect["value"])
        elif effect["type"] == "heat_gain":
            game_state.modify_stat("heat_level", effect["value"])
        elif effect["type"] == "btc_loss":
            game_state.modify_stat("btc_balance", -effect["value"])
        
        print(f"{Colors.ERROR}üí• {effect['desc']}{Colors.RESET}")
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å
        choice = audio_system.get_input_with_sound(
            f"\n{Colors.PROMPT}–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∞—Ç–∞–∫—É? (yes/no): {Colors.RESET}"
        ).lower()
        
        if choice in ['yes', 'y']:
            self._faction_retaliation(enemy_faction)
    
    def _faction_retaliation(self, enemy_faction: str) -> None:
        """–û—Ç–≤–µ—Ç–Ω–∞—è –∞—Ç–∞–∫–∞ –Ω–∞ –≤—Ä–∞–∂–¥–µ–±–Ω—É—é —Ñ—Ä–∞–∫—Ü–∏—é"""
        current_faction = game_state.get_stat("faction")
        
        print(f"\n{Colors.WARNING}‚öîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —É–¥–∞—Ä–∞...{Colors.RESET}")
        time.sleep(1)
        
        # –£—Å–ø–µ—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–≤—ã–∫–æ–≤ –∏–≥—Ä–æ–∫–∞
        player_power = sum(game_state.get_skill(skill) for skill in ["cracking", "stealth", "scanning"])
        success_chance = min(80, player_power * 2)
        
        if random.randint(1, 100) <= success_chance:
            # –£—Å–ø–µ—à–Ω–∞—è –∞—Ç–∞–∫–∞
            audio_system.play_sound("hack_success")
            print(f"{Colors.SUCCESS}‚úÖ –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–≤–µ—Ç–Ω–∞—è –∞—Ç–∞–∫–∞!{Colors.RESET}")
            
            # –ù–∞–≥—Ä–∞–¥—ã
            rep_gain = random.randint(10, 25)
            btc_gain = random.randint(50, 200)
            
            game_state.modify_stat("reputation", rep_gain)
            game_state.earn_currency(btc_gain, "btc_balance")
            self.modify_faction_reputation(current_faction, 15)
            
            print(f"{Colors.SUCCESS}[+] –†–µ–ø—É—Ç–∞—Ü–∏—è: +{rep_gain}{Colors.RESET}")
            print(f"{Colors.MONEY}[+] –ù–∞–≥—Ä–∞–¥–∞: {btc_gain} BTC{Colors.RESET}")
            
        else:
            # –ü—Ä–æ–≤–∞–ª –∞—Ç–∞–∫–∏
            audio_system.play_sound("fail")
            print(f"{Colors.ERROR}‚ùå –û—Ç–≤–µ—Ç–Ω–∞—è –∞—Ç–∞–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å!{Colors.RESET}")
            
            # –®—Ç—Ä–∞—Ñ—ã
            heat_gain = random.randint(15, 30)
            game_state.modify_stat("heat_level", heat_gain)
            self.modify_faction_reputation(current_faction, -10)
            
            print(f"{Colors.ERROR}[!] Heat Level: +{heat_gain}%{Colors.RESET}")
    
    def daily_faction_bonus(self) -> None:
        """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –æ—Ç —Ñ—Ä–∞–∫—Ü–∏–∏"""
        current_faction = game_state.get_stat("faction")
        if not current_faction:
            return
        
        faction_rep = self.faction_reputation.get(current_faction, 0)
        
        # –ë–æ–Ω—É—Å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏
        if faction_rep >= 75:
            bonus_btc = random.randint(50, 100)
            bonus_rep = random.randint(2, 5)
            
            game_state.earn_currency(bonus_btc, "btc_balance")
            game_state.modify_stat("reputation", bonus_rep)
            
            print(f"\n{Colors.SUCCESS}üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å —Ñ—Ä–∞–∫—Ü–∏–∏:{Colors.RESET}")
            print(f"{Colors.MONEY}[+] {bonus_btc} BTC{Colors.RESET}")
            print(f"{Colors.REP}[+] {bonus_rep} —Ä–µ–ø—É—Ç–∞—Ü–∏–∏{Colors.RESET}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Ñ—Ä–∞–∫—Ü–∏–π
faction_system = FactionSystem()
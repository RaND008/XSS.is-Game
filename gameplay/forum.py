"""
–°–∏—Å—Ç–µ–º–∞ —Ñ–æ—Ä—É–º–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è XSS Game
"""

import random
import time
import textwrap
from typing import List, Dict, Optional

from ui.colors import XSSColors as Colors
from ui.effects import typing_effect
from core.game_state import game_state
from systems.audio import audio_system
from config.game_data import FORUM_POSTS, CONTACTS


class ForumSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ä—É–º–æ–º –∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏"""
    
    def __init__(self):
        self.forum_posts = FORUM_POSTS
        self.contacts_data = CONTACTS
    
    def browse_forum(self, args: List[str] = None) -> None:
        """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ä—É–º–∞"""
        if not args:
            self._show_forum_main()
        elif len(args) == 2:
            section = args[0].lower()
            try:
                post_id = int(args[1])
                self._show_post(section, post_id)
            except ValueError:
                print(f"{Colors.ERROR}‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º{Colors.RESET}")
        else:
            print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã{Colors.RESET}")
            self._show_forum_usage()
    
    def _show_forum_main(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ñ–æ—Ä—É–º–∞"""
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –§–û–†–£–ú XSS.IS ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ä—É–º–∞
        online_users = random.randint(1337, 13337)
        print(f"\n{Colors.SUCCESS}üü¢ –û–Ω–ª–∞–π–Ω: {online_users:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π{Colors.RESET}")
        print(f"{Colors.INFO}üìä –í—Å–µ–≥–æ —Ç–µ–º: 133,337{Colors.RESET}")
        
        # –ü—É–±–ª–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        print(f"\n{Colors.WARNING}‚ïê‚ïê‚ïê‚ïê üìÇ –ü–£–ë–õ–ò–ß–ù–´–ô –†–ê–ó–î–ï–õ ‚ïê‚ïê‚ïê‚ïê{Colors.RESET}")
        self._show_posts_list("public", self.forum_posts["public"][:8])
        
        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª
        print(f"\n{Colors.DANGER}‚ïê‚ïê‚ïê‚ïê üîí –ü–†–ò–í–ê–¢–ù–´–ô –†–ê–ó–î–ï–õ ‚ïê‚ïê‚ïê‚ïê{Colors.RESET}")
        self._show_posts_list("private", self.forum_posts["private"])
        
        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        print(f"\n{Colors.INFO}üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'forum [public/private] [ID]' –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤{Colors.RESET}")
        print(f"{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
    
    def _show_posts_list(self, section: str, posts: List[Dict]) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"""
        for post in posts:
            post_id = post.get("id", 0)
            title = post.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            author = post.get("author", "–ê–Ω–æ–Ω–∏–º")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç–∞
            icon = self._get_post_icon(post, section)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            if section == "private":
                requirements = post.get("requirements", {})
                if self._check_post_requirements(requirements):
                    # –î–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ—Å—Ç
                    print(f"\n   {icon} [{Colors.SUCCESS}{post_id:>3}{Colors.RESET}] {Colors.SUCCESS}{title}{Colors.RESET}")
                    print(f"        –ê–≤—Ç–æ—Ä: {Colors.PROMPT}{author}{Colors.RESET}")
                else:
                    # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
                    print(f"\n   üîí [{Colors.ERROR}{post_id:>3}{Colors.RESET}] {Colors.ERROR}[–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–û]{Colors.RESET}")
                    req_list = self._format_requirements(requirements)
                    print(f"        –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {Colors.WARNING}{', '.join(req_list)}{Colors.RESET}")
            else:
                # –ü—É–±–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç
                print(f"\n   {icon} [{Colors.INFO}{post_id:>3}{Colors.RESET}] {Colors.WARNING}{title}{Colors.RESET}")
                print(f"        –ê–≤—Ç–æ—Ä: {Colors.PROMPT}{author}{Colors.RESET}")
    
    def _get_post_icon(self, post: Dict, section: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–æ—Å—Ç–∞"""
        title = post.get("title", "").lower()
        post_id = post.get("id", 0)
        
        if post.get("pinned", False) or post_id <= 2:
            return "üìå"  # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ
        elif "—Å—Ä–æ—á–Ω–æ" in title or "üî•" in title or "—ç–∫—Å–∫–ª—é–∑–∏–≤" in title:
            return "üî•"  # –ì–æ—Ä—è—á–∏–µ
        elif "–≤–Ω–∏–º–∞–Ω–∏–µ" in title or "‚ö†Ô∏è" in title or "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ" in title:
            return "‚ö†Ô∏è"  # –í–∞–∂–Ω—ã–µ
        elif section == "private":
            return "üîì"  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ
        else:
            return "üí¨"  # –û–±—ã—á–Ω—ã–µ
    
    def _check_post_requirements(self, requirements: Dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ—Å—Ç—É"""
        if not requirements:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        req_rep = requirements.get("reputation", 0)
        if game_state.get_stat("reputation", 0) < req_rep:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏
        req_skills = requirements.get("skills", {})
        for skill, level in req_skills.items():
            if game_state.get_skill(skill) < level:
                return False
        
        return True
    
    def _format_requirements(self, requirements: Dict) -> List[str]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        req_list = []
        
        req_rep = requirements.get("reputation", 0)
        if req_rep > 0:
            req_list.append(f"–†–µ–ø—É—Ç–∞—Ü–∏—è: {req_rep}")
        
        req_skills = requirements.get("skills", {})
        for skill, level in req_skills.items():
            skill_name = skill.replace('_', ' ').title()
            req_list.append(f"{skill_name}: {level}")
        
        return req_list
    
    def _show_post(self, section: str, post_id: int) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç"""
        if section not in ["public", "private"]:
            print(f"{Colors.ERROR}‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'public' –∏–ª–∏ 'private'{Colors.RESET}")
            return
        
        posts = self.forum_posts.get(section, [])
        post = next((p for p in posts if p.get("id") == post_id), None)
        
        if not post:
            print(f"{Colors.ERROR}‚ùå –ü–æ—Å—Ç #{post_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ {section}{Colors.RESET}")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if section == "private":
            requirements = post.get("requirements", {})
            if not self._check_post_requirements(requirements):
                self._show_access_denied(requirements)
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç
        self._display_post(post, section)
    
    def _show_access_denied(self, requirements: Dict) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ"""
        print(f"\n{Colors.DANGER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ üîí –î–û–°–¢–£–ü –ó–ê–ü–†–ï–©–ï–ù üîí ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        req_list = self._format_requirements(requirements)
        print(f"\n{Colors.ERROR}–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:{Colors.RESET}")
        for req in req_list:
            print(f"   ‚Ä¢ {Colors.WARNING}{req}{Colors.RESET}")
        
        print(f"\n{Colors.DANGER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
    
    def _display_post(self, post: Dict, section: str) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å—Ç"""
        title = post.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
        author = post.get('author', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
        content = post.get('content', '–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
        header_color = Colors.WARNING if section == "public" else Colors.DANGER
        
        print(f"\n{header_color}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        # –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
        icon = self._get_post_icon(post, section)
        
        print(f"\n{icon} {header_color}{title}{Colors.RESET}")
        print(f"\n{Colors.INFO}üë§ –ê–≤—Ç–æ—Ä:{Colors.RESET} {Colors.PROMPT}{author}{Colors.RESET}")
        print(f"{Colors.INFO}üìÖ ID:{Colors.RESET} #{post.get('id', 0)}")
        
        print(f"\n{Colors.INFO}‚îÅ‚îÅ‚îÅ –°–û–î–ï–†–ñ–ê–ù–ò–ï ‚îÅ‚îÅ‚îÅ{Colors.RESET}\n")
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        paragraphs = content.split('. ')
        for paragraph in paragraphs:
            if paragraph.strip():
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
                if not paragraph.endswith('.'):
                    paragraph += '.'
                
                # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                wrapped_lines = textwrap.wrap(paragraph, width=70)
                for line in wrapped_lines:
                    print(f"   {line}")
                print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
        if section == "private":
            print(f"\n{Colors.SUCCESS}‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É{Colors.RESET}")
        
        print(f"\n{header_color}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
    
    def _show_forum_usage(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã forum"""
        print(f"{Colors.INFO}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:{Colors.RESET}")
        print(f"   ‚Ä¢ forum - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º")
        print(f"   ‚Ä¢ forum public [ID] - —á–∏—Ç–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç")
        print(f"   ‚Ä¢ forum private [ID] - —á–∏—Ç–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –ø–æ—Å—Ç")
    
    def show_contacts(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–≥—Ä–æ–∫–∞"""
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ö–û–ù–¢–ê–ö–¢–´ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        player_contacts = game_state.get_stat("contacts", [])
        
        if not player_contacts:
            print(f"\n{Colors.WARNING}üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤{Colors.RESET}")
            print(f"\n{Colors.INFO}üí° –°–æ–≤–µ—Ç: –ü–æ–≤—ã—à–∞–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –º–∏—Å—Å–∏–∏,{Colors.RESET}")
            print(f"{Colors.INFO}   —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω —Ñ–æ—Ä—É–º–∞{Colors.RESET}")
        else:
            print(f"\n{Colors.SUCCESS}üì¨ –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã ({len(player_contacts)}):{Colors.RESET}\n")
            
            for i, contact_id in enumerate(player_contacts, 1):
                if contact_id in self.contacts_data:
                    contact = self.contacts_data[contact_id]
                    self._display_contact_summary(i, contact_id, contact)
        
        print(f"\n{Colors.INFO}üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'pm [–∏–º—è]' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è{Colors.RESET}")
        print(f"{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
    
    def _display_contact_summary(self, index: int, contact_id: str, contact: Dict) -> None:
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞
        status_icon, status_color = self._get_contact_status(contact_id)
        
        print(f"   {status_icon} {index}. {status_color}{contact['name']}{Colors.RESET}")
        print(f"       {Colors.INFO}{contact['desc']}{Colors.RESET}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages = contact.get("messages", [])
        if messages:
            last_msg = messages[0][:50] + "..." if len(messages[0]) > 50 else messages[0]
            print(f"       {Colors.WARNING}–ü–æ—Å–ª–µ–¥–Ω–µ–µ: \"{last_msg}\"{Colors.RESET}")
        
        print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    
    def _get_contact_status(self, contact_id: str) -> tuple:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        if contact_id == "shadow":
            return "üåë", Colors.ENCRYPTED
        elif contact_id == "nexus":
            return "üíé", Colors.INFO
        elif contact_id == "ghost":
            return "üëª", Colors.WARNING
        else:
            return "üë§", Colors.INFO
    
    def private_message(self, contact_name: str) -> None:
        """–°–∏—Å—Ç–µ–º–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        player_contacts = game_state.get_stat("contacts", [])
        
        if contact_name not in player_contacts:
            print(f"\n{Colors.ERROR}‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å –∏–º–µ–Ω–µ–º '{contact_name}'{Colors.RESET}")
            available = ', '.join(player_contacts) if player_contacts else '–Ω–µ—Ç'
            print(f"{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {available}{Colors.RESET}")
            return
        
        if contact_name not in self.contacts_data:
            print(f"\n{Colors.ERROR}‚ùå –ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ{Colors.RESET}")
            return
        
        contact = self.contacts_data[contact_name]
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self._show_connection_animation()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
        mood = self._determine_contact_mood()
        
        print(f"\n{Colors.INFO}[–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {mood['icon']} {mood['name']}]{Colors.RESET}")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = self._get_contact_message(contact, mood)
        
        # –ü–µ—á–∞—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º
        print()
        typing_effect(f"{Colors.WARNING}[{contact['name']}]: {message}{Colors.RESET}", delay=0.02)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        self._check_contact_unlocks(contact_name, contact)
        
        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        self._handle_conversation(contact_name, contact)
    
    def _show_connection_animation(self) -> None:
        """–ê–Ω–∏–º–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        print(f"\n{Colors.ENCRYPTED}[–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–©–ò–©–ï–ù–ù–û–ì–û –°–û–ï–î–ò–ù–ï–ù–ò–Ø]{Colors.RESET}")
        for i in range(3):
            print(f"\r{Colors.WARNING}–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞{'.' * (i + 1)}{Colors.RESET}", end='', flush=True)
            time.sleep(0.5)
        print(f"\r{Colors.SUCCESS}‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω{Colors.RESET}")
        
        audio_system.play_sound("message")
    
    def _determine_contact_mood(self) -> Dict[str, str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        moods = [
            {"name": "–¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ", "icon": "üòä"},
            {"name": "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ", "icon": "üòê"},
            {"name": "–∑–∞–≥–∞–¥–æ—á–Ω–æ–µ", "icon": "ü§î"},
            {"name": "—Å–ø–µ—à–∞—â–µ–µ", "icon": "‚è∞"},
            {"name": "–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ", "icon": "üïµÔ∏è"},
            {"name": "–≤–µ—Å–µ–ª–æ–µ", "icon": "üòÑ"}
        ]
        return random.choice(moods)
    
    def _get_contact_message(self, contact: Dict, mood: Dict) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        base_messages = contact.get("messages", ["–ü—Ä–∏–≤–µ—Ç!"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        additional_messages = self._get_contextual_messages()
        
        all_messages = base_messages + additional_messages
        return random.choice(all_messages)
    
    def _get_contextual_messages(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        messages = []
        
        reputation = game_state.get_stat("reputation", 0)
        heat_level = game_state.get_stat("heat_level", 0)
        warnings = game_state.get_stat("warnings", 0)
        
        if reputation > 100:
            messages.extend([
                "–¢—ã –¥–∞–ª–µ–∫–æ –∑–∞—à–µ–ª. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω, –Ω–∞ —Ç–µ–±—è —É–∂–µ –æ–±—Ä–∞—Ç–∏–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ.",
                "–° –±–æ–ª—å—à–æ–π —Å–∏–ª–æ–π –ø—Ä–∏—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å... –∏ –±–æ–ª—å—à–∏–µ –≤—Ä–∞–≥–∏."
            ])
        
        if heat_level > 70:
            messages.extend([
                "–¢—ã —Å–ª–∏—à–∫–æ–º –∑–∞—Å–≤–µ—Ç–∏–ª—Å—è. –°–æ–≤–µ—Ç—É—é –∑–∞–ª–µ—á—å –Ω–∞ –¥–Ω–æ.",
                "–°–ª—ã—à–∞–ª, –∑–∞ —Ç–æ–±–æ–π —É–∂–µ –æ—Ö–æ—Ç—è—Ç—Å—è. –ë—É–¥—å –Ω–∞—á–µ–∫—É.",
                "–¢–≤–æ–π heat level –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç. –í—Ä–µ–º—è –∏—Å—á–µ–∑–Ω—É—Ç—å –Ω–∞ –≤—Ä–µ–º—è."
            ])
        
        if warnings > 0:
            messages.extend([
                "–ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ. –ï—â–µ –ø–∞—Ä–∞ –æ—à–∏–±–æ–∫ –∏ —Ç–µ–±—è –Ω–∞–∫—Ä–æ—é—Ç.",
                "–ê–¥–º–∏–Ω—ã –Ω–∞—á–∏–Ω–∞—é—Ç –ø–æ–¥–æ–∑—Ä–µ–≤–∞—Ç—å. –î–µ–π—Å—Ç–≤—É–π –∞–∫–∫—É—Ä–∞—Ç–Ω–µ–µ."
            ])
        
        return messages
    
    def _check_contact_unlocks(self, contact_id: str, contact: Dict) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        unlocks = contact.get("unlocks", [])
        if not unlocks:
            return
        
        # –®–∞–Ω—Å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–º–µ—Ç–µ
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å
            print(f"\n{Colors.SUCCESS}[{contact['name']}]: –ö—Å—Ç–∞—Ç–∏, —É –º–µ–Ω—è –µ—Å—Ç—å –∫–æ–µ-—á—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ...{Colors.RESET}")
            time.sleep(1)
            
            unlock_item = random.choice(unlocks)
            print(f"{Colors.SUCCESS}[+] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ '{unlock_item}' –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ!{Colors.RESET}")
    
    def _handle_conversation(self, contact_name: str, contact: Dict) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"""
        print(f"\n{Colors.INFO}[–í–≤–µ–¥–∏—Ç–µ 'q' —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–ª–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞]{Colors.RESET}")
        user_input = audio_system.get_input_with_sound(f"{Colors.PROMPT}–í—ã: {Colors.RESET}")
        
        if user_input.lower() != 'q':
            response = self._generate_response(contact_name, user_input.lower())
            typing_effect(f"{Colors.WARNING}[{contact['name']}]: {response}{Colors.RESET}", delay=0.02)
        
        print(f"\n{Colors.ENCRYPTED}[–°–û–ï–î–ò–ù–ï–ù–ò–ï –†–ê–ó–û–†–í–ê–ù–û]{Colors.RESET}")
    
    def _generate_response(self, contact_name: str, user_input: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ë–∞–∑–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        keyword_responses = {
            "–º–∏—Å—Å–∏—è": [
                "–ú–∏—Å—Å–∏–∏ - —ç—Ç–æ –ø—É—Ç—å –∫ —Å–ª–∞–≤–µ. –ù–æ –≤—ã–±–∏—Ä–∞–π —Å —É–º–æ–º.",
                "–ù–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å—Ç–æ—è—Ç —Ä–∏—Å–∫–∞. –î—É–º–∞–π –≥–æ–ª–æ–≤–æ–π.",
                "–õ—É—á—à–∏–µ –º–∏—Å—Å–∏–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –∫ —Ç–µ–º, –∫—Ç–æ –¥–æ–∫–∞–∑–∞–ª —Å–≤–æ—é –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å."
            ],
            "–ø–æ–º–æ—â—å": [
                "–Ø –ø–æ–º–æ–≥–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–µ–±–µ —Å–∞–º.",
                "–ü–æ–º–æ—â—å –≤ –Ω–∞—à–µ–º –º–∏—Ä–µ —Å—Ç–æ–∏—Ç –¥–æ—Ä–æ–≥–æ.",
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–∫–∞–∂–∏, —á—Ç–æ –∑–∞—Å–ª—É–∂–∏–≤–∞–µ—à—å –º–æ–µ–π –ø–æ–º–æ—â–∏."
            ],
            "—Å–æ–≤–µ—Ç": [
                "–ú–æ–π —Å–æ–≤–µ—Ç - –Ω–µ –¥–æ–≤–µ—Ä—è–π –Ω–∏–∫–æ–º—É. –î–∞–∂–µ –º–Ω–µ.",
                "–í —ç—Ç–æ–º –º–∏—Ä–µ –≤—ã–∂–∏–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø–∞—Ä–∞–Ω–æ–∏–∫–∏.",
                "–õ—É—á—à–∏–π —Å–æ–≤–µ—Ç - –≤—Å–µ–≥–¥–∞ –∏–º–µ—Ç—å –ø–ª–∞–Ω –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏—è."
            ],
            "–¥–µ–Ω—å–≥–∏": [
                "–î–µ–Ω—å–≥–∏ - —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç. –í–∞–∂–Ω–æ, –∫–∞–∫ —Ç—ã –∏—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—à—å.",
                "–í –∫—Ä–∏–ø—Ç–µ —Å–∏–ª–∞, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å.",
                "–ë–æ–≥–∞—Ç—Å—Ç–≤–æ –±–µ–∑ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ - —ç—Ç–æ –º–∏—à–µ–Ω—å –Ω–∞ —Å–ø–∏–Ω–µ."
            ],
            "–≤–∑–ª–æ–º": [
                "–í–∑–ª–æ–º - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ. –¢—Ä–µ–±—É–µ—Ç —Ç–µ—Ä–ø–µ–Ω–∏—è –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏.",
                "–õ—É—á—à–∏–µ —Ö–∞–∫–µ—Ä—ã –¥—É–º–∞—é—Ç –∫–∞–∫ —Ö—É–¥–æ–∂–Ω–∏–∫–∏, –Ω–æ –¥–µ–π—Å—Ç–≤—É—é—Ç –∫–∞–∫ –∏–Ω–∂–µ–Ω–µ—Ä—ã.",
                "–ö–∞–∂–¥–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–º–µ–µ—Ç —Å–ª–∞–±–æ–µ –∑–≤–µ–Ω–æ. –ù–∞–π–¥–∏ –µ–≥–æ."
            ],
            "—Ä–µ–ø—É—Ç–∞—Ü–∏—è": [
                "–†–µ–ø—É—Ç–∞—Ü–∏—è –≤ –Ω–∞—à–µ–º –º–∏—Ä–µ - —ç—Ç–æ –≤—Å–µ.",
                "–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–ø—É—Ç–∞—Ü–∏—é —Ç—è–∂–µ–ª–æ, –ø–æ—Ç–µ—Ä—è—Ç—å - –ª–µ–≥–∫–æ.",
                "–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–≤–µ—Ä–∏... –∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∏—Ö –Ω–∞–≤—Å–µ–≥–¥–∞."
            ],
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": [
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - —ç—Ç–æ –Ω–µ –ø–∞—Ä–∞–Ω–æ–π—è, —ç—Ç–æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.",
                "–û–¥–∏–Ω –Ω–µ–æ—Å—Ç–æ—Ä–æ–∂–Ω—ã–π —à–∞–≥ –º–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç—å –≤—Å–µ–≥–æ.",
                "OPSEC –Ω–µ –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è, OPSEC —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è."
            ]
        }
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        contact_specific = {
            "shadow": [
                "–¢–µ–Ω–∏ –ø–æ–º–Ω—è—Ç –≤—Å–µ...",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –º–æ—è –≤–∞–ª—é—Ç–∞.",
                "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –ª—É—á—à–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Ç–µ–º–Ω–æ—Ç–µ."
            ],
            "nexus": [
                "–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–≤—è–∑–∏ –≤–µ–∑–¥–µ.",
                "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—è –∫–∞–∫ –≤–æ–¥–∞.",
                "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
            ],
            "ghost": [
                "–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å - –º–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ.",
                "–û—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–µ—É–ª–æ–≤–∏–º—ã–º - —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ.",
                "–ü—Ä–∏–∑—Ä–∞–∫–∏ –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é—Ç —Å–ª–µ–¥–æ–≤."
            ]
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword, responses in keyword_responses.items():
            if keyword in user_input:
                return random.choice(responses)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∫–æ–Ω—Ç–∞–∫—Ç–∞
        if contact_name in contact_specific:
            if random.random() < 0.3:  # 30% —à–∞–Ω—Å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                return random.choice(contact_specific[contact_name])
        
        # –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã
        generic_responses = [
            "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å...",
            "–Ø –ø–æ–¥—É–º–∞—é –æ–± —ç—Ç–æ–º.",
            "–í—Ä–µ–º—è –ø–æ–∫–∞–∂–µ—Ç.",
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –ø—Ä–∞–≤.",
            "–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π.",
            "–ù–µ –≤—Å–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ, –∫–∞–∫ –∫–∞–∂–µ—Ç—Å—è.",
            "–£ –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π –ø—É—Ç—å.",
            "–ú—É–¥—Ä–æ—Å—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å –æ–ø—ã—Ç–æ–º.",
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—â–∏ –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Å–∞–º–æ–º—É.",
            "–¢–µ—Ä–ø–µ–Ω–∏–µ - –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª—å —Ö–∞–∫–µ—Ä–∞."
        ]
        
        return random.choice(generic_responses)
    
    def add_contact(self, contact_id: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç"""
        if contact_id not in self.contacts_data:
            print(f"{Colors.ERROR}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç: {contact_id}{Colors.RESET}")
            return False
        
        if game_state.add_contact(contact_id):
            contact = self.contacts_data[contact_id]
            print(f"\n{Colors.SUCCESS}üì¨ –ù–û–í–´–ô –ö–û–ù–¢–ê–ö–¢!{Colors.RESET}")
            print(f"{Colors.SUCCESS}–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç: {contact['name']}{Colors.RESET}")
            print(f"{Colors.INFO}{contact['desc']}{Colors.RESET}")
            
            audio_system.play_sound("notification")
            return True
        
        return False
    
    def get_contact_info(self, contact_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
        return self.contacts_data.get(contact_id)
    
    def get_available_contacts(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞"""
        return game_state.get_stat("contacts", [])
    
    def has_contact(self, contact_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —É –∏–≥—Ä–æ–∫–∞"""
        return game_state.has_contact(contact_id)
    
    def generate_forum_activity(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Ñ–æ—Ä—É–º–µ (–Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã)"""
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
            new_post = self._generate_random_post()
            if new_post:
                print(f"\n{Colors.INFO}üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç –Ω–∞ —Ñ–æ—Ä—É–º–µ: \"{new_post['title']}\"{Colors.RESET}")
    
    def _generate_random_post(self) -> Optional[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç"""
        post_templates = [
            {
                "title": "–ù–æ–≤–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ {software}",
                "author": "SecurityResearcher",
                "content": "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –≤ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º –ü–û. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ."
            },
            {
                "title": "–°–ª–∏–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {company}",
                "author": "DataLeaker",
                "content": "–ü–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫—Ä—É–ø–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –ü—Ä–æ–¥–∞—é –∑–∞ —Ä–∞–∑—É–º–Ω—É—é —Ü–µ–Ω—É."
            },
            {
                "title": "–ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –æ–±—Ö–æ–¥–∞ {security_system}",
                "author": "BypassMaster", 
                "content": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–ª –Ω–æ–≤—É—é —Ç–µ—Ö–Ω–∏–∫—É –æ–±—Ö–æ–¥–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∑–∞—â–∏—Ç—ã."
            }
        ]
        
        template = random.choice(post_templates)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        companies = ["TechCorp", "MegaSoft", "CyberInc", "DataSystems", "SecureBank"]
        software = ["Windows", "Chrome", "Firefox", "Office", "Adobe"]
        security_systems = ["–∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞", "—Ñ–∞–π—Ä–≤–æ–ª–∞", "2FA", "–±–∏–æ–º–µ—Ç—Ä–∏–∏"]
        
        post = template.copy()
        post["title"] = post["title"].format(
            software=random.choice(software),
            company=random.choice(companies),
            security_system=random.choice(security_systems)
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ—Å—Ç–∞–º (–≤ —Ä–µ–∞–ª—å–Ω–æ–π –∏–≥—Ä–µ)
        # –í –¥–∞–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        return post
    
    def show_forum_stats(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Ñ–æ—Ä—É–º–µ"""
        player_contacts = len(game_state.get_stat("contacts", []))
        total_contacts = len(self.contacts_data)
        reputation = game_state.get_stat("reputation", 0)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã
        accessible_private = 0
        for post in self.forum_posts["private"]:
            requirements = post.get("requirements", {})
            if self._check_post_requirements(requirements):
                accessible_private += 1
        
        total_private = len(self.forum_posts["private"])
        
        print(f"\n{Colors.INFO}üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–û–†–£–ú–ê:{Colors.RESET}")
        print(f"   –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: {player_contacts}/{total_contacts}")
        print(f"   –†–µ–ø—É—Ç–∞—Ü–∏—è: {reputation}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –ø–æ—Å—Ç—ã: {accessible_private}/{total_private}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if player_contacts == 0:
            print(f"\n{Colors.WARNING}üí° –ü–æ–≤—ã—à–∞–π—Ç–µ —Ä–µ–ø—É—Ç–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤{Colors.RESET}")
        
        if accessible_private < total_private // 2:
            print(f"\n{Colors.WARNING}üí° –ü—Ä–æ–∫–∞—á–∏–≤–∞–π—Ç–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–ª–∏—Ç–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É{Colors.RESET}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞
forum_system = ForumSystem()
"""
–°–∏—Å—Ç–µ–º–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è XSS Game
"""

import random
from typing import Dict, List, Optional

from ui.colors import XSSColors as Colors
from ui.effects import typing_effect
from core.game_state import game_state
from systems.audio import audio_system
from config.settings import ITEM_CATEGORIES
from config.game_data import MARKET_ITEMS


class MarketSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–º"""
    
    def __init__(self):
        self.base_items = MARKET_ITEMS
        self.special_offers = []
        self.item_categories = ITEM_CATEGORIES
    
    def get_available_items(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        available_items = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã
        for item_id, item_data in self.base_items.items():
            if self._check_unlock_condition(item_data):
                item_copy = item_data.copy()
                item_copy["id"] = item_id
                available_items.append(item_copy)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        available_items.extend(self.special_offers)
        
        return available_items
    
    def _check_unlock_condition(self, item_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
        unlock_condition = item_data.get("unlock_condition", {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é
        req_rep = unlock_condition.get("reputation", 0)
        if game_state.get_stat("reputation", 0) < req_rep:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤—ã–∫–∏
        req_skills = unlock_condition.get("skills", {})
        for skill, level in req_skills.items():
            if game_state.get_skill(skill) < level:
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–∞–∫—Ü–∏—é
        req_faction = unlock_condition.get("faction")
        if req_faction and game_state.get_stat("faction") != req_faction:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–∏—Å—Å–∏–∏
        req_missions = unlock_condition.get("completed_missions", [])
        for mission in req_missions:
            if not game_state.is_mission_completed(mission):
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
        req_contacts = unlock_condition.get("contacts", [])
        for contact in req_contacts:
            if not game_state.has_contact(contact):
                return False
        
        return True
    
    def show_market(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω"""
        available_items = self.get_available_items()
        
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –¢–ï–ù–ï–í–û–ô –†–´–ù–û–ö ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_items = len(available_items)
        owned_items = len(game_state.get_stat("inventory", []))
        new_items = sum(1 for item in available_items if item.get("special", False))
        
        print(f"\n{Colors.INFO}üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:{Colors.RESET}")
        print(f"   –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {Colors.WARNING}{total_items}{Colors.RESET}")
        print(f"   –ö—É–ø–ª–µ–Ω–æ: {Colors.SUCCESS}{owned_items}{Colors.RESET}")
        if new_items > 0:
            print(f"   {Colors.SUCCESS}‚ú® –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {new_items}{Colors.RESET}")
        
        print(f"\n{Colors.MONEY}üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {game_state.get_stat('btc_balance', 0):.2f} BTC{Colors.RESET}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {}
        for item in available_items:
            cat = item.get("type", "other")
            if cat not in categories:
                categories[cat] = []
            categories[cat].append(item)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for cat_id, items in categories.items():
            cat_info = self.item_categories.get(cat_id, {"name": "–ü—Ä–æ—á–µ–µ", "icon": "üì¶"})
            
            print(f"\n{Colors.INFO}‚îÅ‚îÅ‚îÅ {cat_info['icon']} {cat_info['name'].upper()} ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
            
            for item in sorted(items, key=lambda x: x.get("price", 0)):
                self._print_item(item)
        
        print(f"\n{Colors.INFO}üí° –ö–æ–º–∞–Ω–¥—ã:{Colors.RESET}")
        print(f"   buy [ID] - –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä")
        print(f"   info [ID] - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        print(f"\n{Colors.WARNING}üîì –ù–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏ –Ω–∞–≤—ã–∫–æ–≤{Colors.RESET}")
        print(f"{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
    
    def _print_item(self, item: dict) -> None:
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
        item_id = item.get("id", "unknown")
        price = item.get("price", 0)
        name = item.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä")
        desc = item.get("desc", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä–∞
        if game_state.has_item(item_id):
            status = f"{Colors.SUCCESS}‚úì –ö—É–ø–ª–µ–Ω–æ{Colors.RESET}"
            price_display = f"{Colors.SUCCESS}{price} BTC{Colors.RESET}"
        elif game_state.can_afford(price, "btc_balance"):
            status = f"{Colors.WARNING}–î–æ—Å—Ç—É–ø–Ω–æ{Colors.RESET}"
            price_display = f"{Colors.MONEY}{price} BTC{Colors.RESET}"
        else:
            status = f"{Colors.ERROR}–î–æ—Ä–æ–≥–æ{Colors.RESET}"
            price_display = f"{Colors.ERROR}{price} BTC{Colors.RESET}"
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        special_mark = ""
        if item.get("special", False):
            duration = item.get("duration", 0)
            special_mark = f"{Colors.SUCCESS} ‚ö° –°–ü–ï–¶–ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï ({duration} —Ö–æ–¥–æ–≤){Colors.RESET}"
        
        print(f"\n   {Colors.INFO}ID: {Colors.WARNING}{item_id}{Colors.RESET}{special_mark}")
        print(f"   {name} - {price_display}")
        print(f"   {Colors.INFO}{desc}{Colors.RESET}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
        bonus = item.get("bonus", {})
        if bonus:
            bonus_str = []
            for bonus_type, value in bonus.items():
                if bonus_type == "all_skills":
                    bonus_str.append(f"–í—Å–µ –Ω–∞–≤—ã–∫–∏ +{value}")
                elif bonus_type == "heat_reduction":
                    bonus_str.append(f"Heat level {value:+}%")
                elif bonus_type in ["scanning", "cracking", "stealth", "social_eng"]:
                    bonus_str.append(f"{bonus_type.title()} +{value}")
                elif bonus_type == "reputation":
                    bonus_str.append(f"–†–µ–ø—É—Ç–∞—Ü–∏—è +{value}")
            
            if bonus_str:
                print(f"   {Colors.SKILL}–ë–æ–Ω—É—Å—ã: {', '.join(bonus_str)}{Colors.RESET}")
        
        print(f"   –°—Ç–∞—Ç—É—Å: {status}")

    def buy_item(self, item_id: str) -> bool:
        """–ü–æ–∫—É–ø–∞–µ—Ç —Ç–æ–≤–∞—Ä —Å —É—á–µ—Ç–æ–º Heat Level"""
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        available_items = self.get_available_items()

        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –ø–æ ID
        item = next((i for i in available_items if i.get("id") == item_id), None)

        if not item:
            print(f"{Colors.ERROR}‚ùå –ü—Ä–µ–¥–º–µ—Ç '{item_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω{Colors.RESET}")
            return False

        if game_state.has_item(item_id):
            print(f"{Colors.WARNING}[!] –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å '{item['name']}'{Colors.RESET}")
            return False

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        base_price = item.get("price", 0)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ Heat Level
        heat_level = game_state.get_stat("heat_level", 0)
        price = base_price  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é price

        if heat_level > 80:
            price = int(base_price * 1.5)  # +50% –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º heat
            print(f"{Colors.DANGER}‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô HEAT LEVEL! –¶–µ–Ω—ã —É–≤–µ–ª–∏—á–µ–Ω—ã –Ω–∞ 50%!{Colors.RESET}")
        elif heat_level > 50:
            price = int(base_price * 1.2)  # +20% –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º heat
            print(f"{Colors.WARNING}‚ö†Ô∏è –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞ –∏–∑-–∑–∞ –≤–∞—à–µ–≥–æ Heat Level (+20%)!{Colors.RESET}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –ø–æ–∫—É–ø–∫—É
        if not game_state.can_afford(price, "btc_balance"):
            needed = price - game_state.get_stat("btc_balance", 0)
            print(f"{Colors.ERROR}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC. –ù—É–∂–Ω–æ –µ—â–µ: {needed:.2f} BTC{Colors.RESET}")
            return False

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
        print(f"\n{Colors.WARNING}–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:{Colors.RESET}")
        print(f"   –¢–æ–≤–∞—Ä: {item['name']}")
        if price != base_price:
            print(f"   –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {Colors.MONEY}{base_price} BTC{Colors.RESET}")
            print(f"   –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {Colors.DANGER}{price} BTC{Colors.RESET}")
        else:
            print(f"   –¶–µ–Ω–∞: {Colors.MONEY}{price} BTC{Colors.RESET}")
        print(f"   –í–∞—à –±–∞–ª–∞–Ω—Å: {Colors.MONEY}{game_state.get_stat('btc_balance'):.2f} BTC{Colors.RESET}")
        print(f"   –û—Å—Ç–∞–Ω–µ—Ç—Å—è: {Colors.MONEY}{game_state.get_stat('btc_balance') - price:.2f} BTC{Colors.RESET}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
        if item.get('desc'):
            print(f"\n   {Colors.INFO}–û–ø–∏—Å–∞–Ω–∏–µ: {item['desc']}{Colors.RESET}")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å—ã
        bonus = item.get("bonus", {})
        if bonus:
            print(f"\n   {Colors.SKILL}–ë–æ–Ω—É—Å—ã:{Colors.RESET}")
            for bonus_type, value in bonus.items():
                if bonus_type == "all_skills":
                    print(f"      ‚Ä¢ –í—Å–µ –Ω–∞–≤—ã–∫–∏ +{value}")
                elif bonus_type == "heat_reduction":
                    if value < 0:
                        print(f"      ‚Ä¢ Heat Level {value}%")
                    else:
                        print(f"      ‚Ä¢ Heat Level +{value}%")
                elif bonus_type in ["scanning", "cracking", "stealth", "social_eng"]:
                    print(f"      ‚Ä¢ {bonus_type.replace('_', ' ').title()} +{value}")
                elif bonus_type == "reputation":
                    print(f"      ‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è +{value}")

        confirm = input(f"\n{Colors.PROMPT}–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É? (y/n): {Colors.RESET}").lower()

        if confirm != 'y':
            print(f"{Colors.WARNING}–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞{Colors.RESET}")
            return False

        # –ü–æ–∫—É–ø–∞–µ–º
        game_state.spend_currency(price, "btc_balance")
        game_state.add_to_inventory(item_id)

        print(f"\n{Colors.SUCCESS}‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–∫—É–ø–∫–∞!{Colors.RESET}")
        print(f"{Colors.SUCCESS}–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {item['name']}{Colors.RESET}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
        self._apply_item_bonuses(item)

        # –ó–≤—É–∫ –ø–æ–∫—É–ø–∫–∏
        audio_system.play_sound("purchase")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        self._check_market_unlocks()

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        special_messages = {
            "elite_proxy": "–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞–Ω—É—Ç –Ω–∞–º–Ω–æ–≥–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ!",
            "zero_day_exploit": "–ú–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ –≤ —Ä—É–∫–∞—Ö –æ–ø—ã—Ç–Ω–æ–≥–æ —Ö–∞–∫–µ—Ä–∞...",
            "quantum_decryptor": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –±—É–¥—É—â–µ–≥–æ —Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö!",
            "darknet_master_key": "–í—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–∞–º—ã–º —Ç–µ–º–Ω—ã–º —É–≥–æ–ª–∫–∞–º —Å–µ—Ç–∏...",
            "ai_singularity_core": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è –≤–∞—à–µ–π –≤–æ–ª–µ!"
        }

        if item_id in special_messages:
            print(f"\n{Colors.STORY}üí≠ {special_messages[item_id]}{Colors.RESET}")

        return True
    
    def _apply_item_bonuses(self, item: dict) -> None:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –±–æ–Ω—É—Å—ã –æ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞"""
        bonus = item.get("bonus", {})
        if not bonus:
            return
        
        print(f"\n{Colors.SKILL}–ü–æ–ª—É—á–µ–Ω—ã –±–æ–Ω—É—Å—ã:{Colors.RESET}")
        
        for bonus_type, value in bonus.items():
            if bonus_type in ["scanning", "cracking", "stealth", "social_eng"]:
                old_value = game_state.get_skill(bonus_type)
                new_value = game_state.modify_skill(bonus_type, value)
                print(f"   {Colors.SKILL}‚ú® {bonus_type.title()}: {old_value} ‚Üí {new_value}{Colors.RESET}")
            
            elif bonus_type == "all_skills":
                for skill in ["scanning", "cracking", "stealth", "social_eng"]:
                    game_state.modify_skill(skill, value)
                print(f"   {Colors.SKILL}‚ú® –í—Å–µ –Ω–∞–≤—ã–∫–∏ +{value}{Colors.RESET}")
            
            elif bonus_type == "heat_reduction":
                old_heat = game_state.get_stat("heat_level", 0)
                new_heat = max(0, old_heat + value)  # value –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
                game_state.set_stat("heat_level", new_heat)
                if value < 0:
                    print(f"   {Colors.SUCCESS}‚ùÑÔ∏è Heat level: {old_heat}% ‚Üí {new_heat}%{Colors.RESET}")
                else:
                    print(f"   {Colors.WARNING}üî• Heat level: {old_heat}% ‚Üí {new_heat}%{Colors.RESET}")
            
            elif bonus_type == "reputation":
                old_rep = game_state.get_stat("reputation", 0)
                new_rep = game_state.modify_stat("reputation", value)
                print(f"   {Colors.REP}üìà –†–µ–ø—É—Ç–∞—Ü–∏—è: {old_rep} ‚Üí {new_rep}{Colors.RESET}")
    
    def _check_market_unlocks(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –Ω–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å
        current_items = self.get_available_items()
        
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π
        
        # –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        new_items_count = len([item for item in current_items 
                              if not game_state.has_item(item.get("id", ""))])
        
        if new_items_count > 0:
            print(f"\n{Colors.SUCCESS}üîì –î–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ!{Colors.RESET}")
    
    def show_item_info(self, item_id: str) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
        available_items = self.get_available_items()
        item = next((i for i in available_items if i.get("id") == item_id), None)
        
        if not item:
            print(f"{Colors.ERROR}‚ùå –ü—Ä–µ–¥–º–µ—Ç '{item_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω{Colors.RESET}")
            return
        
        item_type = item.get("type", "unknown")
        cat_info = self.item_categories.get(item_type, {"name": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "icon": "‚ùì"})
        
        print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –¢–û–í–ê–†–ï ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
        print(f"\n{cat_info['icon']} {Colors.WARNING}{item['name']}{Colors.RESET}")
        print(f"\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_info['name']}")
        print(f"ID: {item.get('id', 'unknown')}")
        print(f"–¶–µ–Ω–∞: {Colors.MONEY}{item.get('price', 0)} BTC{Colors.RESET}")
        print(f"\n{Colors.INFO}–û–ø–∏—Å–∞–Ω–∏–µ:{Colors.RESET}")
        print(f"{item.get('desc', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã
        bonus = item.get("bonus", {})
        if bonus:
            print(f"\n{Colors.SKILL}–≠—Ñ—Ñ–µ–∫—Ç—ã:{Colors.RESET}")
            for bonus_type, value in bonus.items():
                if bonus_type == "all_skills":
                    print(f"   ‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç –≤—Å–µ –Ω–∞–≤—ã–∫–∏ –Ω–∞ {value}")
                elif bonus_type == "heat_reduction":
                    if value < 0:
                        print(f"   ‚Ä¢ –°–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–æ–∑—ã—Å–∫–∞ –Ω–∞ {abs(value)}%")
                    else:
                        print(f"   ‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–æ–∑—ã—Å–∫–∞ –Ω–∞ {value}%")
                elif bonus_type in ["scanning", "cracking", "stealth", "social_eng"]:
                    current = game_state.get_skill(bonus_type)
                    print(f"   ‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç {bonus_type.replace('_', ' ').title()} –Ω–∞ {value} (—Ç–µ–∫—É—â–∏–π: {current}/10)")
                elif bonus_type == "reputation":
                    print(f"   ‚Ä¢ –ü–æ–≤—ã—à–∞–µ—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏—é –Ω–∞ {value}")
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–∫—É–ø–∫–∏
        if game_state.has_item(item.get("id", "")):
            print(f"\n{Colors.SUCCESS}‚úì –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç{Colors.RESET}")
        elif game_state.can_afford(item.get("price", 0), "btc_balance"):
            print(f"\n{Colors.SUCCESS}‚úì –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç{Colors.RESET}")
        else:
            needed = item.get("price", 0) - game_state.get_stat("btc_balance", 0)
            print(f"\n{Colors.ERROR}‚úó –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω—É–∂–Ω–æ –µ—â–µ {needed:.2f} BTC){Colors.RESET}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        if item.get("special", False):
            duration = item.get("duration", 0)
            print(f"\n{Colors.SUCCESS}‚ö° –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å {duration} —Ö–æ–¥–æ–≤{Colors.RESET}")
    
    def add_special_offer(self, item: dict, duration_turns: int = 10) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        special_item = item.copy()
        special_item["special"] = True
        special_item["duration"] = duration_turns
        
        self.special_offers.append(special_item)
        
        print(f"\n{Colors.SUCCESS}üéÅ –°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!{Colors.RESET}")
        print(f"{Colors.WARNING}–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {item['name']}{Colors.RESET}")
        print(f"{Colors.INFO}–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç {duration_turns} —Ö–æ–¥–æ–≤{Colors.RESET}")
        
        audio_system.play_sound("notification")
    
    def update_special_offers(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        to_remove = []
        
        for offer in self.special_offers:
            offer["duration"] -= 1
            if offer["duration"] <= 0:
                to_remove.append(offer)
        
        for offer in to_remove:
            self.special_offers.remove(offer)
            print(f"{Colors.WARNING}[!] –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ '{offer['name']}' –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ{Colors.RESET}")
    
    def generate_random_offer(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
        if random.random() < 0.1:  # 10% —à–∞–Ω—Å
            special_items = [
                {
                    "id": "mystery_box",
                    "name": "–¢–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —è—â–∏–∫",
                    "price": 100,
                    "type": "documents",
                    "desc": "–ù–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏...",
                    "bonus": {"all_skills": random.randint(1, 3)}
                },
                {
                    "id": "stolen_data",
                    "name": "–£–∫—Ä–∞–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    "price": 150,
                    "type": "documents",
                    "desc": "–°–≤–µ–∂–∞—è —É—Ç–µ—á–∫–∞ —Å –∫—Ä—É–ø–Ω–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏–∏",
                    "bonus": {"reputation": 20}
                },
                {
                    "id": "prototype_tool",
                    "name": "–ü—Ä–æ—Ç–æ—Ç–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
                    "price": 200,
                    "type": "software",
                    "desc": "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                    "bonus": {random.choice(["scanning", "cracking", "stealth", "social_eng"]): 3}
                }
            ]
            
            item = random.choice(special_items).copy()
            item["price"] = int(item["price"] * random.uniform(0.5, 1.5))  # –°–ª—É—á–∞–π–Ω–∞—è —Ü–µ–Ω–∞
            
            self.add_special_offer(item, duration_turns=random.randint(5, 15))
    
    def get_item_by_id(self, item_id: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ ID"""
        available_items = self.get_available_items()
        return next((item for item in available_items if item.get("id") == item_id), None)
    
    def get_items_by_category(self, category: str) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        available_items = self.get_available_items()
        return [item for item in available_items if item.get("type") == category]
    
    def get_affordable_items(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–≥—Ä–æ–∫ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å"""
        available_items = self.get_available_items()
        balance = game_state.get_stat("btc_balance", 0)
        
        return [item for item in available_items 
                if item.get("price", 0) <= balance and not game_state.has_item(item.get("id", ""))]
    
    def get_owned_items(self) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        inventory = game_state.get_stat("inventory", [])
        owned_items = []
        
        for item_id in inventory:
            # –ò—â–µ–º –≤ –±–∞–∑–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–∞—Ö
            if item_id in self.base_items:
                item = self.base_items[item_id].copy()
                item["id"] = item_id
                owned_items.append(item)
            # –ò—â–µ–º –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
            else:
                for offer in self.special_offers:
                    if offer.get("id") == item_id:
                        owned_items.append(offer)
                        break
        
        return owned_items
    
    def calculate_total_bonuses(self) -> Dict[str, int]:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–µ –±–æ–Ω—É—Å—ã –æ—Ç –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤"""
        owned_items = self.get_owned_items()
        total_bonuses = {
            "scanning": 0,
            "cracking": 0,
            "stealth": 0,
            "social_eng": 0,
            "heat_reduction": 0,
            "reputation": 0
        }
        
        for item in owned_items:
            bonus = item.get("bonus", {})
            for bonus_type, value in bonus.items():
                if bonus_type in total_bonuses:
                    total_bonuses[bonus_type] += value
                elif bonus_type == "all_skills":
                    for skill in ["scanning", "cracking", "stealth", "social_eng"]:
                        total_bonuses[skill] += value
        
        return total_bonuses


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –º–∞–≥–∞–∑–∏–Ω–∞
market_system = MarketSystem()
"""
–°–∏—Å—Ç–µ–º–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –±–∏—Ä–∂–∏ –¥–ª—è XSS Game
"""

import random
import time
from typing import Dict, Optional

from ui.colors import XSSColors as Colors
from ui.effects import format_currency
from core.game_state import game_state
from systems.audio import audio_system
from config.game_data import CRYPTO_DATA
from systems.event_system import event_system, CryptoMarketChangeEvent


class CryptoSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–π –±–∏—Ä–∂–µ–π"""
    
    def __init__(self):
        self.crypto_data = CRYPTO_DATA.copy()
        self.price_history = {symbol: [] for symbol in self.crypto_data.keys()}
        self.market_volatility = 0.05  # 5% –±–∞–∑–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    
    def update_crypto_prices(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        for symbol in self.crypto_data:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            current_price = self.crypto_data[symbol]["price"]
            self.price_history[symbol].append(current_price)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 50 –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            if len(self.price_history[symbol]) > 50:
                self.price_history[symbol] = self.price_history[symbol][-50:]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É
            change_percent = random.uniform(-self.market_volatility, self.market_volatility)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç
            if symbol == "BTC":
                # BTC –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª–µ–Ω
                change_percent *= 0.7
            elif symbol == "DOGE":
                # DOGE –±–æ–ª–µ–µ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω
                change_percent *= 2.0
            
            new_price = current_price * (1 + change_percent)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            min_price = 0.01 if symbol in ["DOGE", "XRP"] else 1.0
            self.crypto_data[symbol]["price"] = max(min_price, new_price)
    
    def get_24h_change(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        if symbol not in self.price_history or len(self.price_history[symbol]) < 2:
            return random.uniform(-15, 15)
        
        # –ë–µ—Ä–µ–º "—Å—Ç–∞—Ä—É—é" —Ü–µ–Ω—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        history = self.price_history[symbol]
        if len(history) >= 10:
            old_price = history[-10]
        else:
            old_price = history[0]
        
        current_price = self.crypto_data[symbol]["price"]
        change = ((current_price - old_price) / old_price) * 100
        
        return change
    
    def show_crypto_market(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—É—é –±–∏—Ä–∂—É"""
        while True:
            self.update_crypto_prices()
            
            print(f"\n{Colors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ö–†–ò–ü–¢–û –ë–ò–†–ñ–ê ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{Colors.RESET}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            self._show_portfolio_stats()
            
            # –¢–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã
            self._show_crypto_rates()
            
            # –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π
            self._show_operations_menu()
            
            action = audio_system.get_input_with_sound(f"\n{Colors.PROMPT}–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: {Colors.RESET}").lower()
            
            if action == 'b':
                self._buy_crypto_menu()
            elif action == 's':
                self._sell_crypto_menu()
            elif action == 'c':
                self._convert_menu()
            elif action == 'r':
                print(f"\n{Colors.INFO}üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤...{Colors.RESET}")
                time.sleep(0.5)
                continue
            elif action == 'h':
                self._show_price_history()
            elif action == 't':
                self._show_trading_tips()
            elif action == 'p':
                self._show_portfolio_analysis()
            elif action == 'q':
                break
            else:
                print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.RESET}")
                time.sleep(1)
    
    def _show_portfolio_stats(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        usd_balance = game_state.get_stat("usd_balance", 0)
        btc_balance = game_state.get_stat("btc_balance", 0)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        total_crypto_value = 0
        for symbol in ["ETH", "LTC", "XRP", "DOGE"]:
            amount = game_state.get_stat(symbol, 0)
            if amount > 0:
                total_crypto_value += amount * self.crypto_data[symbol]["price"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º BTC
        btc_value = btc_balance * self.crypto_data["BTC"]["price"]
        total_portfolio = usd_balance + btc_value + total_crypto_value
        
        print(f"\n{Colors.MONEY}üíº –í–ê–® –ü–û–†–¢–§–ï–õ–¨:{Colors.RESET}")
        print(f"   üíµ USD: {format_currency(usd_balance, 'USD')}")
        print(f"   üü† BTC: {format_currency(btc_balance, 'BTC')} ({format_currency(btc_value, 'USD')})")
        
        if total_crypto_value > 0:
            print(f"   üìä –ê–ª—å—Ç–∫–æ–∏–Ω—ã: {format_currency(total_crypto_value, 'USD')}")
        
        print(f"   {Colors.SUCCESS}üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(total_portfolio, 'USD')}{Colors.RESET}")
    
    def _show_crypto_rates(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã"""
        print(f"\n{Colors.INFO}üìà –¢–ï–ö–£–©–ò–ï –ö–£–†–°–´:{Colors.RESET}")
        print(f"\n   {'–í–∞–ª—é—Ç–∞':<8} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<12} {'–¶–µ–Ω–∞ USD':<12} {'24—á':<10} {'–í–∞—à –±–∞–ª–∞–Ω—Å':<15}")
        print(f"   {'-' * 65}")
        
        for symbol, data in self.crypto_data.items():
            change_24h = self.get_24h_change(symbol)
            
            # –¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if change_24h > 0:
                change_color = Colors.SUCCESS
                change_icon = "üìà"
            else:
                change_color = Colors.ERROR
                change_icon = "üìâ"
            
            # –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
            if symbol == "BTC":
                player_balance = game_state.get_stat("btc_balance", 0)
            else:
                player_balance = game_state.get_stat(symbol, 0)
            
            balance_usd = player_balance * data["price"] if player_balance > 0 else 0
            
            print(f"   {Colors.WARNING}{symbol:<8}{Colors.RESET} {data['name']:<12} "
                  f"${data['price']:<11.2f} {change_icon} {change_color}{change_24h:+.1f}%{Colors.RESET}  ", end="")
            
            if player_balance > 0:
                print(f"{Colors.MONEY}{player_balance:.4f} (${balance_usd:.2f}){Colors.RESET}")
            else:
                print(f"{Colors.INFO}0{Colors.RESET}")
    
    def _show_operations_menu(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –æ–ø–µ—Ä–∞—Ü–∏–π"""
        print(f"\n{Colors.INFO}üí± –î–û–°–¢–£–ü–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò:{Colors.RESET}")
        print(f"   [B] –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
        print(f"   [S] –ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")
        print(f"   [C] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å BTC ‚Üî USD")
        print(f"   [R] –û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã")
        print(f"   [H] –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω")
        print(f"   [T] –¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã")
        print(f"   [P] –ê–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
        print(f"   [Q] –í—ã–π—Ç–∏")
    
    def _buy_crypto_menu(self) -> None:
        """–ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        print(f"\n{Colors.SUCCESS}=== –ü–û–ö–£–ü–ö–ê –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ==={Colors.RESET}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        print(f"\n{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã:{Colors.RESET}")
        symbols = list(self.crypto_data.keys())
        for i, symbol in enumerate(symbols, 1):
            price = self.crypto_data[symbol]["price"]
            change = self.get_24h_change(symbol)
            change_color = Colors.SUCCESS if change > 0 else Colors.ERROR
            print(f"   {i}. {symbol} - {self.crypto_data[symbol]['name']} "
                  f"(${price:.2f}, {change_color}{change:+.1f}%{Colors.RESET})")
        
        choice = input(f"\n{Colors.PROMPT}–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É (1-{len(symbols)}) –∏–ª–∏ —Å–∏–º–≤–æ–ª: {Colors.RESET}").upper()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π –≤—ã–±–æ—Ä –≤ —Å–∏–º–≤–æ–ª
        if choice.isdigit() and 1 <= int(choice) <= len(symbols):
            symbol = symbols[int(choice) - 1]
        elif choice in self.crypto_data:
            symbol = choice
        else:
            print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.RESET}")
            return
        
        self._buy_crypto(symbol)
    
    def _buy_crypto(self, symbol: str) -> None:
        """–ü–æ–∫—É–ø–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
        price = self.crypto_data[symbol]["price"]
        usd_balance = game_state.get_stat("usd_balance", 0)
        
        print(f"\n{Colors.INFO}–ü–æ–∫—É–ø–∫–∞ {symbol} –ø–æ –∫—É—Ä—Å—É ${price:.2f}{Colors.RESET}")
        print(f"{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω–æ: {format_currency(usd_balance, 'USD')}{Colors.RESET}")
        
        amount_input = input(f"{Colors.PROMPT}–°—É–º–º–∞ –≤ USD (–∏–ª–∏ 'max' –¥–ª—è –≤—Å–µ–π —Å—É–º–º—ã): {Colors.RESET}")
        
        try:
            if amount_input.lower() == 'max':
                amount_usd = usd_balance
            else:
                amount_usd = float(amount_input)
        except ValueError:
            print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞{Colors.RESET}")
            return

        if amount_usd < 10:  # –ë—ã–ª–æ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            print(f"{Colors.ERROR}–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏: 10 USD{Colors.RESET}")
            return
        
        # –ö–æ–º–∏—Å—Å–∏—è 1%
        fee = amount_usd * 0.02
        total_cost = amount_usd + fee
        
        if total_cost > usd_balance:
            print(f"{Colors.ERROR}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USD —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏{Colors.RESET}")
            return
        
        crypto_amount = amount_usd / price
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n{Colors.WARNING}–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:{Colors.RESET}")
        print(f"   –ü–æ–∫—É–ø–∫–∞: {crypto_amount:.4f} {symbol}")
        print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_currency(amount_usd, 'USD')}")
        print(f"   –ö–æ–º–∏—Å—Å–∏—è: {format_currency(fee, 'USD')} (1%)")
        print(f"   –ò—Ç–æ–≥–æ: {format_currency(total_cost, 'USD')}")
        
        confirm = input(f"\n{Colors.PROMPT}–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? (y/n): {Colors.RESET}").lower()
        
        if confirm == 'y':
            game_state.modify_stat("usd_balance", -total_cost)
            
            if symbol == "BTC":
                game_state.modify_stat("btc_balance", crypto_amount)
            else:
                current = game_state.get_stat(symbol, 0)
                game_state.set_stat(symbol, current + crypto_amount)
            
            audio_system.play_sound("coin")
            print(f"\n{Colors.SUCCESS}‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {crypto_amount:.4f} {symbol}!{Colors.RESET}")
            print(f"{Colors.INFO}–ö–æ–º–∏—Å—Å–∏—è: {format_currency(fee, 'USD')}{Colors.RESET}")
        else:
            print(f"{Colors.WARNING}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞{Colors.RESET}")
    
    def _sell_crypto_menu(self) -> None:
        """–ú–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        print(f"\n{Colors.ERROR}=== –ü–†–û–î–ê–ñ–ê –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–´ ==={Colors.RESET}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
        available_cryptos = []
        print(f"\n{Colors.INFO}–í–∞—à–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:{Colors.RESET}")
        
        for symbol in self.crypto_data:
            if symbol == "BTC":
                balance = game_state.get_stat("btc_balance", 0)
            else:
                balance = game_state.get_stat(symbol, 0)
            
            if balance > 0:
                available_cryptos.append(symbol)
                value_usd = balance * self.crypto_data[symbol]["price"]
                change = self.get_24h_change(symbol)
                change_color = Colors.SUCCESS if change > 0 else Colors.ERROR
                print(f"   {len(available_cryptos)}. {symbol}: {balance:.4f} "
                      f"({format_currency(value_usd, 'USD')}, {change_color}{change:+.1f}%{Colors.RESET})")
        
        if not available_cryptos:
            print(f"{Colors.WARNING}–£ –≤–∞—Å –Ω–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏{Colors.RESET}")
            return
        
        choice = input(f"\n{Colors.PROMPT}–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É (1-{len(available_cryptos)}) –∏–ª–∏ —Å–∏–º–≤–æ–ª: {Colors.RESET}").upper()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±–æ—Ä
        if choice.isdigit() and 1 <= int(choice) <= len(available_cryptos):
            symbol = available_cryptos[int(choice) - 1]
        elif choice in available_cryptos:
            symbol = choice
        else:
            print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.RESET}")
            return
        
        self._sell_crypto(symbol)
    
    def _sell_crypto(self, symbol: str) -> None:
        """–ü—Ä–æ–¥–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
        if symbol == "BTC":
            balance = game_state.get_stat("btc_balance", 0)
        else:
            balance = game_state.get_stat(symbol, 0)
        
        price = self.crypto_data[symbol]["price"]
        
        print(f"\n{Colors.INFO}–ü—Ä–æ–¥–∞–∂–∞ {symbol} –ø–æ –∫—É—Ä—Å—É ${price:.2f}{Colors.RESET}")
        print(f"{Colors.INFO}–î–æ—Å—Ç—É–ø–Ω–æ: {balance:.4f} {symbol}{Colors.RESET}")
        
        amount_input = input(f"{Colors.PROMPT}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {symbol} (–∏–ª–∏ 'max' –¥–ª—è –≤—Å–µ–≥–æ): {Colors.RESET}")
        
        try:
            if amount_input.lower() == 'max':
                amount = balance
            else:
                amount = float(amount_input)
        except ValueError:
            print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ{Colors.RESET}")
            return

        if amount < 0.001:  # –î–ª—è BTC –æ–ø–µ—Ä–∞—Ü–∏–π
            print(f"{Colors.ERROR}–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.001 BTC{Colors.RESET}")
            return
        
        if amount > balance:
            print(f"{Colors.ERROR}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {symbol}{Colors.RESET}")
            return
        
        usd_amount = amount * price
        fee = usd_amount * 0.01  # –ö–æ–º–∏—Å—Å–∏—è 1%
        final_amount = usd_amount - fee
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        print(f"\n{Colors.WARNING}–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:{Colors.RESET}")
        print(f"   –ü—Ä–æ–¥–∞–∂–∞: {amount:.4f} {symbol}")
        print(f"   –í—ã—Ä—É—á–∫–∞: {format_currency(usd_amount, 'USD')}")
        print(f"   –ö–æ–º–∏—Å—Å–∏—è: {format_currency(fee, 'USD')} (1%)")
        print(f"   –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {format_currency(final_amount, 'USD')}")
        
        confirm = input(f"\n{Colors.PROMPT}–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? (y/n): {Colors.RESET}").lower()
        
        if confirm == 'y':
            if symbol == "BTC":
                game_state.modify_stat("btc_balance", -amount)
            else:
                current = game_state.get_stat(symbol, 0)
                game_state.set_stat(symbol, current - amount)
            
            game_state.modify_stat("usd_balance", final_amount)
            
            audio_system.play_sound("sell")
            print(f"\n{Colors.SUCCESS}‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ {amount:.4f} {symbol}!{Colors.RESET}")
            print(f"{Colors.INFO}–ü–æ–ª—É—á–µ–Ω–æ: {format_currency(final_amount, 'USD')}{Colors.RESET}")
        else:
            print(f"{Colors.WARNING}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞{Colors.RESET}")
    
    def _convert_menu(self) -> None:
        """–ú–µ–Ω—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ BTC/USD"""
        print(f"\n{Colors.WARNING}=== –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø BTC ‚Üî USD ==={Colors.RESET}")
        
        btc_price = self.crypto_data["BTC"]["price"]
        btc_balance = game_state.get_stat("btc_balance", 0)
        usd_balance = game_state.get_stat("usd_balance", 0)
        
        print(f"\n{Colors.INFO}–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: 1 BTC = ${btc_price:.2f}{Colors.RESET}")
        print(f"–í–∞—à–∏ –±–∞–ª–∞–Ω—Å—ã:")
        print(f"   BTC: {btc_balance:.4f}")
        print(f"   USD: ${usd_balance:.2f}")
        
        print(f"\n   1. BTC ‚Üí USD")
        print(f"   2. USD ‚Üí BTC")
        
        choice = input(f"\n{Colors.PROMPT}–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {Colors.RESET}")
        
        if choice == '1':
            amount = input(f"{Colors.PROMPT}–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC: {Colors.RESET}")
            try:
                self.convert_btc_to_usd(float(amount))
            except ValueError:
                print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ{Colors.RESET}")
        elif choice == '2':
            amount = input(f"{Colors.PROMPT}–°—É–º–º–∞ USD: {Colors.RESET}")
            try:
                self.convert_usd_to_btc(float(amount))
            except ValueError:
                print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞{Colors.RESET}")
        else:
            print(f"{Colors.ERROR}‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä{Colors.RESET}")
    
    def convert_btc_to_usd(self, amount: float) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç BTC –≤ USD"""
        if amount <= 0:
            print(f"{Colors.ERROR}‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º{Colors.RESET}")
            return False
        
        btc_balance = game_state.get_stat("btc_balance", 0)
        if amount > btc_balance:
            print(f"{Colors.ERROR}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ BTC{Colors.RESET}")
            return False
        
        btc_price = self.crypto_data["BTC"]["price"]
        usd_amount = amount * btc_price
        
        game_state.modify_stat("btc_balance", -amount)
        game_state.modify_stat("usd_balance", usd_amount)
        
        audio_system.play_sound("coin")
        print(f"{Colors.SUCCESS}‚úÖ –û–±–º–µ–Ω—è–Ω–æ {amount:.4f} BTC –Ω–∞ ${usd_amount:.2f}{Colors.RESET}")
        return True
    
    def convert_usd_to_btc(self, amount: float) -> bool:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç USD –≤ BTC"""
        if amount <= 0:
            print(f"{Colors.ERROR}‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π{Colors.RESET}")
            return False
        
        usd_balance = game_state.get_stat("usd_balance", 0)
        if amount > usd_balance:
            print(f"{Colors.ERROR}‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USD{Colors.RESET}")
            return False
        
        btc_price = self.crypto_data["BTC"]["price"]
        btc_amount = amount / btc_price
        
        game_state.modify_stat("usd_balance", -amount)
        game_state.modify_stat("btc_balance", btc_amount)
        
        audio_system.play_sound("coin")
        print(f"{Colors.SUCCESS}‚úÖ –û–±–º–µ–Ω—è–Ω–æ ${amount:.2f} –Ω–∞ {btc_amount:.4f} BTC{Colors.RESET}")
        return True
    
    def _show_price_history(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω"""
        print(f"\n{Colors.INFO}üìä –ò–°–¢–û–†–ò–Ø –¶–ï–ù (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è):{Colors.RESET}")
        
        for symbol, history in self.price_history.items():
            if len(history) < 2:
                continue
            
            print(f"\n{Colors.WARNING}{symbol} ({self.crypto_data[symbol]['name']}):{Colors.RESET}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ü–µ–Ω
            recent_prices = history[-5:]
            trend_indicators = []
            
            for i in range(1, len(recent_prices)):
                if recent_prices[i] > recent_prices[i-1]:
                    trend_indicators.append("‚Üó")
                elif recent_prices[i] < recent_prices[i-1]:
                    trend_indicators.append("‚Üò")
                else:
                    trend_indicators.append("‚Üí")
            
            price_str = f"   ${recent_prices[0]:.2f}"
            for i, price in enumerate(recent_prices[1:], 0):
                color = Colors.SUCCESS if trend_indicators[i] == "‚Üó" else Colors.ERROR if trend_indicators[i] == "‚Üò" else Colors.INFO
                price_str += f" {color}{trend_indicators[i]} ${price:.2f}{Colors.RESET}"
            
            print(price_str)
        
        input(f"\n{Colors.INFO}–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def _show_trading_tips(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã"""
        tips = [
            "üí° –ü–æ–∫—É–ø–∞–π—Ç–µ –Ω–∞ –ø–∞–¥–µ–Ω–∏–∏, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –Ω–∞ —Ä–æ—Å—Ç–µ",
            "‚ö†Ô∏è –ù–µ –≤–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –≤—Å–µ –¥–µ–Ω—å–≥–∏ –≤ –æ–¥–Ω—É –≤–∞–ª—é—Ç—É",
            "üìà –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏ - –æ–Ω–∏ –º–æ–≥—É—Ç –¥–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É",
            "üïí –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ - –∫–æ–≥–¥–∞ —Ä—ã–Ω–æ–∫ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω",
            "üí∞ –ü–æ–º–Ω–∏—Ç–µ –ø—Ä–æ –∫–æ–º–∏—Å—Å–∏–∏ - –æ–Ω–∏ —Å–Ω–∏–∂–∞—é—Ç –ø—Ä–∏–±—ã–ª—å",
            "üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Ü–µ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏",
            "üìä –ò–∑—É—á–∞–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏–π",
            "üö´ –ù–µ —Ç–æ—Ä–≥—É–π—Ç–µ –Ω–∞ —ç–º–æ—Ü–∏—è—Ö"
        ]
        
        print(f"\n{Colors.INFO}üí° –¢–û–†–ì–û–í–´–ï –°–û–í–ï–¢–´:{Colors.RESET}")
        for tip in random.sample(tips, 4):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞
            print(f"   {tip}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Ä—ã–Ω–∫–∞
        print(f"\n{Colors.WARNING}üìä –ê–ù–ê–õ–ò–ó –†–´–ù–ö–ê:{Colors.RESET}")
        
        growing_coins = []
        falling_coins = []
        
        for symbol in self.crypto_data:
            change = self.get_24h_change(symbol)
            if change > 5:
                growing_coins.append((symbol, change))
            elif change < -5:
                falling_coins.append((symbol, change))
        
        if growing_coins:
            print(f"   {Colors.SUCCESS}üìà –†–∞—Å—Ç—É—â–∏–µ –≤–∞–ª—é—Ç—ã:{Colors.RESET}")
            for symbol, change in sorted(growing_coins, key=lambda x: x[1], reverse=True):
                print(f"      {symbol}: +{change:.1f}%")
        
        if falling_coins:
            print(f"   {Colors.ERROR}üìâ –ü–∞–¥–∞—é—â–∏–µ –≤–∞–ª—é—Ç—ã:{Colors.RESET}")
            for symbol, change in sorted(falling_coins, key=lambda x: x[1]):
                print(f"      {symbol}: {change:.1f}%")
        
        if not growing_coins and not falling_coins:
            print(f"   {Colors.INFO}–†—ã–Ω–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª–µ–Ω{Colors.RESET}")
        
        input(f"\n{Colors.INFO}–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def _show_portfolio_analysis(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        print(f"\n{Colors.INFO}üìä –ê–ù–ê–õ–ò–ó –ü–û–†–¢–§–ï–õ–Ø:{Colors.RESET}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤
        usd_balance = game_state.get_stat("usd_balance", 0)
        btc_balance = game_state.get_stat("btc_balance", 0)
        btc_value = btc_balance * self.crypto_data["BTC"]["price"]
        
        total_crypto_value = btc_value
        crypto_breakdown = {"BTC": btc_value}
        
        for symbol in ["ETH", "LTC", "XRP", "DOGE"]:
            amount = game_state.get_stat(symbol, 0)
            if amount > 0:
                value = amount * self.crypto_data[symbol]["price"]
                total_crypto_value += value
                crypto_breakdown[symbol] = value
        
        total_portfolio = usd_balance + total_crypto_value
        
        if total_portfolio == 0:
            print(f"   {Colors.WARNING}–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç{Colors.RESET}")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        print(f"\n   {Colors.SUCCESS}–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_portfolio:.2f}{Colors.RESET}")
        print(f"\n   –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤:")
        
        if usd_balance > 0:
            usd_percent = (usd_balance / total_portfolio) * 100
            print(f"      üíµ USD: {usd_percent:.1f}% (${usd_balance:.2f})")
        
        for symbol, value in crypto_breakdown.items():
            if value > 0:
                percent = (value / total_portfolio) * 100
                print(f"      üü† {symbol}: {percent:.1f}% (${value:.2f})")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\n   {Colors.WARNING}–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:{Colors.RESET}")
        
        cash_percent = (usd_balance / total_portfolio) * 100 if total_portfolio > 0 else 0
        
        if cash_percent > 70:
            print(f"      ‚Ä¢ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–∞–ª–∏—á–Ω—ã—Ö - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –∫—Ä–∏–ø—Ç—É")
        elif cash_percent < 10:
            print(f"      ‚Ä¢ –ú–∞–ª–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ - –æ—Å—Ç–∞–≤—å—Ç–µ —á–∞—Å—Ç—å –≤ USD –¥–ª—è –º–∞–Ω–µ–≤—Ä–æ–≤")
        
        if len(crypto_breakdown) == 1:
            print(f"      ‚Ä¢ –î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å - –∫—É–ø–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã")
        
        btc_percent = (btc_value / total_portfolio) * 100 if total_portfolio > 0 else 0
        if btc_percent > 80:
            print(f"      ‚Ä¢ –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è –¥–æ–ª—è BTC - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–∫–æ–∏–Ω—ã")
        
        input(f"\n{Colors.INFO}–ù–∞–∂–º–∏—Ç–µ ENTER –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Colors.RESET}")
    
    def get_crypto_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
        return self.crypto_data.get(symbol, {}).get("price", 0.0)
    
    def get_portfolio_value(self) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        total = game_state.get_stat("usd_balance", 0)
        
        for symbol in self.crypto_data:
            if symbol == "BTC":
                amount = game_state.get_stat("btc_balance", 0)
            else:
                amount = game_state.get_stat(symbol, 0)
            
            total += amount * self.crypto_data[symbol]["price"]
        
        return total

    def simulate_market_event(self, event_type: str) -> None:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –° –û–¢–ü–†–ê–í–ö–û–ô –°–û–ë–´–¢–ò–ô"""
        if event_type == "bull_run":
            # –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫ - –≤—Å–µ —Ä–∞—Å—Ç–µ—Ç
            for symbol in self.crypto_data:
                old_price = self.crypto_data[symbol]["price"]
                multiplier = random.uniform(1.1, 1.3)
                new_price = old_price * multiplier
                self.crypto_data[symbol]["price"] = new_price

                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–ë–´–¢–ò–ï
                change_percent = ((new_price - old_price) / old_price) * 100
                market_event = CryptoMarketChangeEvent(symbol, old_price, new_price, change_percent)
                event_system.dispatch(market_event)

            print(f"{Colors.SUCCESS}üìà –ë—ã—á–∏–π —Ä—ã–Ω–æ–∫! –í—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Ä–∞—Å—Ç—É—Ç!{Colors.RESET}")

        elif event_type == "bear_market":
            # –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫ - –≤—Å–µ –ø–∞–¥–∞–µ—Ç
            for symbol in self.crypto_data:
                old_price = self.crypto_data[symbol]["price"]
                multiplier = random.uniform(0.7, 0.9)
                new_price = old_price * multiplier
                self.crypto_data[symbol]["price"] = new_price

                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–ë–´–¢–ò–ï
                change_percent = ((new_price - old_price) / old_price) * 100
                market_event = CryptoMarketChangeEvent(symbol, old_price, new_price, change_percent)
                event_system.dispatch(market_event)

            print(f"{Colors.ERROR}üìâ –ú–µ–¥–≤–µ–∂–∏–π —Ä—ã–Ω–æ–∫! –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø–∞–¥–∞—é—Ç!{Colors.RESET}")

        elif event_type == "volatility":
            # –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            self.market_volatility = 0.15  # 15%
            print(f"{Colors.WARNING}‚ö° –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ!{Colors.RESET}")

        elif event_type == "stability":
            # –°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫
            self.market_volatility = 0.02  # 2%
            print(f"{Colors.INFO}üìä –†—ã–Ω–æ–∫ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è{Colors.RESET}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
crypto_system = CryptoSystem()
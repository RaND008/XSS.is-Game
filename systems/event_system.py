import collections
from typing import Callable, Any, Dict, Type
import time
from ui.colors import XSSColors
from core.game_state import game_state
class Event:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ –∏–≥—Ä–µ."""
    def __init__(self, event_type: str, data: Dict[str, Any] = None):
        self.event_type = event_type
        self.data = data if data is not None else {}

    def __repr__(self):
        return f"<{self.event_type} Event: {self.data}>"

# --- –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π ---
class MissionCompletedEvent(Event):
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∏—Å—Å–∏–∏."""
    def __init__(self, mission_id: str, reward_btc: int, reward_exp: int, heat_gain: int):
        super().__init__("MissionCompleted", {
            "mission_id": mission_id,
            "reward_btc": reward_btc,
            "reward_exp": reward_exp,
            "heat_gain": heat_gain
        })

class NodeCompromisedEvent(Event):
    """–°–æ–±—ã—Ç–∏–µ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ —Å–µ—Ç–µ–≤–æ–≥–æ —É–∑–ª–∞."""
    def __init__(self, node_address: str, node_name: str, security_level: int):
        super().__init__("NodeCompromised", {
            "node_address": node_address,
            "node_name": node_name,
            "security_level": security_level
        })

class CryptoMarketChangeEvent(Event):
    """–°–æ–±—ã—Ç–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ-—Ä—ã–Ω–∫–µ."""
    def __init__(self, symbol: str, old_price: float, new_price: float, change_percent: float):
        super().__init__("CryptoMarketChange", {
            "symbol": symbol,
            "old_price": old_price,
            "new_price": new_price,
            "change_percent": change_percent
        })

class PlayerNotificationEvent(Event):
    """–°–æ–±—ã—Ç–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É."""
    def __init__(self, message: str, message_type: str = "info", duration: float = 3.0):
        super().__init__("PlayerNotification", {
            "message": message,
            "message_type": message_type, # e.g., "info", "warning", "success", "error"
            "duration": duration
        })

class EventSystem:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π."""
    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(EventSystem, cls).__new__(cls)
            cls._instance._listeners = collections.defaultdict(list)
        return cls._instance

    def register_listener(self, event_type: Type[Event], listener: Callable[[Event], None]):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è."""
        if not issubclass(event_type, Event):
            raise ValueError("event_type –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥–∫–ª–∞—Å—Å–æ–º Event")
        self._listeners[event_type].append(listener)
        # print(f"[EventSystem] –°–ª—É—à–∞—Ç–µ–ª—å {listener.__name__} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è {event_type.__name__}")

    def unregister_listener(self, event_type: Type[Event], listener: Callable[[Event], None]):
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–ª—É—à–∞—Ç–µ–ª—è."""
        if listener in self._listeners[event_type]:
            self._listeners[event_type].remove(listener)
            # print(f"[EventSystem] –°–ª—É—à–∞—Ç–µ–ª—å {listener.__name__} –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {event_type.__name__}")

    def dispatch(self, event: Event):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤—Å–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ª—É—à–∞—Ç–µ–ª—è–º."""
        # print(f"[EventSystem] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è: {event}")
        for listener in self._listeners[type(event)]:
            try:
                listener(event)
            except Exception as e:
                print(f"[{event.event_type} EventSystem ERROR] –û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ {listener.__name__}: {e}")


"""
–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–∏—Å—Å–∏–π
–î–æ–±–∞–≤–ª—è–µ–º –≤ event_system.py
"""


# –ù–æ–≤—ã–µ —Ç–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–∏—Å—Å–∏–π

class MissionStageCompletedEvent(Event):
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –º–∏—Å—Å–∏–∏"""

    def __init__(self, mission_id: str, stage_name: str, stage_number: int, total_stages: int):
        super().__init__("MissionStageCompleted", {
            "mission_id": mission_id,
            "stage_name": stage_name,
            "stage_number": stage_number,
            "total_stages": total_stages
        })


class TeamMemberRecruitedEvent(Event):
    """–°–æ–±—ã—Ç–∏–µ –Ω–∞–π–º–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""

    def __init__(self, mission_id: str, member_name: str, role: str, skill_level: int):
        super().__init__("TeamMemberRecruited", {
            "mission_id": mission_id,
            "member_name": member_name,
            "role": role,
            "skill_level": skill_level
        })


class MoralChoiceMadeEvent(Event):
    """–°–æ–±—ã—Ç–∏–µ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""

    def __init__(self, mission_id: str, choice_id: str, reputation_impact: int):
        super().__init__("MoralChoiceMade", {
            "mission_id": mission_id,
            "choice_id": choice_id,
            "reputation_impact": reputation_impact
        })


class MissionTimeWarningEvent(Event):
    """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤—Ä–µ–º–µ–Ω–∏ –º–∏—Å—Å–∏–∏"""

    def __init__(self, mission_id: str, time_remaining: float, warning_level: str):
        super().__init__("MissionTimeWarning", {
            "mission_id": mission_id,
            "time_remaining": time_remaining,
            "warning_level": warning_level  # "low", "critical", "expired"
        })


class RandomMissionEvent(Event):
    """–°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤–æ –≤—Ä–µ–º—è –º–∏—Å—Å–∏–∏"""

    def __init__(self, mission_id: str, event_type: str, description: str, effects: dict):
        super().__init__("RandomMissionEvent", {
            "mission_id": mission_id,
            "event_type": event_type,
            "description": description,
            "effects": effects
        })


class TeamSynergyChangedEvent(Event):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∏–Ω–µ—Ä–≥–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""

    def __init__(self, mission_id: str, old_synergy: int, new_synergy: int, reason: str):
        super().__init__("TeamSynergyChanged", {
            "mission_id": mission_id,
            "old_synergy": old_synergy,
            "new_synergy": new_synergy,
            "reason": reason
        })


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è UI –∏ –ª–æ–≥–∏–∫–∏

def handle_mission_stage_completed(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ –º–∏—Å—Å–∏–∏"""
    from ui.effects import show_stage_completion_visual
    from systems.audio import audio_system

    data = event.data
    show_stage_completion_visual(
        data["stage_name"],
        data["stage_number"],
        data["total_stages"]
    )

    audio_system.play_sound("stage_complete")


def handle_team_member_recruited(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–π–º–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
    from ui.colors import XSSColors

    data = event.data
    skill_color = XSSColors.SUCCESS if data["skill_level"] >= 7 else XSSColors.WARNING

    print(f"\n{XSSColors.SUCCESS}üë• –í –∫–æ–º–∞–Ω–¥—É –ø—Ä–∏–Ω—è—Ç: {data['member_name']}{XSSColors.RESET}")
    print(f"   –†–æ–ª—å: {data['role']}")
    print(f"   –ù–∞–≤—ã–∫: {skill_color}{data['skill_level']}/10{XSSColors.RESET}")


def handle_moral_choice_made(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞"""
    from ui.colors import XSSColors
    from systems.audio import audio_system

    data = event.data
    impact = data["reputation_impact"]

    if impact > 0:
        print(f"{XSSColors.SUCCESS}‚öñÔ∏è –í–∞—à –≤—ã–±–æ—Ä –ø–æ–≤—ã—Å–∏–ª –≤–∞—à—É —Ä–µ–ø—É—Ç–∞—Ü–∏—é{XSSColors.RESET}")
        audio_system.play_sound("reputation_gain")
    elif impact < 0:
        print(f"{XSSColors.ERROR}‚öñÔ∏è –í–∞—à –≤—ã–±–æ—Ä –ø–æ–Ω–∏–∑–∏–ª –≤–∞—à—É —Ä–µ–ø—É—Ç–∞—Ü–∏—é{XSSColors.RESET}")
        audio_system.play_sound("reputation_loss")
    else:
        print(f"{XSSColors.INFO}‚öñÔ∏è –í–∞—à –≤—ã–±–æ—Ä –Ω–µ –ø–æ–≤–ª–∏—è–ª –Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—é{XSSColors.RESET}")


def handle_mission_time_warning(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ –≤—Ä–µ–º–µ–Ω–∏"""
    from ui.colors import XSSColors
    from ui.effects import pulse_text
    from systems.audio import audio_system

    data = event.data
    warning_level = data["warning_level"]
    time_remaining = data["time_remaining"]

    if warning_level == "critical":
        pulse_text(f"‚è∞ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –í–†–ï–ú–Ø: {time_remaining:.1f}—á!", XSSColors.ERROR, 3)
        audio_system.play_sound("alert")
    elif warning_level == "low":
        print(f"{XSSColors.WARNING}‚ö†Ô∏è –ú–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {time_remaining:.1f}—á{XSSColors.RESET}")
        audio_system.play_sound("warning")
    elif warning_level == "expired":
        pulse_text("‚è∞ –í–†–ï–ú–Ø –ò–°–¢–ï–ö–õ–û!", XSSColors.ERROR, 5)
        audio_system.play_sound("fail")


def handle_random_mission_event(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    from ui.effects import show_mission_event_visual
    from systems.audio import audio_system

    show_mission_event_visual(event.data)
    audio_system.play_sound("event")


def handle_team_synergy_changed(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω–µ—Ä–≥–∏–∏ –∫–æ–º–∞–Ω–¥—ã"""
    from ui.colors import XSSColors

    data = event.data
    old_synergy = data["old_synergy"]
    new_synergy = data["new_synergy"]
    reason = data["reason"]

    if new_synergy > old_synergy:
        color = XSSColors.SUCCESS
        arrow = "‚ÜóÔ∏è"
    elif new_synergy < old_synergy:
        color = XSSColors.ERROR
        arrow = "‚ÜòÔ∏è"
    else:
        color = XSSColors.INFO
        arrow = "‚û°Ô∏è"

    print(f"\n{color}ü§ù –°–∏–Ω–µ—Ä–≥–∏—è –∫–æ–º–∞–Ω–¥—ã: {old_synergy}% {arrow} {new_synergy}%{XSSColors.RESET}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")


def handle_crypto_market_change(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞"""
    from ui.colors import XSSColors
    from systems.audio import audio_system

    data = event.data
    symbol = data["symbol"]
    change_percent = data["change_percent"]
    old_price = data["old_price"]
    new_price = data["new_price"]

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–±–æ–ª—å—à–µ 10%)
    if abs(change_percent) > 10:
        if change_percent > 0:
            color = XSSColors.SUCCESS
            icon = "üìà"
            direction = "–†–û–°–¢"
            try:
                audio_system.play_sound("coin")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–≤—É–∫–∞
        else:
            color = XSSColors.ERROR
            icon = "üìâ"
            direction = "–ü–ê–î–ï–ù–ò–ï"
            try:
                audio_system.play_sound("warning")
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–≤—É–∫–∞

        print(f"\n{color}{icon} –ö–†–ò–ü–¢–û –°–û–ë–´–¢–ò–ï: {symbol} {direction} {abs(change_percent):.1f}%{XSSColors.RESET}")
        print(f"   –¶–µ–Ω–∞: ${old_price:.2f} ‚Üí ${new_price:.2f}")

    # –î–ª—è –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (>20%) –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if abs(change_percent) > 20:
        if change_percent > 0:
            print(f"   {XSSColors.SUCCESS}üí∞ –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!{XSSColors.RESET}")
        else:
            print(f"   {XSSColors.WARNING}üõí –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –Ω–∏–∑–∞—Ö!{XSSColors.RESET}")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
def register_mission_event_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–∏—Å—Å–∏–π"""
    event_system.register_listener(MissionStageCompletedEvent, handle_mission_stage_completed)
    event_system.register_listener(TeamMemberRecruitedEvent, handle_team_member_recruited)
    event_system.register_listener(MoralChoiceMadeEvent, handle_moral_choice_made)
    event_system.register_listener(MissionTimeWarningEvent, handle_mission_time_warning)
    event_system.register_listener(RandomMissionEvent, handle_random_mission_event)
    event_system.register_listener(TeamSynergyChangedEvent, handle_team_synergy_changed)
    event_system.register_listener(CryptoMarketChangeEvent, handle_crypto_market_change)


# –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–∏—Å—Å–∏–π
class MissionNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –º–∏—Å—Å–∏–π"""

    def __init__(self):
        self.active_notifications = []
        self.notification_history = []

    def add_notification(self, notification_type: str, message: str,
                         priority: str = "normal", duration: int = 10):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        notification = {
            "type": notification_type,
            "message": message,
            "priority": priority,
            "timestamp": time.time(),
            "duration": duration,
            "id": len(self.notification_history)
        }

        self.active_notifications.append(notification)
        self.notification_history.append(notification)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        if priority == "high":
            self._display_notification(notification)

    def _display_notification(self, notification):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        from ui.colors import XSSColors

        priority_colors = {
            "low": XSSColors.INFO,
            "normal": XSSColors.WARNING,
            "high": XSSColors.ERROR
        }

        type_icons = {
            "mission": "üìã",
            "team": "üë•",
            "time": "‚è∞",
            "event": "‚ö°",
            "choice": "‚öñÔ∏è"
        }

        color = priority_colors.get(notification["priority"], XSSColors.INFO)
        icon = type_icons.get(notification["type"], "‚ÑπÔ∏è")

        print(f"\n{color}‚îå‚îÄ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï ‚îÄ‚îê{XSSColors.RESET}")
        print(f"{color}‚îÇ {icon} {notification['message']:<20} ‚îÇ{XSSColors.RESET}")
        print(f"{color}‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò{XSSColors.RESET}")

    def update_notifications(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        current_time = time.time()

        # –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.active_notifications = [
            n for n in self.active_notifications
            if current_time - n["timestamp"] < n["duration"]
        ]

    def show_active_notifications(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        from ui.colors import XSSColors

        if not self.active_notifications:
            print(f"{XSSColors.INFO}–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π{XSSColors.RESET}")
            return

        print(f"\n{XSSColors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –ê–ö–¢–ò–í–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{XSSColors.RESET}")

        for notification in sorted(self.active_notifications, key=lambda x: x["priority"], reverse=True):
            self._display_notification(notification)

    def clear_all_notifications(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.active_notifications.clear()
        print(f"{XSSColors.SUCCESS}‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã{XSSColors.RESET}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
mission_notifications = MissionNotificationSystem()


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∏—Å—Å–∏–π
class MissionEventManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–±—ã—Ç–∏–π –¥–ª—è –º–∏—Å—Å–∏–π"""

    def __init__(self, mission_system):
        self.mission_system = mission_system
        self.event_handlers = {}
        self._setup_event_handlers()

    def _setup_event_handlers(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        self.event_handlers = {
            "stage_completed": self._handle_stage_completed,
            "team_recruited": self._handle_team_recruited,
            "moral_choice": self._handle_moral_choice,
            "time_warning": self._handle_time_warning,
            "random_event": self._handle_random_event,
            "mission_failed": self._handle_mission_failed,
            "mission_completed": self._handle_mission_completed
        }

    def trigger_event(self, event_type: str, **kwargs):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ"""
        if event_type in self.event_handlers:
            self.event_handlers[event_type](**kwargs)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
        self._dispatch_global_event(event_type, **kwargs)

    def _dispatch_global_event(self, event_type: str, **kwargs):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        event_classes = {
            "stage_completed": MissionStageCompletedEvent,
            "team_recruited": TeamMemberRecruitedEvent,
            "moral_choice": MoralChoiceMadeEvent,
            "time_warning": MissionTimeWarningEvent,
            "random_event": RandomMissionEvent,
            "synergy_changed": TeamSynergyChangedEvent
        }

        if event_type in event_classes:
            event_class = event_classes[event_type]
            event = event_class(**kwargs)
            event_system.dispatch(event)

    def _handle_stage_completed(self, mission_id: str, stage_name: str,
                                stage_number: int, total_stages: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        mission_notifications.add_notification(
            "mission",
            f"–≠—Ç–∞–ø '{stage_name}' –∑–∞–≤–µ—Ä—à–µ–Ω",
            "normal"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –º–∏—Å—Å–∏–∏
        if stage_number + 1 >= total_stages:
            mission_notifications.add_notification(
                "mission",
                "–í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –ú–∏—Å—Å–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏",
                "high"
            )

    def _handle_team_recruited(self, mission_id: str, member_name: str,
                               role: str, skill_level: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–π–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã"""
        mission_notifications.add_notification(
            "team",
            f"{member_name} ({role}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ",
            "normal"
        )

    def _handle_moral_choice(self, mission_id: str, choice_id: str,
                             reputation_impact: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–æ—Ä–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä"""
        if abs(reputation_impact) >= 20:
            priority = "high"
        elif abs(reputation_impact) >= 10:
            priority = "normal"
        else:
            priority = "low"

        impact_text = "–ø–æ–≤—ã—Å–∏–ª" if reputation_impact > 0 else "–ø–æ–Ω–∏–∑–∏–ª"
        mission_notifications.add_notification(
            "choice",
            f"–ú–æ—Ä–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä {impact_text} —Ä–µ–ø—É—Ç–∞—Ü–∏—é",
            priority
        )

    def _handle_time_warning(self, mission_id: str, time_remaining: float,
                             warning_level: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏"""
        priority_map = {
            "low": "normal",
            "critical": "high",
            "expired": "high"
        }

        mission_notifications.add_notification(
            "time",
            f"–í—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å: {time_remaining:.1f}—á",
            priority_map.get(warning_level, "normal")
        )

    def _handle_random_event(self, mission_id: str, event_type: str,
                             description: str, effects: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"""
        mission_notifications.add_notification(
            "event",
            f"–°–æ–±—ã—Ç–∏–µ: {description}",
            "high"
        )

    def _handle_mission_failed(self, mission_id: str, reason: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–∞–ª –º–∏—Å—Å–∏–∏"""
        mission_notifications.add_notification(
            "mission",
            f"–ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: {reason}",
            "high",
            duration=30
        )

    def _handle_mission_completed(self, mission_id: str, rewards: dict):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏"""
        mission_notifications.add_notification(
            "mission",
            "–ú–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
            "high",
            duration=20
        )

    def check_time_limits(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∏—Å—Å–∏–π"""
        active_mission = game_state.get_stat("active_mission")
        if not active_mission:
            return

        if active_mission in self.mission_system.mission_timers:
            start_time, time_limit = self.mission_system.mission_timers[active_mission]
            elapsed = (time.time() - start_time) / 3600
            remaining = time_limit - elapsed

            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏
            if remaining <= 0:
                self.trigger_event("time_warning",
                                   mission_id=active_mission,
                                   time_remaining=0,
                                   warning_level="expired")
            elif remaining <= time_limit * 0.1:  # 10% –≤—Ä–µ–º–µ–Ω–∏
                self.trigger_event("time_warning",
                                   mission_id=active_mission,
                                   time_remaining=remaining,
                                   warning_level="critical")
            elif remaining <= time_limit * 0.3:  # 30% –≤—Ä–µ–º–µ–Ω–∏
                self.trigger_event("time_warning",
                                   mission_id=active_mission,
                                   time_remaining=remaining,
                                   warning_level="low")


# –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∏—Å—Å–∏–π
class MissionStatistics:
    """–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.stats = {
            "missions_completed": 0,
            "missions_failed": 0,
            "total_btc_earned": 0,
            "total_reputation_gained": 0,
            "stages_completed": 0,
            "team_missions_completed": 0,
            "moral_choices_made": 0,
            "time_critical_missions": 0,
            "average_mission_time": 0,
            "success_rate": 0,
            "favorite_faction": None,
            "moral_profile": "Unknown"
        }
        self.mission_history = []

    def record_mission_completion(self, mission_id: str, mission_data: dict,
                                  completion_time: float, rewards: dict):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∏—Å—Å–∏–∏"""
        self.stats["missions_completed"] += 1
        self.stats["total_btc_earned"] += rewards.get("btc", 0)
        self.stats["total_reputation_gained"] += rewards.get("reputation", 0)

        if mission_data.get("type") == "team_mission":
            self.stats["team_missions_completed"] += 1

        if "time_limit" in mission_data:
            self.stats["time_critical_missions"] += 1

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.mission_history.append({
            "mission_id": mission_id,
            "completion_time": completion_time,
            "rewards": rewards,
            "timestamp": time.time(),
            "success": True
        })

        self._update_derived_stats()

    def record_mission_failure(self, mission_id: str, reason: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≤–∞–ª –º–∏—Å—Å–∏–∏"""
        self.stats["missions_failed"] += 1

        self.mission_history.append({
            "mission_id": mission_id,
            "reason": reason,
            "timestamp": time.time(),
            "success": False
        })

        self._update_derived_stats()

    def record_stage_completion(self, mission_id: str, stage_name: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç—Ç–∞–ø–∞"""
        self.stats["stages_completed"] += 1

    def record_moral_choice(self, choice_id: str, impact: int):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–æ—Ä–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä"""
        self.stats["moral_choices_made"] += 1
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

    def _update_derived_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        total_missions = self.stats["missions_completed"] + self.stats["missions_failed"]
        if total_missions > 0:
            self.stats["success_rate"] = (self.stats["missions_completed"] / total_missions) * 100

        # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∏—Å—Å–∏–π
        successful_missions = [m for m in self.mission_history if m.get("success")]
        if successful_missions:
            total_time = sum(m.get("completion_time", 0) for m in successful_missions)
            self.stats["average_mission_time"] = total_time / len(successful_missions)

    def get_performance_rating(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        success_rate = self.stats["success_rate"]

        if success_rate >= 90:
            return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π"
        elif success_rate >= 75:
            return "–≠–ª–∏—Ç–Ω—ã–π"
        elif success_rate >= 60:
            return "–û–ø—ã—Ç–Ω—ã–π"
        elif success_rate >= 40:
            return "–°—Ä–µ–¥–Ω–∏–π"
        else:
            return "–ù–æ–≤–∏—á–æ–∫"

    def show_detailed_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        from ui.colors import XSSColors

        print(f"\n{XSSColors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–°–°–ò–ô ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{XSSColors.RESET}")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        print(f"\n{XSSColors.INFO}üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:{XSSColors.RESET}")
        print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –º–∏—Å—Å–∏–π: {XSSColors.SUCCESS}{self.stats['missions_completed']}{XSSColors.RESET}")
        print(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ –º–∏—Å—Å–∏–π: {XSSColors.ERROR}{self.stats['missions_failed']}{XSSColors.RESET}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {XSSColors.WARNING}{self.stats['success_rate']:.1f}%{XSSColors.RESET}")
        print(f"   –†–µ–π—Ç–∏–Ω–≥: {XSSColors.SUCCESS}{self.get_performance_rating()}{XSSColors.RESET}")

        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        print(f"\n{XSSColors.MONEY}üí∞ –§–ò–ù–ê–ù–°–´:{XSSColors.RESET}")
        print(f"   –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ BTC: {XSSColors.MONEY}{self.stats['total_btc_earned']:.2f}{XSSColors.RESET}")
        print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: {XSSColors.REP}{self.stats['total_reputation_gained']}{XSSColors.RESET}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–∏—Å—Å–∏–∏
        print(f"\n{XSSColors.WARNING}üéØ –°–ü–ï–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø:{XSSColors.RESET}")
        print(f"   –ö–æ–º–∞–Ω–¥–Ω—ã—Ö –º–∏—Å—Å–∏–π: {self.stats['team_missions_completed']}")
        print(f"   –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {self.stats['time_critical_missions']}")
        print(f"   –ú–æ—Ä–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤: {self.stats['moral_choices_made']}")
        print(f"   –≠—Ç–∞–ø–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {self.stats['stages_completed']}")

        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        if self.stats['average_mission_time'] > 0:
            print(f"\n{XSSColors.INFO}‚è±Ô∏è –í–†–ï–ú–Ø:{XSSColors.RESET}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–∏—Å—Å–∏–∏: {self.stats['average_mission_time']:.1f} —á")

        print(f"\n{XSSColors.HEADER}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ{XSSColors.RESET}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
mission_statistics = MissionStatistics()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
def initialize_advanced_mission_systems(mission_system):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã –º–∏—Å—Å–∏–π"""
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    register_mission_event_handlers()

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–±—ã—Ç–∏–π –º–∏—Å—Å–∏–π
    mission_event_manager = MissionEventManager(mission_system)

    # –°–≤—è–∑—ã–≤–∞–µ–º —Å —Å–∏—Å—Ç–µ–º–æ–π –º–∏—Å—Å–∏–π
    mission_system.event_manager = mission_event_manager
    mission_system.statistics = mission_statistics
    mission_system.notifications = mission_notifications

    return mission_event_manager

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
event_system = EventSystem()